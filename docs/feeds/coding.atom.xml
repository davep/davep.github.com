<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.davep.org - Coding</title><link href="https://blog.davep.org/" rel="alternate"></link><link href="https://blog.davep.org/feeds/coding.atom.xml" rel="self"></link><id>https://blog.davep.org/</id><updated>2025-01-03T16:24:00+00:00</updated><subtitle>Code, Emacs, VR, Stuff...</subtitle><entry><title>Braindrop</title><link href="https://blog.davep.org/2025/01/03/braindrop.html" rel="alternate"></link><published>2025-01-03T16:24:00+00:00</published><updated>2025-01-03T16:24:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-01-03:/2025/01/03/braindrop.html</id><content type="html">&lt;p&gt;&lt;img alt="Braindrop" src="/attachments/2025/01/03/braindrop-social-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;A touch over a year ago I did the initial work on an application called
&lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt;, a terminal-based client for
the Pinboard bookmarking service. I had a lot of fun building it and it was
an application that I used on a near-daily basis. However, around August
last year &lt;a href="/2024/08/18/paindrop.html"&gt;I realised it was time for me to move on from Pinboard and try
something new&lt;/a&gt;; based on various recommendations
I settled on &lt;a href="https://raindrop.io/"&gt;Raindrop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned &lt;a href="(/2024/08/18/paindrop.html)"&gt;in the other blog post&lt;/a&gt;, Raindrop
offered more or less everything I had with Pinboard and so the move was
fairly straightforward. The one thing that was missing though was an
application similar to Tinboard.&lt;/p&gt;
&lt;p&gt;So, late on last year, with my winter break approaching, I decided to start
from scratch and build a &lt;em&gt;"Tinboard for Raindrop"&lt;/em&gt;, which I'm calling
&lt;a href="https://github.com/davep/braindrop"&gt;Braindrop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was going to be a bit of an adventure too. Since &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;being laid off from
Textualize earlier in 2024&lt;/a&gt; I'd not
been following its development quite as closely as I used to, and had also
run into some issues and bugs with it since that time; moreover, as well as
various bugs appearing, some breaking changes had also been made. As such
this was going to be a process where I'd wrap my head around what's happened
with the framework over the prior six months or so.&lt;/p&gt;
&lt;p&gt;Given all this, over the past couple of weeks I've been spending a few hours
a day doing some for-pleasure coding and v0.1.0 of Braindrop is the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Main display" src="/attachments/2025/01/03/braindrop-main.png"&gt;&lt;/p&gt;
&lt;p&gt;As much as possible I've tried to keep the look and feel similar to that of
Tinboard, while also doing my best to avoid some of the &lt;em&gt;"ah, I wish I
hadn't done it this way"&lt;/em&gt; design decisions I'd made. As of the time of
writing I'm very pleased with the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The edit dialog" src="/attachments/2025/01/03/braindrop-edit.png"&gt;&lt;/p&gt;
&lt;p&gt;One thing I did want to do is ensure that the application was as
keyboard-friendly as possible, while also still allowing use of the mouse.
Textual can sometimes get that wrong and I ran into an example of this while
trying to ensure that there's good in-application help. Somewhat recently
Textual added a built-in help system which, sadly, can't easily be used by
and navigated by someone using the keyboard. So instead I've recreated the
help system I built into Tinboard, while adopting the documentation standard
that Textual had settled on (which, coincidentally, was kind of similar to
what I did in Tinboard to start with).&lt;/p&gt;
&lt;p&gt;&lt;img alt="The help dialog" src="/attachments/2025/01/03/braindrop-help.png"&gt;&lt;/p&gt;
&lt;p&gt;As with Tinboard, I've also made sure to make full use of the command
palette, with every action that makes sense having a keyboard hotkey as well
as a command in the palette. I also took things a little further and made
sure that the hotkeys are shown in the command palette for easier discovery.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette" src="/attachments/2025/01/03/braindrop-command-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;I've also made sure that Textual's new theme system is available for easy
use; so out does dark/light mode toggling and in comes a collection of
different themes. Here's a wee selection as an example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example theme 1" src="/attachments/2025/01/03/braindrop-theme-1.png"&gt;
&lt;img alt="Example theme 2" src="/attachments/2025/01/03/braindrop-theme-2.png"&gt;
&lt;img alt="Example theme 3" src="/attachments/2025/01/03/braindrop-theme-3.png"&gt;
&lt;img alt="Example theme 4" src="/attachments/2025/01/03/braindrop-theme-4.png"&gt;&lt;/p&gt;
&lt;p&gt;That's a small selection of the themes, with more to explore.&lt;/p&gt;
&lt;p&gt;There's a few more things I want to do before I consider the application
v1.0-ready, but it's already in use by me and working well. As I decide what
else I want to add to it &lt;a href="https://github.com/davep/braindrop/issues?q=is%3Aissue+is%3Aopen+label%3ATODO"&gt;I'm building up a list of TODO
items&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given that my day job these days is quite varied, isn't quite so
coding-intensive, and isn't always related to all things Python, it's
actually been fun to sit down and hack up a pure Python application from
scratch again. It's also helped me discover a couple or so fresh bugs in
Textual (which &lt;a href="https://github.com/Textualize/textual/issues/created_by/davep"&gt;I've
reported&lt;/a&gt;, of
course) and given me the opportunity to &lt;a href="https://github.com/Textualize/textual/pulls/davep"&gt;PR some trivial fixes as I've
noticed typos and stuff as I
go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway; that's v0.1.0 out in the wild. I'm pleased with how it's turned out
and there's more to come. It's licensed GPL-3.0 and available &lt;a href="https://github.com/davep/braindrop"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/braindrop/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that
has &lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;braindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;braindrop&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;braindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this is useful to someone else. :-)&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Markdown all the things</title><link href="https://blog.davep.org/2024/11/04/markdown-all-the-things.html" rel="alternate"></link><published>2024-11-04T21:00:00+00:00</published><updated>2024-11-04T21:00:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-11-04:/2024/11/04/markdown-all-the-things.html</id><content type="html">&lt;p&gt;Recently I've been on a bit of a &lt;em&gt;"turn stuff into Markdown files and slap
them in an Obsidian Vault"&lt;/em&gt; trip. This kicked off a couple of months back
when I made a decision unrelated to coding.&lt;/p&gt;
&lt;p&gt;On and off, since my teenage years, I've kept journals. Since those teenage
years it's been more off than on, but a couple of times in my adult life
it's been really helpful to actually write one. The last time this happened
was early 2019. It was pretty vital I did that at the time and it was a
really sensible and helpful decision, and an approach to the situation I was
in that I'd recommend to anyone (and have done on occasion to anyone going
through the same thing).&lt;/p&gt;
&lt;p&gt;The actual motivation for starting that particular journal is long behind
me, but I'd got into the habit of writing it and so, until a couple or so
months back, I kept jotting something down every day. But I came to the
realisation that I didn't &lt;em&gt;need&lt;/em&gt; to and that it had become something of a
chore.&lt;/p&gt;
&lt;p&gt;I'd been using an application called &lt;a href="https://journey.cloud"&gt;Journey&lt;/a&gt;. It's
a great app, does the job well, but was also suffering from the creep of
"AI" (I've had a few apps ion my arsenal that don't need it, acquire a
useless "AI" feature). This privacy-problematic change of direction,
combined with the realisation that I didn't &lt;em&gt;need&lt;/em&gt; to write about my day,
every day, any more, made me decide it was time to stop and cancel the
subscription.&lt;/p&gt;
&lt;p&gt;Thankfully Journey has a pretty comprehensive export option so I used it and
didn't think too much more about it for a while.&lt;/p&gt;
&lt;p&gt;Meanwhile I also had a subscription to &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt; that
I didn't really use any more. Within it I had held a handful of years of
journal entries from a decade or so ago, along with other &lt;em&gt;"remember this
for some point in the future"&lt;/em&gt; stuff. For the longest time I was on some
really cheap tier that didn't exist any more, one that was low enough that I
didn't really notice the cost go out each month so I kept putting off
exporting things and closing it all down until &lt;em&gt;"next month"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then I got an email from them to say they were forcing me onto some new tier
that was more expensive. So that was the final straw there. I made an export
of what I had in Evernote and closed that account down too.&lt;/p&gt;
&lt;p&gt;A wee while went past and then I got to thinking that it might be
interesting to try and combine both these sources into one archived journal.
I had stuff from around 2010 to 2015, and I also had stuff from 2019 until
2024; the former in the Evernote archive and the latter in the Journey
archive. Surely I could write a couple of tools to turn that data into one
consolidated Obsidian Vault?&lt;/p&gt;
&lt;p&gt;Over the course of a couple of weekends
&lt;a href="https://github.com/davep/journey2md"&gt;&lt;code&gt;journey2md&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://github.com/davep/evernote2md"&gt;&lt;code&gt;evernote2md&lt;/code&gt;&lt;/a&gt; were born. While both
of those tools work differently, they're both designed to populate the same
Obsidian Vault. Once I was happy with this I did the mass conversion and I
was happy with the result.&lt;/p&gt;
&lt;p&gt;Now I have years of journal entries, all converted to Markdown files and
made available for reading via an application that lets me rummage through
history using dates and tags and all sorts of other searching.&lt;/p&gt;
&lt;p&gt;So I was happy with that and didn't give it much more though.&lt;/p&gt;
&lt;p&gt;Then last week I got to thinking...&lt;/p&gt;
&lt;p&gt;Twitter has turned into the worst place possible and I can't for the life of
me think why any right-thinking person who has an ounce of humanity or has
anything approaching a humanistic outlook on life would remain an active
user. Honestly I stuck it out longer than was sensible, but in June 2023 I
finally quit for good.&lt;/p&gt;
&lt;p&gt;Back when the &lt;a href="https://en.wikipedia.org/wiki/Acquisition_of_Twitter_by_Elon_Musk"&gt;new owner was
confirmed&lt;/a&gt;
I, like a lot of people, extracted my archive. It's since been sat in
storage doing nothing, yet there's a lot of data in there that could be
interesting to work with, or just to go back and look through. So last
week's thought was &lt;em&gt;"why don't I also turn this into an Obsidian Vault?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So I did...&lt;/p&gt;
&lt;p&gt;&lt;img alt="The graph of my Twitter Obsidian Vault" src="/attachments/2024/11/04/bird2glass.png"&gt;&lt;/p&gt;
&lt;p&gt;The tool I built to do this is
&lt;a href="https://github.com/davep/bird2glass"&gt;&lt;code&gt;bird2glass&lt;/code&gt;&lt;/a&gt;. As you'll see in &lt;a href="https://github.com/davep/bird2glass/blob/main/README.md"&gt;the
README&lt;/a&gt; it makes a
few assumptions about the state of Twitter archive dumps and also what a
user wants from this. Personally I'm pleased with the result.&lt;/p&gt;
&lt;p&gt;The main aim of the tool is to break the tweets down into a hierarchy of
year, month and day...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing a tweet" src="/attachments/2024/11/04/tweet-view.png"&gt;&lt;/p&gt;
&lt;p&gt;...and also to connect them with any account that was being replied to or
mentioned in some way...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing a user" src="/attachments/2024/11/04/user-view.png"&gt;&lt;/p&gt;
&lt;p&gt;This user view is handy when viewing backlinks, as it gives you a list of
all the tweets that mention that user (and, of course, if you're into
Obsidian's graph it will make for some interesting connections within
there).&lt;/p&gt;
&lt;p&gt;I sense there's more I can do with this, and I imagine I will continue to
tinker with it. Meanwhile though, if that sounds like something you'd
benefit from do feel free to grab it and play with it and hack on it. Keep
in mind the notes and assumptions that are in the README, and &lt;em&gt;really&lt;/em&gt; be
prepared for a lot of files to be created if you did a lot of tweeting like
I did (I do think that over 50,000 individual files for an Obsidian Vault is
a bit silly, if I'm honest).&lt;/p&gt;
&lt;p&gt;Meanwhile... I might need to look at other applications and think about how
I can turn the data into useful Markdown collections!&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="Twitter"></category><category term="Journey"></category><category term="Evernote"></category></entry><entry><title>Paindrop v1.0.0</title><link href="https://blog.davep.org/2024/08/18/paindrop.html" rel="alternate"></link><published>2024-08-18T10:57:00+01:00</published><updated>2024-08-18T10:57:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-08-18:/2024/08/18/paindrop.html</id><content type="html">&lt;p&gt;I was quite late discovering Pinboard; by the looks of things I created my
account and paid my first subscription for it in early 2019. Since then I've
been a pretty avid user and found it really useful. I've even written a
couple of clients for it (&lt;a href="https://github.com/davep/pinboard.el"&gt;one for
Emacs&lt;/a&gt; and &lt;a href="https://github.com/davep/tinboard"&gt;one for the
terminal&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;During that time it's had its fair share of hiccups and outages, but on the
whole I've found it a stable and useful service.&lt;/p&gt;
&lt;p&gt;The service does have its detractors, and concerns over its long-term
stability and how well it's maintained &lt;a href="https://news.ycombinator.com/item?id=34062802"&gt;are fairly
common&lt;/a&gt;. I half paid
attention to these, and had started to think about where I might go if there
was an issue.&lt;/p&gt;
&lt;p&gt;While maintaining and syncing bookmarks isn't exactly a difficult or
unsolved problem, and while it's also true that it could be fun to roll my
own solution, there are a couple of things I need that would make building
my own approach a bit of a chore.&lt;/p&gt;
&lt;p&gt;Things important to me are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An extension for any random browser I might find myself using&lt;/li&gt;
&lt;li&gt;A good mobile client for at least iOS and iPadOS&lt;/li&gt;
&lt;li&gt;A good API so I can write my own tools if I need to&lt;/li&gt;
&lt;li&gt;A clean and focused backend website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I kept these things in mind and kept an eye out but I'd never really felt
the need to actively start looking around.&lt;/p&gt;
&lt;p&gt;Then I &lt;a href="https://sfba.social/@peterme/112915495895055170"&gt;stumbled on this&lt;/a&gt;
after posting about &lt;a href="https://fosstodon.org/@davep/112925762265869565"&gt;another Pinboard
outage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That... yeah, that was the final push I needed to start to think seriously
about where to move and how.&lt;/p&gt;
&lt;p&gt;A couple of people suggested &lt;a href="https://raindrop.io"&gt;Raindrop&lt;/a&gt;, and from what
I could tell it was coming up as a pretty popular service that some Pinboard
users were migrating to. I had a look and it wasn't &lt;em&gt;quite&lt;/em&gt; what I was
after; but close.&lt;/p&gt;
&lt;p&gt;You see, there's two things I really like about Pinboard that Raindop didn't
seem to cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple support for "this shit is unread". I see things, I share to
  whatever Pinboard app I have on my phone or tablet, etc, and then I review
  some time later (normally in
  &lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Support for Private and Public pins. I've liked &lt;a href="https://pinboard.in/u:davep"&gt;having a feed of
  bookmarks I can let people see&lt;/a&gt; and Raindrop
  doesn't have this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I looked around at some blogs that talked about Pinboard vs Raindrop and
didn't see any that really dived into this particular aspect of migrating; I
also asked a couple of folk who'd made the move about this and they didn't
really have any insight (mainly because they didn't care about those
particular uses).&lt;/p&gt;
&lt;p&gt;One thing I did notice though was that Raindrop &lt;em&gt;does&lt;/em&gt; support making
individual collections public. So, if I was willing to sacrifice any other
uses for collections (a bookmark in Raindrop can only be in one collection),
I could simply have a &lt;em&gt;Public&lt;/em&gt; and a &lt;em&gt;Private&lt;/em&gt; collection and import pins
into the appropriate one. Also, unread pins could be left out of the
collections and I could use that to signify unread status.&lt;/p&gt;
&lt;p&gt;This seemed fine as I'm heavy on the tags anyway.&lt;/p&gt;
&lt;p&gt;Now... Raindrop has a pretty comprehensive import facility built in. I gave
it a try with Pinboard's backup file and it worked really well. That is...
really well except it just threw away the public/private/unread aspect of
the pins. There was only one thing for it then: I had to write my own
importer!&lt;/p&gt;
&lt;p&gt;Which brings me to &lt;a href="https://github.com/davep/paindrop"&gt;&lt;code&gt;Paindrop&lt;/code&gt;&lt;/a&gt;. It's a
quick hack but it does the job, and it does the import just how I wanted.
The result of the first test was pretty much spot on (in this image I'm
comparing what Raindrop says vs what Tinboard says I have in Pinboard):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparing Raindrop and Tinboard contents" src="/attachments/2024/08/18/raindrop-imports.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Usage is pretty straightforward. You create &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Private&lt;/code&gt;
collections in Raindrop, you create an app in Raindrop and get the access
token, you grab your Pinboard access token and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;paindrop&lt;span class="w"&gt; &lt;/span&gt;example:xxxxxxxxxxxxxxxxxxxx&lt;span class="w"&gt; &lt;/span&gt;xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the first parameter is the Pinboard access token and the second the
Raindrop access token.&lt;/p&gt;
&lt;p&gt;If all goes well, after a few moments, the importer should finish and you
should find that all of your pins have migrated to Raindrop, all public pins
are in the &lt;code&gt;Public&lt;/code&gt; collection and all private pins are in the &lt;code&gt;Private&lt;/code&gt;
collection. Any pins that were marked as unread will be &lt;em&gt;Unsorted&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note that if you used different names for your public and private
collections you can pass those names to &lt;code&gt;paindrop&lt;/code&gt; with the &lt;code&gt;--public&lt;/code&gt; and
&lt;code&gt;--private&lt;/code&gt; switches.&lt;/p&gt;
&lt;p&gt;If you're looking to move your bookmarking history out of Pinboard and want
to keep the same sort of structure I had I hope Paindrop will be useful to
you too.&lt;/p&gt;
&lt;p&gt;Paindrop can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/paindrop/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;paindrop&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;paindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/paindrop"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: As for the name... originally it was &lt;code&gt;pin2rain&lt;/code&gt; but then &lt;a href="https://fosstodon.org/@darrenburns/112978377299333401"&gt;Darren Burns
pointed out the obvious and it had to
happen&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="pinboard"></category><category term="raindrop"></category></entry><entry><title>Tinboard v0.14.0</title><link href="https://blog.davep.org/2024/05/14/tinboard-0-14-0.html" rel="alternate"></link><published>2024-05-14T08:02:00+01:00</published><updated>2024-05-14T08:02:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-05-14:/2024/05/14/tinboard-0-14-0.html</id><content type="html">&lt;p&gt;I've just released &lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; v0.14.0.
This release adds a &lt;a href="https://github.com/davep/tinboard/issues/49"&gt;feature that a user
requested&lt;/a&gt;, where you can set
the default values for the privacy and read-later status of a new bookmark:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The application settings dialog" src="/attachments/2024/05/15/app-settings.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;So, any time you create a new bookmark, the edit dialog will use those
values by default. It's a feature that makes perfect sense but I didn't
think to add it early on because... well, I set the defaults to my
preference.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Tinboard v0.12.0</title><link href="https://blog.davep.org/2024/04/18/tinboard-0-12-0.html" rel="alternate"></link><published>2024-04-18T16:46:00+01:00</published><updated>2024-04-18T16:46:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-18:/2024/04/18/tinboard-0-12-0.html</id><content type="html">&lt;p&gt;&lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; has turned into a tool I use
pretty much every day; it's probably my most-used Textual/Python-developed
application at this point. This is causing me to think more and more about
how I can add things to it that are related to the core purpose, but are
also outside of the main "interface with Pinboard" thing.&lt;/p&gt;
&lt;p&gt;A thing with keeping bookmarks for a long time is that some of them go
stale, go away. Some will just plain 404, others the whole site will
disappear. If I find myself going back to a bookmark and seeing this is the
case, I'll hit the &lt;a href="https://web.archive.org/"&gt;Wayback Machine&lt;/a&gt; and see if
there's an archive there.&lt;/p&gt;
&lt;p&gt;So I got to thinking: what if I add the ability to perform this check into
Tinboard itself? &lt;a href="https://www.youtube.com/watch?v=XDgiM6pUP2Y"&gt;So I did just that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, in the application, if you press &lt;kbd&gt;w&lt;/kbd&gt; with a bookmark
highlighted, it will check with the Wayback Machine to see if the bookmark
is in the archive. If it isn't you see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="No archive result" src="/attachments/2024/04/18/no-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, if it &lt;em&gt;is&lt;/em&gt; in the archive, you'll see something like
this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Is in the archive result" src="/attachments/2024/04/18/has-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I sense this is going to be the first step in a couple of features related
to this. I'm thinking that I may go on to add a &lt;em&gt;"swap the URL for this
bookmark with the Wayback Machine archive URL"&lt;/em&gt; feature, which will be handy
for those bookmarks that have one away, and it would also be useful to look
at the options for a &lt;em&gt;"please archive a copy of this bookmark"&lt;/em&gt; feature.&lt;/p&gt;
&lt;p&gt;But, for now, v0.12.0 is available and has this handy (for me anyway) first
step.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>PISpy v0.6.0</title><link href="https://blog.davep.org/2024/04/17/pispy-0-6-0.html" rel="alternate"></link><published>2024-04-17T11:30:00+01:00</published><updated>2024-04-17T11:30:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-17:/2024/04/17/pispy-0-6-0.html</id><content type="html">&lt;p&gt;Back in the very early days of the &lt;a href="https://blog.davep.org/2024/03/28/goodbye-textualize.html"&gt;Textual
adventure&lt;/a&gt;,
within the first month or so of working on the framework, we &lt;a href="https://textual.textualize.io/blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/"&gt;had a period
of
dogfooding&lt;/a&gt;.
One of the projects I wrote during that time was a little tool &lt;a href="https://textual.textualize.io/blog/2022/12/08/be-the-keymaster/#pispy"&gt;I called
PISpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The initial version was pretty much a quick hack; during that dogfooding
period I did my best to try and develop a new project every couple of days.
Since then I've let PISpy descend into &lt;a href="https://en.wikipedia.org/wiki/Software_rot"&gt;bit
rot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the last week or so I've turned my attention back to it and made an
effort to &lt;a href="https://www.youtube.com/watch?v=CepsN8TDq1E"&gt;tidy up the code&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=t2EUXA8RkN0"&gt;tidy it some more&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=2u5CfrgZWcc"&gt;and some
more&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=CDCvWCZx1AM"&gt;even some
more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This morning I put the finishing touches to these changes and released
&lt;a href="https://github.com/davep/pispy/releases/tag/v0.6.0"&gt;v0.6.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/shorts/67xtMdstbx4"&gt;&lt;img alt="PISpy in action" src="/attachments/2024/04/17/pispy-in-action.gif#centre"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PISpy can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideallty) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/pispy-client/"&gt;from
PyPI&lt;/a&gt;. It can also be installed with
Homebrew by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;pispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pispy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/pispy"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Tinboard v0.11.0</title><link href="https://blog.davep.org/2024/04/09/tinboard-0-11-0.html" rel="alternate"></link><published>2024-04-09T15:43:00+01:00</published><updated>2024-04-09T15:43:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-09:/2024/04/09/tinboard-0-11-0.html</id><content type="html">&lt;p&gt;While &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;my time working on Textual might have come to an
end&lt;/a&gt;, my time working &lt;em&gt;with&lt;/em&gt; Textual
hasn't. Three days back &lt;a href="https://www.youtube.com/watch?v=U66oHFLWmG4"&gt;I experimented with Textual's newly-added "inline
mode"&lt;/a&gt;:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
    &lt;iframe
        width="560"
        height="315"
        src="https://www.youtube.com/embed/U66oHFLWmG4?si=kCQba6vMoxpKMtBG"
        title="YouTube video player" frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In doing so I extended the application so that it's possible to run
&lt;code&gt;tinboard add&lt;/code&gt; and quickly enter a new bookmark and then carry on in the
terminal, without needing to "go fullscreen". I'll admit it's of limited
use, but it seemed like a good shakedown of the feature and in working on it
I was able to discover a couple of bugs
(&lt;a href="https://github.com/Textualize/textual/issues/4385"&gt;#4385&lt;/a&gt;,
&lt;a href="https://github.com/Textualize/textual/issues/4403"&gt;#4403&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The effect of this is this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinboard inline addition in action" src="/attachments/2024/04/09/tinboard-inline-add.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Homebrew all the Python things</title><link href="https://blog.davep.org/2024/03/10/homebrew-all-the-python-things.html" rel="alternate"></link><published>2024-03-10T14:12:00+00:00</published><updated>2024-03-10T14:12:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-10:/2024/03/10/homebrew-all-the-python-things.html</id><content type="html">&lt;p&gt;Over the past year and a half I've written a &lt;em&gt;lot&lt;/em&gt; of Python code, and a lot
of that Python code has been Textual applications; most of those Textual
applications have been very quick demonstration or test applications built
to help support someone asking for help; some of them have been less-trivial
applications written in my own time and for my own use and amusement. Of
them I'd say there are two near-daily-drivers, and a couple that I either
have more plans for, or like to maintain just for the hell of it.&lt;/p&gt;
&lt;p&gt;Those latter applications are all ones that &lt;a href="https://pypi.org/user/davepearson/"&gt;I've deployed to
PyPI&lt;/a&gt;, and because of that are all ones
that I've recommenced be installed using
&lt;a href="https://pipx.pypa.io/stable/"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;. During that time though I've had
half an inclination to make them &lt;a href="https://brew.sh/"&gt;installable via
Homebrew&lt;/a&gt;. While probably not installable from the core
Homebrew repository&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, at least installable from a "tap"&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; that's under
my own GitHub account or something.&lt;/p&gt;
&lt;p&gt;To this end I've had &lt;a href="https://til.simonwillison.net/homebrew/packaging-python-cli-for-homebrew"&gt;a blog post about packaging Python apps for
Homebrew&lt;/a&gt;
saved in Pinboard for a while now, and every time I look at it I think
&lt;em&gt;"this is a lot of faff, maybe later"&lt;/em&gt;. Today was that "later".&lt;/p&gt;
&lt;p&gt;As it turned out, it was &lt;em&gt;way&lt;/em&gt; easier than I first realised. The evolution
of today pretty much went like this:&lt;/p&gt;
&lt;h2&gt;Deciding to use a single repository as the "tap"&lt;/h2&gt;
&lt;p&gt;The blog post above seemed to suggest that for every application repository
you want a tap for, you probably want a parallel &lt;code&gt;homebrew-&lt;/code&gt;-prefixed
repository. This in turn would suggest that every time someone wants to
install one of your tools, they'd need to add a new tap&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. As I looked at
it this seemed like way too much faff, so in the end I decided &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;to create a
single repository that I'd keep all my formula files
in&lt;/a&gt;. The naming of
&lt;code&gt;homebrew-homebrew&lt;/code&gt; meant that the tap name would simply be
&lt;code&gt;davep/homebrew&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Simple and clean, I think: things for homebrew, things that can be installed
via homebrew, that come from davep. To add the tap it's simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Ensuring that all my applications and libraries publish source&lt;/h2&gt;
&lt;p&gt;Although it seems that it might be (possibly, maybe, perhaps, who can tell?)
deprecated, it looked like
&lt;a href="https://github.com/tdsmith/homebrew-pypi-poet"&gt;&lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/a&gt; was a
tool I'd need to do all the heavy work on making the formula file. A quick
test threw up a problem where it was complaining that my test package (one
of my own applications) didn't have an &lt;code&gt;sdist&lt;/code&gt;. Sure enough, through nothing
more than never having bothered to make it happen, the source of my
libraries and applications wasn't been uploaded to PyPI when I published.&lt;/p&gt;
&lt;p&gt;So I went through some of my repositories and fixed that, making patch
releases as I went.&lt;/p&gt;
&lt;h2&gt;Making a &lt;code&gt;Makefile&lt;/code&gt; to let me be lazy&lt;/h2&gt;
&lt;p&gt;The next thing to do was to figure out the most lazy way of building the
formula files. From what I could see the main steps to making all of this
work were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a venv and activate it&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the package you want to package for Homebrew&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;poet&lt;/code&gt; to make the formula&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seemed simple enough. For all sorts of lazy reasons I still tend to use
&lt;code&gt;pipenv&lt;/code&gt; to get things done quickly, and that seemed to work fine here too.
I'm also a fan of &lt;code&gt;PIPENV_VENV_IN_PROJECT=true&lt;/code&gt; which makes things clean and
tidy, so I figured a rule in a &lt;code&gt;Makefile&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.12
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev&lt;span class="w"&gt; &lt;/span&gt;homebrew-pypi-poet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;would be fine to make a clean venv ready to build the formula, and then I'd
have a rule for the package itself that depended on the above, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;oshit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;poet&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;oshit&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/oshit.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Fixing the package description&lt;/h2&gt;
&lt;p&gt;The above was great, and worked really well. But there was one issue that I
could see: the resulting formula file always had this &lt;code&gt;desc&lt;/code&gt; inside it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Shiny new formula&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From what I could see there was no way to tell &lt;code&gt;poet&lt;/code&gt; what I wanted the
description to be, and neither did I want to have to remember to edit that
line each time I regenerated the formula file. So &lt;code&gt;sed&lt;/code&gt; to the rescue then I
guess, with this sort of thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/Shiny new formula/The actual text I want/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/coolapp.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The result&lt;/h2&gt;
&lt;p&gt;The result of all of this is that I now have &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;a repository that I or anyone
else can use as a tap&lt;/a&gt; to be
able to install my stuff using the &lt;code&gt;brew&lt;/code&gt; command. So now if you want a
little Hacker News reader for the terminal but you don't want to be messing
with installing &lt;code&gt;pipx&lt;/code&gt; and the like, but you do use &lt;code&gt;brew&lt;/code&gt; on your machine,
it's just this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fingers crossed it all "just works" when I next upgrade one of those
packages. I will, of course, have to remember to go into
&lt;code&gt;davep/homebrew-homebrew&lt;/code&gt; and &lt;code&gt;make the-app&lt;/code&gt; for the relevant application,
and then commit and push the changes, but that's really not too difficult to
remember and do.&lt;/p&gt;
&lt;p&gt;Hopefully it'll then all just work.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do actually &lt;a href="https://formulae.brew.sh/formula/eg"&gt;have one package in
Homebrew&lt;/a&gt;, but it wasn't me who put
it there.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I really like Homebrew as a tool for getting stuff installed, by oh my
gods the naming of things in its ecosystem is terrible and confusing!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;No, really, I mean it, this naming convention is kinda cringe right?&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="Homebrew"></category><category term="Makefile"></category></entry><entry><title>Tinboard v0.10.0</title><link href="https://blog.davep.org/2024/03/07/tinboard-0-10-0.html" rel="alternate"></link><published>2024-03-07T08:45:00+00:00</published><updated>2024-03-07T08:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-07:/2024/03/07/tinboard-0-10-0.html</id><content type="html">&lt;p&gt;I just realised that it's been a while since I &lt;a href="/2023/12/25/tinboard-0-4-0.html"&gt;last posted an
update&lt;/a&gt; about &lt;code&gt;tinboard&lt;/code&gt;. This is probably
my most-used Textual-based application, and one I'm constantly tinkering
with, and just this morning I published v0.10.0.&lt;/p&gt;
&lt;p&gt;Often the changes are small tweaks or fixes to how it works, sometimes
they're simply updates to the version of Textual used, making use of some
new feature or other; I've yet to add another "major" feature so far. They
will come, but so far the ideas I have for the application haven't actually
felt that necessary. Although I say so myself it does what I need it to do
and it does it really well.&lt;/p&gt;
&lt;p&gt;So, as a quick catch-up of what's changed since v0.4.0 (which was the last
version I posted about):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v0.5.0 was released 2024-01-04; this included all the tags of a bookmark
when doing full-text searching.&lt;/li&gt;
&lt;li&gt;v0.6.0 was released 2024-01-10; it fixed a small bug where the tag
suggestion facility got confused by trailing spaces in the input field.&lt;/li&gt;
&lt;li&gt;v0.7.0 was released 2024-02-02; this updated the minimum Textual version to
v0.48.2 and removed all the custom changes to the Textual &lt;code&gt;TextArea&lt;/code&gt; widget,
making use of the updates to &lt;code&gt;TextArea&lt;/code&gt; that version of Textual made
available.&lt;/li&gt;
&lt;li&gt;v0.8.0 was released 2024-02-18; this fixed a crash on startup caused by a
newer release of Textual (the fault was in &lt;code&gt;tinboard&lt;/code&gt;; the update to Textual
helped reveal the problem).&lt;/li&gt;
&lt;li&gt;v0.9.0 was released 2024-02-29; it simply added support for using
&lt;kbd&gt;Esc&lt;/kbd&gt; at the top level of the application to quit (I like to camp
on &lt;kbd&gt;Esc&lt;/kbd&gt; to GTFO).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, just now, I released v0.10.0. This release makes full use of &lt;a href="https://github.com/Textualize/textual/pull/4154"&gt;some
work I recently did to enhance Textual's &lt;code&gt;CommandPalette&lt;/code&gt;
widget&lt;/a&gt;, which added a
"discover" system. The change in &lt;code&gt;tinboard&lt;/code&gt; is that all of the &lt;a href="https://github.com/davep/tinboard/tree/main/tinboard/commands"&gt;command
palette
providers&lt;/a&gt;
now have &lt;code&gt;discover&lt;/code&gt; methods too. The result of this change is that when you
open the command palette in &lt;code&gt;tinboard&lt;/code&gt; (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;) you
can see &lt;em&gt;every&lt;/em&gt; possible command right away.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in discovery mode" src="/attachments/2024/03/07/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>How not to ask for help</title><link href="https://blog.davep.org/2024/02/04/how-not-to-ask-for-help.html" rel="alternate"></link><published>2024-02-04T11:27:00+00:00</published><updated>2024-02-04T11:27:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-02-04:/2024/02/04/how-not-to-ask-for-help.html</id><content type="html">&lt;p&gt;My association with Textual works on two levels: on the one hand, sure, it's
&lt;a href="https://www.textualize.io/about-us/"&gt;currently my day job&lt;/a&gt;; on the other
hand it's a FOSS project that I'm keen to support so &lt;em&gt;"free time me"&lt;/em&gt; tries
to work with it and support others working with it too. For this reason
you'll often see me being terminally&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; online in the Textual Discord,
trying to answer questions as they come up, every waking free moment.&lt;/p&gt;
&lt;p&gt;Almost without exception the people who ask for help are appreciative and
ask in the spirit of wanting help and wanting to work together with whoever
is helping them to get an answer. That... that's actually quite a cool thing
to be part of. I like the sense of community that comes from someone going
&lt;em&gt;"bah I'm trying to do this thing and it isn't working PLEASE HELP!"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And then... well, let's just say that sometimes the odd question will crop
up that seems to be asked from a less collaborative position.&lt;/p&gt;
&lt;p&gt;Without wanting to appear to dunk on an individual (I don't wish to), I want
to break down an example that happened yesterday. For some background, I'd
been AFK all day, &lt;a href="https://fosstodon.org/@davep/111867694675165507"&gt;having a wonderful time in town with a
friend&lt;/a&gt;, shopping,
&lt;a href="https://fosstodon.org/@davep/111867942313370807"&gt;lunch&lt;/a&gt;, a movie, that sort
of thing. A nicely-chilled day where I didn't even look at the Discord
notifications that had popped up on my watch and phone.&lt;/p&gt;
&lt;p&gt;However, later on that evening, finally home and flopped on the sofa, I saw
a question pop up that, while lacking &lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;any useful
detail&lt;/a&gt; and
possibly suffering a wee bit from being &lt;a href="https://label.dev/articles/xy-problem/"&gt;an XY
problem&lt;/a&gt;, the immediate answer was
clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;tt&gt;BadIdentifier: 'test.udp_json_client-input' is an invalid id; identifiers must
contain only letters, numbers, underscores, or hyphens, and must not begin with
a number.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;????????????????? a dot isn't allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like I say: it lacks context and detail, and the number of question marks
doesn't really clarify much, but the core question that seems to be at play
here is &lt;em&gt;"is it true that a full stop can't be used as part of the ID of a
widget?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The answer is: no, it can't. There's a reason for that too, and if someone
were to take a step back for a moment and think about how IDs play a part in
queries and how they'd be used in a stylesheet, the reason for that might
pop out. So, to help the person asking the question walk in the direction of
the answer, I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you come to query that how would the parser know it’s not ID “test”
combined with a class, if dot was allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we go on, to illustrate my point, consider this ID: &lt;code&gt;foo.bar&lt;/code&gt;. When
you come to query that back, or use it in a stylesheet, how would &lt;code&gt;#foo.bar&lt;/code&gt;
look? Is it a widget with the ID &lt;code&gt;foo.bar&lt;/code&gt;; or is it a widget with the id
&lt;code&gt;foo&lt;/code&gt; and the class &lt;code&gt;bar&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As far as Textual's CSS is concerned, it would be the latter.&lt;/p&gt;
&lt;p&gt;But at this point it didn't seem necessary to get into all that detail; I
like to try and assume knowledge on the part of the person asking the
question, sans any other evidence, so for the moment I'll assume a &lt;em&gt;"oh,
right, yeah, that's a damn good point"&lt;/em&gt; kind of reply. Or if not, perhaps a
&lt;em&gt;"I don't quite follow, could you explain?"&lt;/em&gt; reply, in which case I'm happy
to go into all the detail.&lt;/p&gt;
&lt;p&gt;The reply was neither:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why are element ID and classes co-mingled?&lt;/p&gt;
&lt;p&gt;this was previously allowed so your question doesn't really make sense to
me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I'm confused. Asking why element IDs and classes &lt;em&gt;are&lt;/em&gt; co-mingled seems
odd; but I'm used to chatting with people who don't have English as a first
language so I'm going to assume it's just a wording choice; but the latter
part is very odd: this has &lt;em&gt;never&lt;/em&gt; been allowed. Or, more to the point...
without any proper context I can't really appreciate what claim is being
made here.&lt;/p&gt;
&lt;p&gt;You see... &lt;a href="https://github.com/Textualize/textual/issues/3954"&gt;I did notice a bug in Textual recently, when it came to widget
IDs&lt;/a&gt;. Long story short:
when you set your ID for the widget in your code, no actual validation of
the ID was being done. This was an oversight &lt;a href="https://github.com/Textualize/textual/pull/4032"&gt;that was fixed in the latest
release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But knowing that that's the case would be guesswork on my part; I'm also
fresh at my desk after a day out; I'm probably not quite in the
coding/Textual zone yet, so rather than try and guess half of the
conversation, it's easier to just ask the person who is asking. So I ask
them to restate the question, and give some more background.&lt;/p&gt;
&lt;p&gt;The reply is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the objective is to put a string like test.udp_json_client-input as the
label of a tab, which previously just used the ID property. from skimming
release notes, is it better to explicitly set the label, and then assign
something compliant for the ID separately?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait... what? I thought we were talking about valid widget IDs, now we're
talking about tabs and labels? Do we mean &lt;code&gt;TabbeContent&lt;/code&gt; and the labels of a
&lt;code&gt;TabPane&lt;/code&gt;? This is a bit different. So I'm sat there trying to figure out
this person's thought process so I can offer the help they're after and this
follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;okay @davep, you have a real bug. --content-tab- prefix is not ephemeral.
if I create a tab and grab .id, that prefix comes with it, so if you save
it for later and try to set .active, assigning .active doesn't agree that
there is a tab --content-tab-thing&lt;/p&gt;
&lt;p&gt;so I need to de-mangle the name manually before assigning .active I guess?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wut? Like... wut? Okay, we do seem to be talking about &lt;code&gt;TabbedContent&lt;/code&gt;, I
recognise the values being mentioned here; we did some work &lt;a href="https://github.com/Textualize/textual/pull/3815"&gt;late on last
year&lt;/a&gt; that added some
namespacing to parts of the &lt;code&gt;TabbedContent&lt;/code&gt; widget in an effort to &lt;a href="https://github.com/Textualize/textual/issues/3695"&gt;reduce
some foot-gun
situations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But... there's no &lt;code&gt;.&lt;/code&gt; being used in the IDs as part of that; why are we now
proclaiming a bug in an unrelated PR? That's quite the leap with zero
evidence. Like... sure, I'm &lt;em&gt;all&lt;/em&gt; for being alerted to bugs and fixing them,
but this doesn't seem like that.&lt;/p&gt;
&lt;p&gt;And then there's the &lt;em&gt;"so I need to..."&lt;/em&gt; conclusion that also seems to have
no connection to the original question.&lt;/p&gt;
&lt;p&gt;Anyone who has ever done support will recognise this situation, I'm sure.
Someone has seen a problem, they've dug around a little and reached a
conclusion about what the cause is, and turns up looking for help with the
&lt;em&gt;conclusion&lt;/em&gt; they've reached (very much a variant of &lt;a href="https://label.dev/articles/xy-problem/"&gt;a XY
problem&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;That almost never gets us where we want to go, so I do the obvious thing; I
try and reboot the question; I try and get us back to the start and try and
get some clarity; I try and encourage asking the question with zero
assumptions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm afraid I'm still not really understanding your question, as it now no
longer seems to relate to what you very first asked. Perhaps you could
start again, ideally with an
&lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;MRE&lt;/a&gt; of what
you're looking at and trying to do, for clarity?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I figure, whatever the problem is, it can be illustrated with like a dozen
lines of code. Also, when asking people to do this, it often actually helps
them rubber-duck their own problem. There's been plenty of times on Discord
where someone's "found a bug" in Textual, they're asked to make an MRE of
it, and they come back and go &lt;em&gt;"oh, shoot, right, I did that and realised
the bug was in my code"&lt;/em&gt;. It's cool when they happens; everyone learns
something.&lt;/p&gt;
&lt;p&gt;So... no MRE comes back, but this is the reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm trying to fix multiple breakages in my application from some recent
changes. Right now I can't wrap my head around what to assign a
tabbed_content.active for it to work how it did before (where if you have
a tab with ID sample, you can assign tabbed_content.active = "sample", but
you can't do that anymore)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While not an MRE, I &lt;em&gt;can&lt;/em&gt; work with this. It seems clear that they have a
&lt;code&gt;TabbedContent&lt;/code&gt; where they have a &lt;code&gt;TabPane&lt;/code&gt; with the ID &lt;code&gt;"sample"&lt;/code&gt; and they
are struggling to make it the &lt;code&gt;active&lt;/code&gt; tab by setting &lt;code&gt;active&lt;/code&gt; to
&lt;code&gt;"sample"&lt;/code&gt;. That seems hugely unlikely, this is what &lt;code&gt;TabbedContent&lt;/code&gt; is all
about, I think we'd have noticed (I'm petty sure we've got unit tests that
cover this), but I'm game. I can test this. And the MRE I write will
illustrate there isn't a problem.&lt;/p&gt;
&lt;p&gt;So I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, I can only suggest that you make an MRE of the issue you're seeing.
For example, here's me making a set of tabs, the last of which has the ID
"four", and I set the active to "four":&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and provide the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Based on what they've most-recently said is the problem, I'm confident
they'll see that this MRE is their situation in a nutshell, and we can work
out from there and figure out what the problem is they're seeing and where
this &lt;code&gt;.&lt;/code&gt; in their IDs is coming from (because I'm &lt;em&gt;very&lt;/em&gt; confident it isn't
coming from the work that was done on &lt;code&gt;TabbedContent&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is good. We're getting close to heading down a good path; I can feel
it!&lt;/p&gt;
&lt;p&gt;I was wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/Textualize/textual/blob/main/src/textual/widgets/_tabbed_content.py#L513&lt;/p&gt;
&lt;p&gt;there's no way you can deny you just added a metric ton of shenanigans
with the tab ID stuff. I can't get it to work at all anymore (assigning
.active), but yes I will either come up with an MRE or find the bug and
let you know&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, rather than back up a wee bit, work with the MRE I wrote for them so we
can take a walk through the problem, they instead decide to tell me that the
PR I did last year (which &lt;em&gt;still&lt;/em&gt; isn't implicated in any of this outwith of
them seemingly assuming it's the cause of all the issues, presented with
zero evidence that it is) was simply &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No!&lt;/p&gt;
&lt;p&gt;Stop!&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; how you ask for help.&lt;/p&gt;
&lt;p&gt;This isn't how you ask for help from a product or service you pay for. This
&lt;em&gt;really&lt;/em&gt; isn't how you ask for help from a Free Software project, where the
people who are offering you help are doing so in their free time because
they want people to be able to build cool things with it.&lt;/p&gt;
&lt;p&gt;It really isn't hard at all to show just a wee bit of respect for people's
time and willingness to try and help you.&lt;/p&gt;
&lt;p&gt;Now... I get it. I can imagine a scenario where someone has just updated
Textual and their application suddenly starts throwing all sorts of weird
and new errors. That happens. That happened to me &lt;a href="https://github.com/Textualize/textual/issues/4101"&gt;on Thursday evening just
gone&lt;/a&gt;. But that's no
reason for approaching getting help like this.&lt;/p&gt;
&lt;p&gt;The way to approach it is this: pin the problem dependency, perhaps publish
a new version of your application so there's no accidental update of the
dependency, then head to any of the help resources for the dependency has
and &lt;em&gt;work with people who want to help you to find the cause of the
problem&lt;/em&gt;. Trust me, it'll go a lot faster if you work with them, take on
board suggestions (no matter how odd they might first appear), and really
don't call their code &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The conclusion to all of this? The person asking the question eventually
found they were setting some widget's ID to an invalid ID; one with a &lt;code&gt;.&lt;/code&gt; in
it. So as I suspected and wanted to walk them to: they had invalid IDs all
along and they only found out about this because ID validation was fixed.&lt;/p&gt;
&lt;p&gt;Perhaps one day they'll retract the claim that my actually-unrelated code
that wasn't "just" released &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.46.0"&gt;but was from last
year&lt;/a&gt; is &lt;em&gt;"a
metric ton of shenanigans"&lt;/em&gt;. &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Geddit? GEDDIT?&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="free-software"></category><category term="foss"></category><category term="help"></category></entry><entry><title>Quizzical</title><link href="https://blog.davep.org/2024/01/29/quizzical.html" rel="alternate"></link><published>2024-01-29T21:30:00+00:00</published><updated>2024-01-29T21:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-29:/2024/01/29/quizzical.html</id><content type="html">&lt;p&gt;I feel like I'm on a bit of a roll when it comes to building applications
for the terminal at the moment; while I'm still tinkering and improving
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; and
&lt;a href="https://github.com/davep/oshit"&gt;OSHit&lt;/a&gt;, I had the urge to tackle another
idea that's been on my TODO list for a while.&lt;/p&gt;
&lt;p&gt;This is something &lt;a href="https://github.com/davep/quiz.el"&gt;I did for Emacs&lt;/a&gt; back
in 2017 and I felt it was a &lt;em&gt;perfect&lt;/em&gt; candidate for a Textual-based project.
It's a terminal-based trivia quiz game, using &lt;a href="https://opentdb.com/"&gt;the Open Trivia
Database&lt;/a&gt; as the source of questions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quizzical" src="/attachments/2024/01/29/quizzical.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I've just published an early version &lt;a href="https://pypi.org/project/quizzical/"&gt;to
PyPI&lt;/a&gt;; it still needs some polish and I
have a few other ideas for it, but as it stands I feel it's a fun little
game to mess around with.&lt;/p&gt;
&lt;p&gt;The idea is pretty straightforward: you can run it up and create lots of
different quizzes, there are various parameters you can use to create lots
of different kinds of challenges:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Building a new quiz" src="/attachments/2024/01/29/new-quiz.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Once you're created a quiz, you can run it and answer away:&lt;/p&gt;
&lt;p&gt;&lt;img alt="An example question" src="/attachments/2024/01/29/question.png"&gt;&lt;/p&gt;
&lt;p&gt;Right now the idea is that you answer by pressing either &lt;kbd&gt;1&lt;/kbd&gt;,
&lt;kbd&gt;2&lt;/kbd&gt;, &lt;kbd&gt;3&lt;/kbd&gt; or &lt;kbd&gt;4&lt;/kbd&gt; (or just &lt;kbd&gt;1&lt;/kbd&gt; or
&lt;kbd&gt;2&lt;/kbd&gt; for true/false questions); when I get a moment I'll also enable
mouse support for selecting an answer too (honestly I feel
keyboard-answering feels far more natural).&lt;/p&gt;
&lt;p&gt;Once the quiz is done you can review your answers and see which were right
and which were wrong:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing results" src="/attachments/2024/01/29/results.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;As I say: there's a bunch of other things I want to add to this (keeping
track of scores, adding session token support to reduce the chances of
repeat questions, etc), but this felt like a good spot to make a v0.1.0
available if anyone else wanted to have a play.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/quizzical/"&gt;from PyPi&lt;/a&gt;.
The &lt;a href="https://github.com/davep/quizzical"&gt;source is available over on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: Now you can see why I made
&lt;a href="/2024/01/11/textual-countdown.html"&gt;&lt;code&gt;textual-countdown&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Orange Site Hit v0.5.0</title><link href="https://blog.davep.org/2024/01/17/oshit-0-5-0.html" rel="alternate"></link><published>2024-01-17T21:36:00+00:00</published><updated>2024-01-17T21:36:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-17:/2024/01/17/oshit-0-5-0.html</id><content type="html">&lt;p&gt;Just a wee catch-up post about OSHit, &lt;a href="https://github.com/davep/oshit"&gt;my terminal-based HackerNews
browser&lt;/a&gt;. Over the past couple of weeks I've
made some small changes, so I thought I'd make mention of what I've done.&lt;/p&gt;
&lt;p&gt;As of v0.5.0, which I released earlier today, I've:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added a quick way of following links while viewing a comment. While a
  comment is highlighted you can press &lt;kbd&gt;l&lt;/kbd&gt; to follow a link; if
  there's more than one link in the comment a menu will be shown and you can
  select which one to follow.&lt;/li&gt;
&lt;li&gt;Added support for viewing polls. Polls seem to be few and far between on
  HackerNews, so when I published the first version of OSHit I didn't have
  one to hand to test any code against. Eventually one turned up and broke
  OSHit (on purpose; I wanted to see when that happened) so I could then add
  the code to load polls and show them. Right now it just shows scores; I
  might do actual charts at some point.&lt;/li&gt;
&lt;li&gt;Added optional item numbers in the lists; turned on/off with
  &lt;kbd&gt;F4&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far all small things, but handy little improvements. There's still a nice
TODO list in the README and I will slowly work through it. Along with
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; these are two applications
that have absolutely turned into "daily drivers", so they're going to get a
lot of tweaking over the next few weeks, probably even months.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Orange Site Hit v0.2.0</title><link href="https://blog.davep.org/2024/01/07/oshit-0-2-0.html" rel="alternate"></link><published>2024-01-07T09:50:00+00:00</published><updated>2024-01-07T09:50:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-07:/2024/01/07/oshit-0-2-0.html</id><content type="html">&lt;p&gt;This is actually the second release of OSHit since &lt;a href="/2024/01/01/oshit.html"&gt;I first announced it a
week back&lt;/a&gt;, and I'll get to that other release in a
moment.&lt;/p&gt;
&lt;p&gt;I've just published v0.2.0, which isn't a very substantial release, but
which bumps the required version of Textual to
&lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.1"&gt;v0.47.1&lt;/a&gt; and
has some fun with &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.0"&gt;the new nested CSS
feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Underlying the point of this release was me taking a &lt;em&gt;"real world"&lt;/em&gt;
application of mine and nesting as much of the CSS within it as possible, in
part to get a feel for how and when it's useful, but also to give it a
proper test in a &lt;em&gt;"proper"&lt;/em&gt; application. In doing so &lt;a href="https://github.com/Textualize/textual/issues/3969"&gt;I think I've found one
bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dogfooding is always a good idea.&lt;/p&gt;
&lt;p&gt;The main visible change in this release is I've played around with the look
of the comments dialog a bit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OSHit you have comments" src="/attachments/2024/01/07/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm still narrowing this down, but I think I prefer this look to what I
started out with.&lt;/p&gt;
&lt;p&gt;Another change I made was also to the comments dialog. Before, if you
performed the &lt;em&gt;"expand comments"&lt;/em&gt; action on a comment card that already had
its comments expanded, it would move focus to the first child comment; this
was a deliberate choice that felt right at the time. Having used the app for
a few days now I've realised that making it an open/close toggle is far more
useful. So that's what I've done.&lt;/p&gt;
&lt;p&gt;Now... as for &lt;a href="https://github.com/davep/oshit/releases/tag/v0.1.1"&gt;the previous
release&lt;/a&gt; I mentioned
above. That was a fun one.&lt;/p&gt;
&lt;p&gt;Back when I released v0.1.0 some joker decided that it would be fun to
&lt;a href="https://news.ycombinator.com/item?id=38831083"&gt;submit the blog post about it to the Orange
Site&lt;/a&gt;. The comments there
went as you'd expected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some riffed off the opening paragraph, ignoring the tool itself.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in self-reflective way.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in a &lt;em&gt;"I never see the problem"&lt;/em&gt;
  way.&lt;/li&gt;
&lt;li&gt;One or two did the usual &lt;em&gt;"why even bother building that when
  &lt;code&gt;$TOOL_OF_CHOICE&lt;/code&gt; exists?"&lt;/em&gt; dance to show their terminal purity.&lt;/li&gt;
&lt;li&gt;One or two posted genuinely useful links to other similar projects.&lt;/li&gt;
&lt;li&gt;The biggest tree of comments was kind of a fight.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One comment caught my eye though; someone reported having a problem running
it. My initial thought on reading it was &lt;em&gt;"my dude, seriously, you're going
to report the problem in some random comment on HN rather than raise an
issue with the author?!?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For once &lt;a href="https://github.com/davep/oshit/issues/2"&gt;I was wrong to be so cynical&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, yeah, that was the reminder I needed that I'd been intentionally
reckless while writing the original code, and hadn't &lt;a href="https://github.com/davep/oshit/pull/4"&gt;gone back to the API
code I'd written and made it behave&lt;/a&gt;
before doing the initial release.&lt;/p&gt;
&lt;p&gt;All of which is to say: if you run into a problem with some FOSS project, be
like &lt;a href="https://github.com/mihaitodor"&gt;@mihaitodor&lt;/a&gt;. Issue that thing so the
developer gets to know about it; don't assume they'll be reading some random
comment section, social media site or Discord server!&lt;/p&gt;
&lt;p&gt;That and don't make 500+ HTTP requests at once; that might not end well for
some.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Orange Site Hit</title><link href="https://blog.davep.org/2024/01/01/oshit.html" rel="alternate"></link><published>2024-01-01T10:17:00+00:00</published><updated>2024-01-01T10:17:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-01:/2024/01/01/oshit.html</id><content type="html">&lt;p&gt;I know I'm not alone in having a relationship with &lt;a href="https://news.ycombinator.com/"&gt;the orange
site&lt;/a&gt; that is... weird. I generally dislike
the culture there, it's almost impossible to read any of the comments
without being frustrated about the industry I work in or am adjacent to and
some of the people who inhabit it; but as a link aggregator of stuff I might
find interesting... I honestly can't think of anywhere better. So, yes, I've
been a fairly avid reader of HackerNews for many years, and have even had an
account there for over 4 years.&lt;/p&gt;
&lt;p&gt;Given this, for a wee while now, I've been meaning to knock up a
terminal-based client for it using
&lt;a href="https://textual.textualize.io/"&gt;Textual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So after work on &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt; settled down I got
the urge to start a new pet project (not abandoning Tinboard, I'm still
going to be tweaking and extending it of course) and finally knocking up
that client seemed like the one.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Orange Site Hit&lt;/em&gt; is the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OShit" src="/attachments/2024/01/01/oshit-index.png"&gt;&lt;/p&gt;
&lt;p&gt;It's worth making clear from the very start: this is a read-only reader.
There is no logging in, there is no voting, there is no posting of things.
This is a client built with &lt;a href="https://github.com/HackerNews/API"&gt;their own
API&lt;/a&gt; and it doesn't provide such a thing;
at least not now and despite me seeing past promises that this will change,
there's no API for doing that sort of thing.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The idea of this application is you can run it up in the terminal, check the
top, best and latest from the categories provided by the API, perhaps dive
off into your web browser if needed, and then got on with other things.&lt;/p&gt;
&lt;p&gt;It's there for when you're in the terminal you just &lt;em&gt;need&lt;/em&gt; your hit of the
orange site.&lt;/p&gt;
&lt;p&gt;The main screen of the app revolves around the index of items, most of which
are going to be stories. You can see an example of that above. For people
who prefer things to be slightly less cramped, I've also added a "relaxed
layout" mode too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The index in relaxed mode" src="/attachments/2024/01/01/oshit-index-relaxed.png"&gt;&lt;/p&gt;
&lt;p&gt;From the index you can head off into your web-browser by hitting
&lt;kbd&gt;Enter&lt;/kbd&gt; on any item; if the item is a story that links to somewhere
that link will be opened; if it's something more like &lt;em&gt;AskHN&lt;/em&gt;, or a job,
it'll open the related page on HackerNews itself.&lt;/p&gt;
&lt;p&gt;Pressing &lt;kbd&gt;u&lt;/kbd&gt; with an item selected will let you view the details
for the user who posted the item:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the details of a user" src="/attachments/2024/01/01/oshit-user-dialog.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're the sort of person who wants to torture themselves by reading the
comments (oh come on we all do it!), there's a comment reader/navigator too.
With an item selected press &lt;kbd&gt;c&lt;/kbd&gt; and the comment dialog will open:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the real meat of HackerNews" src="/attachments/2024/01/01/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; the navigation within that dialog is fine; although I can see some
scope for improvement. At the moment it uses a widget-per-comment (actually,
it's at least 4 widgets per comment), which is fine and Textual handles that
without an issue, even on items with lots of comments, but longer-term I can
see me having some fun using &lt;a href="https://textual.textualize.io/guide/widgets/#line-api"&gt;the line
API&lt;/a&gt; to build a
super-efficient comment presentation and navigation widget.&lt;/p&gt;
&lt;p&gt;That's it for now; it feels like a good v0.1.0 spot to be in. There are a
bunch of things I still want to do with it (better cleaning up of the text,
perhaps with some markup support so links get handled, etc; plus lots of
ways of searching for stuff), but I felt it was in a place where I could
start using it.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/oshit/"&gt;from PyPi&lt;/a&gt;. The
&lt;a href="https://github.com/davep/oshit"&gt;source is available over on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Yes, there are lots of clients that do all sorts of HTML-scraping of
the actual website to make this possible; this ain't that. This ain't
going to be that.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.4.0</title><link href="https://blog.davep.org/2023/12/25/tinboard-0-4-0.html" rel="alternate"></link><published>2023-12-25T10:43:00+00:00</published><updated>2023-12-25T10:43:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-25:/2023/12/25/tinboard-0-4-0.html</id><content type="html">&lt;p&gt;Although it's not planned this way, so far it looks like I'm on a "every
other day" release cycle with Tinboard right now! Today's release is a small
but handy one, I think.&lt;/p&gt;
&lt;p&gt;Thanks to the handy little library
&lt;a href="https://github.com/asweigart/pyperclip"&gt;&lt;code&gt;pyperclip&lt;/code&gt;&lt;/a&gt; I've added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to copy a bookmark's URL to the clipboard.&lt;/li&gt;
&lt;li&gt;URL field autofill if you go to add a new bookmark and the clipboard
  appears to have a valid URL in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="The code for copying to the clipboard" src="/attachments/2023/12/25/copy-to-clipboard.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;At the moment the copy facility is just a straightforward copy of the URL,
nothing else. At some point I may add an extended copy option, which will
open a dialog with a bunch of options of what to copy from the bookmark, and
perhaps also how to format it or something. Like, often, if I'm copying a
bookmark's URL, it's because I want to paste it into some Markdown document,
or some location that will handle Markdown markup.&lt;/p&gt;
&lt;p&gt;Perhaps that'll turn up in v0.5.0 in a couple of days? ;-)&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.3.0</title><link href="https://blog.davep.org/2023/12/23/tinboard-0-3-0.html" rel="alternate"></link><published>2023-12-23T08:49:00+00:00</published><updated>2023-12-23T08:49:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-23:/2023/12/23/tinboard-0-3-0.html</id><content type="html">&lt;p&gt;It looks like I'm in a wee period of small incremental changes and release
of &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt;. This morning I've release v0.3.0,
which has a couple of small but useful changes.&lt;/p&gt;
&lt;p&gt;The first is more of a cosmetic thing. The &lt;a href="https://textual.textualize.io/widgets/footer/"&gt;&lt;code&gt;Footer&lt;/code&gt; widget in
Textual&lt;/a&gt; is handy for showing
the current keyboard bindings in a given context, but it can get massively
cluttered very quickly (we do have plans to revisit this); in Tinboard this
clutter creep was turning into a thing.&lt;/p&gt;
&lt;p&gt;So I've removed almost every binding from being displayed in the &lt;code&gt;Footer&lt;/code&gt;,
and have placed an emphasis on the user pressing &lt;kbd&gt;F1&lt;/kbd&gt; to get
context-sensitive help, and have also left the most useful bindings in the
footer with very minimal descriptions.&lt;/p&gt;
&lt;p&gt;Given that this is a keyboard-first application, and I've tried to make the
bindings easy to remember, I think it's going to make more sense to do it
like this, and will make for a tidier UI too.&lt;/p&gt;
&lt;p&gt;There is one disadvantage here of course: by removing the display of
bindings from the footer, the mouse-heavy user becomes disadvantaged; if a
particular binding doesn't have a UI feature that favours the mouse to cover
it too there's no way to initiate that action with the mouse. I'm going to
think on this a little. Again, Tinboard is designed for &lt;em&gt;me&lt;/em&gt; first and
foremost, and my preference is to be keyboard-first when using the
application; but finding a good compromise would be advantageous when it
comes to advising people asking about Textual application design.&lt;/p&gt;
&lt;p&gt;The second change is a simple but useful one. I've added a toggle of the
sort order of the tags menu in the left-hand column (bound to
&lt;kbd&gt;F4&lt;/kbd&gt;). Right now it simply toggles between alphabetical order, or
bookmark count order (most to least). At some point I might make it more of
a cycle than a toggle, but this serves my purposes for now.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.2.0</title><link href="https://blog.davep.org/2023/12/21/tinboard-0-2-0.html" rel="alternate"></link><published>2023-12-21T09:29:00+00:00</published><updated>2023-12-21T09:29:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-21:/2023/12/21/tinboard-0-2-0.html</id><content type="html">&lt;p&gt;Following on from &lt;a href="/2023/12/19/tinboard.html"&gt;the initial full release a couple of days
ago&lt;/a&gt;, I've just &lt;a href="https://github.com/davep/tinboard/releases/tag/v0.2.0"&gt;released v0.2.0 of
Tinboard&lt;/a&gt;. There's
just one small change in this, but I think it's a really useful one.&lt;/p&gt;
&lt;p&gt;In the top-left corner of the screen there's a menu of main filters, letting
you switch between seeing all bookmarks, or a combination of read, unread,
public, private, etc... In using the application I quickly realised that it
would be handy to have bookmark counts in that menu.&lt;/p&gt;
&lt;p&gt;So I added that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Counts in the filters menu" src="/attachments/2023/12/21/filters-menu.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;These counts are a little different from those in the tags list, in that
they always show the number of matching bookmarks amongst &lt;em&gt;all recorded
bookmarks&lt;/em&gt;, not just those currently on display (and so subject to any sort
of filter that's in play).&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; this is the right approach here. I know for sure that that's what
I want from this, and I am writing this for me after all...&lt;/p&gt;
&lt;p&gt;What's handy about this is that it makes it easier for me to see how many
bookmarks haven't been tagged, and also how many I haven't looked back over
and marked as read. This is already helping me get to untagged-zero.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard</title><link href="https://blog.davep.org/2023/12/19/tinboard.html" rel="alternate"></link><published>2023-12-19T09:47:00+00:00</published><updated>2023-12-19T09:47:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-19:/2023/12/19/tinboard.html</id><content type="html">&lt;p&gt;Over the past few weeks I've been working on a new pet project, in part done
as a &lt;a href="https://textual.textualize.io/"&gt;Textual&lt;/a&gt; "dogfooding" project, but
also because this is a tool I've been wanting for a while now: a
terminal-based client for the &lt;a href="https://pinboard.in/"&gt;Pinboard bookmarking
service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The dogfooding side of the development has been helping, uncovering a couple
of fun bugs in Textual; plus the act of building this has let me try out a
few of the newer features we've recently added to the framework.&lt;/p&gt;
&lt;p&gt;What's &lt;em&gt;really&lt;/em&gt; important though is this is a tool I actually &lt;strong&gt;wanted&lt;/strong&gt;,
and I'm using pretty often. I've written a &lt;em&gt;lot&lt;/em&gt; of Textual-based
applications over the past year, most small examples, &lt;a href="https://github.com/Textualize/frogmouth"&gt;some quite a bit
bigger&lt;/a&gt;, but none of them really
form part of my daily workflow. This changes with Tinboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinboard in action" src="/attachments/2023/12/19/tinboard.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard is designed as a fully-featured client, allowing for the creation
of new Bookmarks, complete with tag suggestion support:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adding a new bookmark" src="/attachments/2023/12/19/new-bookmark.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Not only are tag suggestions pulled from Pinboard, but entry of tags can
auto-complete, taking completions from both the suggested tags and also tags
used amongst your own bookmarks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Auto-complete of tags" src="/attachments/2023/12/19/tag-suggest.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;That feature was really easy to add thanks to &lt;a href="https://textual.textualize.io/api/suggester/"&gt;the &lt;code&gt;Suggester&lt;/code&gt;
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to the
&lt;a href="https://textual.textualize.io/blog/2023/09/21/textual-0380-adds-a-syntax-aware-textarea/"&gt;recently-added&lt;/a&gt;
&lt;code&gt;TextArea&lt;/code&gt; widget the add/edit dialog allows for proper full editing of the
extended text description of the bookmark too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editing a bookmark" src="/attachments/2023/12/19/edit.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;One caveat here is a lack of word-wrapping; but this will be arriving in an
update to Textual early in the new year.&lt;/p&gt;
&lt;p&gt;As well as all the usual add/edit/delete facilities, Tinboard is also
designed to make it pretty easy to find bookmarks too. There are filtering
options for seeing all read/unread, public/private and tagged/untagged
bookmarks; this makes bookmark management really easy for me because I can
filter for all the untagged and private bookmarks, which are likely the ones
that need editing and expanding on, and tidy up my bookmark library.&lt;/p&gt;
&lt;p&gt;There is also, of course, full text search too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Text search entry" src="/attachments/2023/12/19/search-entry.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;When a filter or search is in operation, the related tags and the like react
too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="A search result being shown" src="/attachments/2023/12/19/search-result.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Another thing I've made a point of doing in Tinboard is leaning pretty hard
on the &lt;a href="https://textual.textualize.io/guide/command_palette/"&gt;Command
Palette&lt;/a&gt;. No
functionality is &lt;em&gt;only&lt;/em&gt; available by it (I've done my best to make sure that
keyboard is the primary input device here, with keyboard shortcuts for as
much as possible). Initially I approached this as a "for the sake of
completeness" feature, but already I'm finding that it's a pretty quick
method of pulling up a tag filter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in action" src="/attachments/2023/12/19/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;To help make all the features as discoverable possible, I've also ensured
there's a pretty comprehensive help screen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Help" src="/attachments/2023/12/19/help.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Anyway; that's v0.1.0 out in the wild. I'm pleased with how it's turned out
and there's a few more things I'd like to add. It's licensed GPL-3.0 and
available &lt;a href="https://github.com/davep/tinboard"&gt;via GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/tinboard/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that
has &lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this is useful to someone else. :-)&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Evolve Words</title><link href="https://blog.davep.org/2023/10/31/evolve-words.html" rel="alternate"></link><published>2023-10-31T21:39:00+01:00</published><updated>2023-10-31T21:39:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-10-31:/2023/10/31/evolve-words.html</id><content type="html">&lt;p&gt;This follows on from my &lt;a href="/2023/10/26/visual-selection.html"&gt;previous post&lt;/a&gt;.
If you've not read that, it's worth having a dive in first for the
background.&lt;/p&gt;
&lt;p&gt;The Ruby code I mention, that was written back in 2008, was actually a pair
of scripts. The first one, called &lt;code&gt;selection&lt;/code&gt;, did what &lt;code&gt;visual-selection&lt;/code&gt;
does, only &lt;code&gt;visual-selection&lt;/code&gt; does it with a nice TUI interface: it takes a
random collection of letters and symbols and evolves them into a target
phrase.&lt;/p&gt;
&lt;p&gt;As covered before: I don't remember all of the details of the conversation
that was going on at the time, but I do seem to remember something along the
lines of &lt;em&gt;"yes, but you start out and end up with something the same
length"&lt;/em&gt; and &lt;em&gt;"nothing more complex is made"&lt;/em&gt; (let's gloss over the whole
"complex" thing for now... well okay let's just gloss over it, end of story;
this is just a fun coding exercise).&lt;/p&gt;
&lt;p&gt;What I do remember is that the seed of an idea was planted. Fine: how about
I start off with one small word, and using a list of English words as the
"fitness landscape" that the mutations had to survive in, mutate a
population over and over and see what happens. Would I "randomly" create
known words, with fewer letters, with the same letters, with more letters?&lt;/p&gt;
&lt;p&gt;So this version of the code randomly did three forms of mutation: it would
randomly flip a letter, or randomly delete a letter, or randomly insert a
random letter. It would do this over and over and eliminate words that
aren't in the original list (the simple form of selecting for survival
within the landscape).&lt;/p&gt;
&lt;p&gt;Like I said last time: never going to convince anyone of anything, but fun
to write some code.&lt;/p&gt;
&lt;p&gt;This version became &lt;code&gt;selection2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, having turned &lt;code&gt;selection&lt;/code&gt; into a TUI application with Textual, I &lt;em&gt;had&lt;/em&gt;
to do the same with this code...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Evolve Words" src="/attachments/2023/10/31/evolve-words.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;As before, because it's fun to do so, this leans heavily on the &lt;a href="https://textual.textualize.io/guide/workers/"&gt;worker
API&lt;/a&gt; and
&lt;a href="https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/"&gt;&lt;code&gt;textual-plotext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to check out the app itself there's &lt;a href="https://github.com/davep/evolve-words"&gt;a GitHub
repo&lt;/a&gt; and it can also be
installed &lt;a href="https://pypi.org/project/evolve-words/"&gt;from PyPi&lt;/a&gt; using
&lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="evolution"></category><category term="biology"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Visual Selection</title><link href="https://blog.davep.org/2023/10/26/visual-selection.html" rel="alternate"></link><published>2023-10-26T18:50:00+01:00</published><updated>2023-10-26T18:50:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-10-26:/2023/10/26/visual-selection.html</id><content type="html">&lt;p&gt;Over the last few weeks I've had a couple of sessions of working on a
library to wrap &lt;a href="https://pypi.org/project/plotext/"&gt;Plotext&lt;/a&gt; -- a popular
terminal-based plotting library for Python -- so that it can easily be used
in Textual apps;
&lt;a href="https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/"&gt;&lt;code&gt;textual-plotext&lt;/code&gt;&lt;/a&gt;
is the result.&lt;/p&gt;
&lt;p&gt;I feel it's come together pretty well&lt;/p&gt;
&lt;p&gt;But... I've been itching to find a reason to use it in a project of my own.&lt;/p&gt;
&lt;p&gt;Meanwhile...&lt;/p&gt;
&lt;p&gt;Back in the mid-2000s, when &lt;a href="https://en.wikipedia.org/wiki/PhpBB"&gt;phpBB&lt;/a&gt;
systems were still the fashion, I used to hang out on a site that was
chiefly aimed at the atheist and secular humanist crowd. We'd get a good
number of drive-by
&lt;a href="https://en.wikipedia.org/wiki/Young_Earth_creationism"&gt;YEC&lt;/a&gt; types who'd
want to argue (sorry... debate) and often talk nonsense about biology and
the like.&lt;/p&gt;
&lt;p&gt;Now, I'm no biologist, I'm no scientist, I'm just a hacker who likes to
write code for fun and profit; so any time there was a chance to write some
code to help illustrate an idea I'd jump at the chance. I forget the detail
now -- this was back in 2008; 15 years ago as of the time of writing -- but
one time I remember a conversation was taking place where someone was just
flat out claiming that "random mutation" can only cause "loss of
information" and could never lead to a "desired result", or some such thing.&lt;/p&gt;
&lt;p&gt;If you've ever had, read or watched those debates, you'll know the sort of
thing I mean.&lt;/p&gt;
&lt;p&gt;So that got me thinking back then, could I write something that could give a
simple illustration of how this doesn't quite make sense?&lt;/p&gt;
&lt;p&gt;So I had a little hacking session and came up with some Ruby code&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; that
did what I felt was the job. You'd give it a phrase you wanted it to
generate (a stand-in for the current "fitness landscape", in effect), it
would then generate a totally random string of that length, and then would
set about mutating it, finding mutations that were "fitter" than others (a
stand in for selection), breed the best two so far (randomly copy one chunk
from another to create a child), then repeat over and over.&lt;/p&gt;
&lt;p&gt;When I first wrote it I wasn't sure what to expect; would it ever finish
given a reasonably large target string?&lt;/p&gt;
&lt;p&gt;It did.&lt;/p&gt;
&lt;p&gt;It was fun to code.&lt;/p&gt;
&lt;p&gt;It got posted to the BB and of course wasn't in any way persuasive to them
(honestly I never expected it would be). I seem to recall it being
hand-waved away with calls of there obviously being an intelligent designer
involved&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, the "meanwhile..." in this: a few times this year I've thought it
could be fun to rework this in Python (it's really not that complex after
all; just a string-chopping loop really) and use Textual to put a fun UI on
it.&lt;/p&gt;
&lt;p&gt;So, that's what I did, complete with &lt;code&gt;textual-plotext&lt;/code&gt; plot:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Visual Selection in action" src="/attachments/2023/10/26/visual-selection.png"&gt;&lt;/p&gt;
&lt;p&gt;While, 15 years on, this isn't going to convince anyone of the underlying
point, I think it does serve a good educational purpose. It shows that you
can create a fun UI for the terminal, with Textual, with not a lot of code.
It also shows off how you can easily create dynamic plots. Plus -- and I
think this might be the really important one -- it shows you can write
"traditional" tight-loop code in a Textual application and &lt;em&gt;still&lt;/em&gt; have a
responsive UI; all thanks to the &lt;a href="https://textual.textualize.io/guide/workers/"&gt;worker
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The heart of the code for this application is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is the target string we want to create!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shit_happens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, there's some detail in the &lt;code&gt;Environment&lt;/code&gt; class, but you get the idea:
while we've not hit the target, let &lt;a href="https://www.youtube.com/watch?v=kiVVzxoPTtg"&gt;life find a
way&lt;/a&gt;. A loop like that would
totally bog down an application with a UI without some other work taking
place. With Textual and workers the resulting method in the application,
complete with code to send updates to the UI, really doesn't look much
different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_cancelled&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shit_happens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I honestly think the worker API is one of the coolest things added to
Textual and I so often see people have real &lt;em&gt;"woah!"&lt;/em&gt; moments when they get
to grips with it.&lt;/p&gt;
&lt;p&gt;Anyway... I've covered science, religion, and how Ruby is better than
Python, so I'm sure I've annoyed almost everyone. Job done I guess. ;-)&lt;/p&gt;
&lt;p&gt;If you want to check out the app itself there's &lt;a href="https://github.com/davep/visual-selection"&gt;a GitHub
repo&lt;/a&gt; and it can also be
installed &lt;a href="https://pypi.org/project/visual-selection/"&gt;from PyPi&lt;/a&gt; using
&lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Expect it to be my tinker project of choice for a wee while; there's a
couple of other things I'd like to add to it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Possibly unpopular opinion with some folk who will read this, but I've
long been a fan of Ruby as a language and actually generally prefer it
to Python.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Me, the coder. While utterly missing the point of a simple
illustration, while apparently not understanding the concept of an
analogy, I guess at least they felt I was intelligent?&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="evolution"></category><category term="biology"></category><category term="terminal"></category><category term="textual"></category></entry></feed>