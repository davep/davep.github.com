<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.davep.org - Python</title><link href="https://blog.davep.org/" rel="alternate"></link><link href="https://blog.davep.org/feeds/python.atom.xml" rel="self"></link><id>https://blog.davep.org/</id><updated>2022-12-16T09:30:00+00:00</updated><entry><title>OIDIA</title><link href="https://blog.davep.org/2022/12/16/oidia.html" rel="alternate"></link><published>2022-12-16T09:30:00+00:00</published><updated>2022-12-16T09:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2022-12-16:/2022/12/16/oidia.html</id><content type="html">&lt;p&gt;Another little thing that's up on PyPi now, which is the final bit of
fallout from &lt;a href="/2022/12/01/new-things-on-pypi.html"&gt;the Textual dogfooding
sessions&lt;/a&gt;, is a little project I'm
calling OIDIA.&lt;/p&gt;
&lt;p&gt;The application is a streak tracker. I'm quite the fan of streak trackers.
I've used a few over the years, both to help keep me motivated and honest,
and also to help me track that I've avoided unhelpful things too. Now, most
of the apps I've used, and use now, tend to have reminders and counts and
stats and are all about "DO NOT BREAK THE STREAK OR ELSE" and that's mostly
fine, but...&lt;/p&gt;
&lt;p&gt;To keep things simple and to purely concentrate on how to build Textual
apps, I made this a "non-judgement" streak tracker. It's designed to be
really simple: you add a streak, you bump up/down the number of times you
did (or didn't do) the thing related to that streak, for each day, and
that's it.&lt;/p&gt;
&lt;p&gt;No totals. No stats. No reminders and bugging. No judgement.&lt;/p&gt;
&lt;p&gt;Here it is in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
    &lt;iframe
        width="560" height="315"
        src="https://www.youtube.com/embed/3Kz8eUzO9-8"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;When I started it, I wasn't quite sure how I wanted to store the data.
Throwing it in a SQLite database held some appeal, but that also felt like a
lot of faff for something so simple. Also, I wanted to make the data as easy
to get at, to use elsewhere, and to hack on, as possible. So in the end I
went with a simple JSON file.&lt;/p&gt;
&lt;p&gt;On macOS and GNU/Linux &lt;code&gt;streaks.json&lt;/code&gt; lives in &lt;code&gt;~/.local/share/oidia&lt;/code&gt;, on
Windows it'll be in... I'm not sure off the top of my head actually; it'll
be in whatever directory &lt;a href="https://pypi.org/project/xdg/"&gt;the handy &lt;code&gt;xdg&lt;/code&gt;
library&lt;/a&gt; has chosen. and because it's JSON
that means that something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OIDIA in action" src="/attachments/2022/12/16/oidia.png"&gt;&lt;/p&gt;
&lt;p&gt;ends up looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hack some Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Brush my teeth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Walk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run 5k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run 10k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, it remains to be seen how well that actually scales; possibly not
so well over a long period of time, but this was written more as another way
to explore Textual than anything else. Even then, it would be pretty trivial
to update to something better for holding the data.&lt;/p&gt;
&lt;p&gt;If this seems like your thing (and I will be supporting it and onward
developing it) you &lt;a href="https://pypi.org/project/oidia/"&gt;can find it over on
PyPi&lt;/a&gt;, which means it can be installed with
&lt;code&gt;pip&lt;/code&gt; or the ever-handy &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category><category term="programming"></category></entry><entry><title>New Things On PyPi</title><link href="https://blog.davep.org/2022/12/01/new-things-on-pypi.html" rel="alternate"></link><published>2022-12-01T22:13:00+00:00</published><updated>2022-12-01T22:13:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2022-12-01:/2022/12/01/new-things-on-pypi.html</id><content type="html">&lt;h1&gt;An update&lt;/h1&gt;
&lt;p&gt;So, it's fast approaching 2 months now &lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;since I started the new
thing&lt;/a&gt; and it's been a busy
time. I've had to adjust to a quite a few new things, not least of which has
been a longer and more involved commute. I'm actually mostly enjoying it
too. While having to contend with busses isn't the &lt;em&gt;best&lt;/em&gt; thing to be doing
with my day, I do have a very fond spot for Edinburgh and it's nice to be in
there most days of the week.&lt;/p&gt;
&lt;p&gt;Part of the fallout from the new job has been that, in the last couple of
weeks, I've thrown some more stuff up on PyPi. This comes about as part of a
bit of a dog-fooding campaign we're on at the moment (you can read some
background to this &lt;a href="https://textual.textualize.io/blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/"&gt;over on the company
blog&lt;/a&gt;).
While they have been, and will continue to be, mentioned on the Textualize
blog, I thought I'd give a brief mention of them here on my own blog too
given they are, essentially, personal projects.&lt;/p&gt;
&lt;h1&gt;gridinfo&lt;/h1&gt;
&lt;p&gt;This is one I'd like to tweak some more and improve on if possible. It is,
in essence, a Python-coded terminal tool that does more or less the same as
&lt;a href="https://github.com/davep/slstats.el"&gt;&lt;code&gt;slstats.el&lt;/code&gt;&lt;/a&gt;. It started out as &lt;a href="https://twitter.com/davepdotorg/status/1590476280457490434"&gt;a
rather silly quick
hack&lt;/a&gt;, designed
to do something different with
&lt;a href="https://github.com/darrenburns/rich-pixels"&gt;&lt;code&gt;rich-pixels&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the finished version (as of the time of writing) being put through
its paces:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/dzpGgVPD2aM" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Download &lt;a href="https://pypi.org/project/gridinfo/"&gt;from here&lt;/a&gt;, or install and
play with it with a quick &lt;code&gt;pipx install gridinfo&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;unbored&lt;/h1&gt;
&lt;p&gt;The next experiment with Textual was to write a terminal-based client for
the &lt;a href="https://www.boredapi.com/"&gt;Bored-API&lt;/a&gt;. My initial plan for this was to
just have a button or two that the user could mash on and they'd get an
activity suggestion dropped into the middle of the terminal; but really that
seemed a bit boring. Then I realised that it'd be a bit more silly and a bit
more fun if I did it as a sort of TODO app. Bored? Run it up and use one of
the activities you'd generated before. Don't like any of them? Ignore them
and generate some more! Feeling bad that you've got such a backlog of
reasons to not be bored? Delete a bunch!&lt;/p&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;p&gt;Here's a short video of it in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/Zl3dIzYfIWI" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Download &lt;a href="https://pypi.org/project/unbored/"&gt;from here&lt;/a&gt;, or install and play
with it with a quick &lt;code&gt;pipx install unbored&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;textual-qrcode&lt;/h1&gt;
&lt;p&gt;This one... this one I'm going to blame on the brain fog that followed flu
&lt;em&gt;and&lt;/em&gt; Covid jabs that happened the day before (and which are still kicking
my arse 4 days later). Monday morning, at my desk, and I'm wondering what to
next write to experiment with Textual, and I realised it would be
interesting to write something that would show off that it's easy to make a
third party widget library.&lt;/p&gt;
&lt;p&gt;And... yeah, I don't know why, but I remembered
&lt;a href="https://github.com/davep/qrencode.el"&gt;&lt;code&gt;qrencode.el&lt;/code&gt;&lt;/a&gt; and so
&lt;code&gt;textual-qrcode&lt;/code&gt; was born!&lt;/p&gt;
&lt;p&gt;&lt;img alt="The most useless Textal widget yet" src="/attachments/2022/12/01/textual-qrcode.png"&gt;&lt;/p&gt;
&lt;p&gt;I think the most amusing part about this is that I did it in full knowledge
that it would be useless; the idea being it would be a daft way of showing
off how you could build a widget library as an add-on for Textual. But...
more than one person actually ended up saying "yeah hold up there this could
actually be handy!"&lt;/p&gt;
&lt;p&gt;If you're one of those people... &lt;a href="https://pypi.org/project/textual-qrcode/"&gt;you'll find it
here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;FivePyFive&lt;/h1&gt;
&lt;p&gt;While I was on a roll putting stuff up on PyPi, I also decided to tweak up
my Textual-based 5x5 and throw that up too. This was &lt;a href="https://twitter.com/davepdotorg/status/1554207518615814148"&gt;my first app built
with Textual&lt;/a&gt;,
initially written before I'd even spoken to Will about the position here. At
one point I even did &lt;a href="https://github.com/davep/textual/blob/c4f60548922609133763c0e49f7b23aea5d44c2b/sandbox/davep/five_by_five.hy"&gt;a version in
Lisp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's since gone on to become &lt;a href="https://github.com/Textualize/textual/tree/d2ba22b86f48f4ce5b0f55767efdcf1a5478b180/examples"&gt;one of the example apps in Textual
itself&lt;/a&gt;
but I felt it deserved being made available to the world via an easy(ish)
install. So, if you fancy trying to crack the puzzle in your terminal, just
do a quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;fivepyfive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and click away.&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="343" height="610"
src="https://www.youtube.com/embed/Rf34Z5r7Q60" title="FivePyFive -- A
little annoying puzzle for the terminal" frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;You can find it &lt;a href="https://pypi.org/project/fivepyfive/"&gt;over here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;PISpy&lt;/h1&gt;
&lt;p&gt;Finally... for this week anyway, is a tool I've called PISpy. It's designed
as a simple terminal client for looking up package information on PyPi. As
of right now it's pretty straightforward, but I'd like to add more to it
over time. Here's an example of it in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/yMGD6bXqIEo" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;One small wrinkle with publishing it to PyPi was the fact that, once I'd
chosen the name, I checked that it hadn't been used on PyPi (it hadn't) but
when it came to publishing the package it got rejected because the name was
too similar to another package! I don't know which, it wouldn't say, but
that was a problem. So in the end the published name ended up having to be
slightly different from the actual tool's name.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://pypi.org/project/pispy-client/"&gt;over here&lt;/a&gt; for the package, and
you can install it with a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pispy-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then just run &lt;code&gt;pispy&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It's been a fun couple of weeks coming up with stuff to help exercise
Textual, and there's more to come. Personally I've found the process really
helpful in that it's help me learn more about the framework and also figure
out my own approach to working with it. Each thing I've built so far has
been a small step in evolution on from what I did in the previous thing. I
doubt I've arrived at a plateau of understanding just yet.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="programming"></category></entry><entry><title>Python and macOS</title><link href="https://blog.davep.org/2022/11/05/python-and-macos.html" rel="alternate"></link><published>2022-11-05T08:49:00+00:00</published><updated>2022-11-05T08:49:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2022-11-05:/2022/11/05/python-and-macos.html</id><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On Twitter, a few weeks back, &lt;a href="https://twitter.com/itsBexli/status/1577332548933500928"&gt;@itsBexli asked me how I go about setting up
Python for development on
macOS&lt;/a&gt;. It's a
great question and one that seems to crop up in various places, and since &lt;a href="/2015/06/27/my-first-couple-of-weeks-with-an-imac.html"&gt;I
first got into using
macOS&lt;/a&gt; and then
&lt;a href="/2017/12/12/on_to_something_new.html"&gt;subsequently got back into coding lots in
Python&lt;/a&gt; it's absolutely an issue I ran
into.&lt;/p&gt;
&lt;p&gt;With my previous employer, while I was the only developer, I wasn't the only
person writing code and more than one other person had this issue so I
eventually wrote up my approach to solving this problem. That document is on
their internal GitLab, but I thought it worth me writing my personal
macOS/Python "rules" up again, just in case they're useful to anyone else.&lt;/p&gt;
&lt;p&gt;I am, of course, not the first person to tackle this, to document this, to
write down a good approach to this. Before and after I settled on my
approach I'd seen other people write about this. So... this post isn't here
to try and replace those, it's simply to write down my own approach, so if
anyone asks again I can point them here. I feel it's important to stress:
this isn't the only way or thoughts on this issue, there are lots of others.
Do go read them too and then settle on an approach that works for you.&lt;/p&gt;
&lt;p&gt;One other point to note, which may or may not make a difference (and may or
may not affect how this changes with time): for the past few years I've been
a heavy user of &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt; to manage my
virtual environments. This is very likely to change from now on, but keep in
mind that what follows was arrived at from the perspective of a &lt;code&gt;pipenv&lt;/code&gt;
user.&lt;/p&gt;
&lt;p&gt;So... with that admin aside...&lt;/p&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;When I first got back into writing Python it was on macOS and, really early
on, I ran into all the usual issues: virtual environments breaking because
they were based on the system Python and it got updated, virtual
environments based on the Homebrew-installed Python and it got updated,
etc... Simply put, an occasional, annoying, non-show-stopping breaking of my
development environment which would distract me when I'd sat down to just
hack on some code, not do system admin!&lt;/p&gt;
&lt;h1&gt;My Solution&lt;/h1&gt;
&lt;p&gt;For me, what's worked for me without a problem over the past few years, in
short, is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use the system version of Python. Just don't.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use the Homebrew's own version of Python (I'm not even sure
   this is an issue any more; but it used to be).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use a version of Python installed with Homebrew (or, more to
   the point, never install Python with Homebrew).&lt;/li&gt;
&lt;li&gt;Manage everything with &lt;a href="https://github.com/pyenv/"&gt;&lt;code&gt;pyenv&lt;/code&gt;&lt;/a&gt;; which I do
   install from Homebrew.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The Detail&lt;/h1&gt;
&lt;p&gt;As mentioned earlier, what I'm writing here assumes that virtual
environments are being managed with &lt;code&gt;pipenv&lt;/code&gt; (something I still do for
personal projects, for now, but this may change soon). Your choices and
mileage may vary, etc... This is what works well for me.&lt;/p&gt;
&lt;h2&gt;The "one time" items&lt;/h2&gt;
&lt;p&gt;These are the items that need initially installing into a new macOS machine:&lt;/p&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;Unless it comes from the Mac App Store, I try and install everything via
&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;. It's really handy for keeping track of what
I've got installed, for recreating a development environment in general, and
for keeping things up to date.&lt;/p&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;With Homebrew installed the next step for me is to install &lt;code&gt;pyenv&lt;/code&gt;. Doing so
is as easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once installed, if it's not done it for you, you may need to make some
changes to your login profile. I'm a user of &lt;a href="https://fishshell.com"&gt;fish&lt;/a&gt;
so I have &lt;a href="https://github.com/davep/fish/blob/efc77fd20c4bd2f36eb628730787924b6a56fcfd/conf.d/python.fish#L21-L25"&gt;these lines in my
setup&lt;/a&gt;.
Simply put: it asks pyenv to set up my environment so my calls to Python go
via its setup.&lt;/p&gt;
&lt;p&gt;Plenty of help on how to set up &lt;code&gt;pyenv&lt;/code&gt; can be found &lt;a href="https://github.com/pyenv/pyenv#installation"&gt;in its
README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I've done this I tend to go on and install the Python versions I'm
likely to need. For me this tends to be the most recent "active" stable
versions (as of the time of writing, 3.7 through 3.10; although I need to
now start throwing 3.11 into the mix too).&lt;/p&gt;
&lt;p&gt;I use this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to see the available versions. If I want to see what's available for a
specific version I'll pipe through grep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fgrep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  3.9&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is handy if I want to check what the very latest release of a specific
version of Python is.&lt;/p&gt;
&lt;h3&gt;The "Global" Python&lt;/h3&gt;
&lt;p&gt;When I'm done with the above I then tend to use &lt;code&gt;pyenv&lt;/code&gt; to set my "global"
Python. This is the version I want to get when I run &lt;code&gt;python&lt;/code&gt; and I'm not
inside a virtual environment. Doing that is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you'd swap the version for whatever works for you.&lt;/p&gt;
&lt;h3&gt;When Stuff Breaks&lt;/h3&gt;
&lt;p&gt;It seems more rare these days, but on occasion I've had it such that some
update somewhere still causes my environment to break. Now though I find
that all it takes is a quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;rehash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and everything is good again.&lt;/p&gt;
&lt;h2&gt;Setting Up A Repo&lt;/h2&gt;
&lt;p&gt;With all of the stuff above being mostly a one-off (or at least something I
do once when I set up a new machine -- which isn't often), the real "work"
here is when I set up a fresh repository when I start a new project. Really
it's no work at all. Again, as I've said before, I've tended to use &lt;code&gt;pipenv&lt;/code&gt;
for my own work, and still do for personal stuff (but do want to change
that), mileage may vary here depending on tool.&lt;/p&gt;
&lt;p&gt;When I start a new project I think about which Python version I want to be
working with, I ensure I have the latest version of it installed with
&lt;code&gt;pyenv&lt;/code&gt;, and then ask &lt;code&gt;pipenv&lt;/code&gt; to create a new virtual environment with
that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you do this, you should see &lt;code&gt;pipenv&lt;/code&gt; pulling the version of Python from
the &lt;code&gt;pyenv&lt;/code&gt; directories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
Creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;project...
Pipfile:&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/temp/cool-project/Pipfile
Using&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/.pyenv/versions/3.10.7/bin/python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;virtualenv...
⠙&lt;span class="w"&gt; &lt;/span&gt;Creating&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment...created&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;CPython3.10.7.final.0-64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;795ms
&lt;span class="w"&gt;  &lt;/span&gt;creator&lt;span class="w"&gt; &lt;/span&gt;CPython3Posix&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/davep/temp/cool-project/.venv,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;no_vcs_ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;global&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;seeder&lt;span class="w"&gt; &lt;/span&gt;FromAppData&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wheel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;via&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;copy,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;app_data_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/davep/Library/Application&lt;span class="w"&gt; &lt;/span&gt;Support/virtualenv&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;added&lt;span class="w"&gt; &lt;/span&gt;seed&lt;span class="w"&gt; &lt;/span&gt;packages:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;.2.2,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;.3.0,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wheel&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.37.1
&lt;span class="w"&gt;  &lt;/span&gt;activators&lt;span class="w"&gt; &lt;/span&gt;BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
✔&lt;span class="w"&gt; &lt;/span&gt;Successfully&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment!
Virtualenv&lt;span class="w"&gt; &lt;/span&gt;location:&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/temp/cool-project/.venv
Creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;project...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key thing here is seeing that &lt;code&gt;pipenv&lt;/code&gt; is pulling Python from
&lt;code&gt;~/.pyenv/versions/&lt;/code&gt;. If it isn't there's a good chance you have a Python
earlier in your &lt;code&gt;PATH&lt;/code&gt; than the &lt;code&gt;pyenv&lt;/code&gt; one -- something you generally don't
want. It will work, but it's more likely to break at some point in the
future. That's the key thing I look for; if I see that I know things are
going to be okay.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Since I adopted these personal rules and approaches (and really, calling
them "rules" is kind of grand -- there's almost nothing to this) I've found
I've had near-zero issues with the stability of my Python virtual
environments (and what issues I have run into tend to be trivial and of my
own doing).&lt;/p&gt;
&lt;p&gt;As I said at the start: there are, of course, other approaches to this, but
this is mine and works well for me. Do feel free to comment with your own,
I'm always happy to learn about new ways!&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="macOS"></category><category term="programming"></category></entry><entry><title>The PEP 8 hill I will die on</title><link href="https://blog.davep.org/2020/08/23/the-pep-8-hill-i-will-die-on.html" rel="alternate"></link><published>2020-08-23T16:54:00+01:00</published><updated>2020-08-23T16:54:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2020-08-23:/2020/08/23/the-pep-8-hill-i-will-die-on.html</id><content type="html">&lt;p&gt;I first learnt Python back in the mid-to-late 90s, used it in place of Perl
once I was comfortable with it, and then we sort of drifted apart when I
first met Ruby. It's only in the last couple of years that I've got back
into it, and in a huge way, thanks to &lt;a href="/2017/12/12/on_to_something_new.html"&gt;my (not-quite-so-) new
job&lt;/a&gt;. Despite
the quirks and oddness (as I perceive them), I actually quite like Python
and it's one of those languages that just flows off my fingers. I'm sure you
know the same thing, perhaps not with Python, but there will be languages
that just flow for you, and those that take a bit more effort and
concentration. Python... feels okay to me.&lt;/p&gt;
&lt;p&gt;I also appreciate that there's been a long-standing style guide. I quite
like &lt;a href="python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; as a read, and think there's a
lot of good ideas in there; much of the content sits with how I'd approach
things if I was tasked to come up with such a document. With this in mind,
I'm a fairly heavy user of &lt;code&gt;pylint&lt;/code&gt; and it in turn leans on PEP 8 (amongst
other things) and I'm happy to accept most of its judgements. Not all of its
judgements, &lt;a href="/2019/11/04/my-pylint-shame.html"&gt;but even when I disagree with it I try and keep track of how
far I'm
drifting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But there is absolutely one hill I will happily die on when it comes to PEP
8: the concept of &lt;a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements"&gt;"extraneous whitespace" in lists and
expressions&lt;/a&gt;.
Just.... no! Oh gods no!&lt;/p&gt;
&lt;p&gt;To borrow a line of code from &lt;a href="/2019/11/10/going-on-a-journey.html"&gt;the journey problem I dabbled with a while
back&lt;/a&gt;,
PEP 8 would have me write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I'm sure plenty of people won't see a problem with this at all; but all
I can see is an almost-claustrophobic parameter list. What's with the
parameters being jammed up against the opening and closing parens? Why have
the dinky little comma lost between two different things? Why have it look
like a long stream of letters and punctuation? Why....&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;Just no.&lt;/p&gt;
&lt;p&gt;I can't.&lt;/p&gt;
&lt;p&gt;Rightly or wrongly, I just need for the code to breathe a bit. When I type
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;suddenly if feels like there's fresh air in the code, like it flows gently
out of my head, off my fingers, through the keyboard and into the buffer.&lt;/p&gt;
&lt;p&gt;In my head, and to my eyes, the code is.... relaxed.&lt;/p&gt;
&lt;p&gt;Do I have a rational reason for this? Nope. Then again I don't see one for
doing it the other way either; I can't think of one and I don't see one in
the source document. So, that's a warning I always turn off with &lt;code&gt;pylint&lt;/code&gt;
and it's a style I carry through all my Python code; and I think that's the
important point here: anyone reading and working with my code should see the
same style all the way through. It might differ from PEP 8 on this point,
but at least it's the same all the way.&lt;/p&gt;
&lt;p&gt;And, really, that's okay: &lt;a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds"&gt;PEP 8 is there to be
ignored&lt;/a&gt;.
;-)&lt;/p&gt;
&lt;p&gt;PS: This is a small part of another blog post I was meaning to write, and
might still do, about my (still ongoing) experience of getting
&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;&lt;code&gt;lsp-mode&lt;/code&gt;&lt;/a&gt; up and running in Emacs
and having it play nice with Python projects. I have that working, but it
was a bit of a learning curve and epic battle over a couple of days, and one
that had me first encounter
&lt;a href="https://pypi.org/project/pycodestyle/"&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt;. I may still tell the
tale...&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>git2gantt -- Simple tool to visualise coding runs</title><link href="https://blog.davep.org/2019/12/08/git2gantt.html" rel="alternate"></link><published>2019-12-08T13:44:00+00:00</published><updated>2019-12-08T13:44:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2019-12-08:/2019/12/08/git2gantt.html</id><content type="html">&lt;p&gt;At the start of this year, as part of a much bigger process to review the
work that had taken place over the previous 12 months, I was asked (at work)
to provide some information about how much time I'd spent on various
projects. Now, for me, there's really only one project, but there's lots of
different tools and libraries that I've written to support the main work I
do. All of these are split into different repositories in the
company-internal instance of &lt;a href="https://about.gitlab.com/"&gt;GitLab&lt;/a&gt;. This meant
that getting a rough idea of what I was working on and when would be easy
enough -- it's all there in the commit history.&lt;/p&gt;
&lt;p&gt;Given that this information would make up a couple of slides at most during
a far bigger presentation, I wanted something that would be snappy and easy
for non-developers to follow and understand. I spent a bit of time pondering
some options and decided that (ab)using a &lt;a href="https://en.wikipedia.org/wiki/Gantt_chart"&gt;gantt
chart&lt;/a&gt; layout would make sense.&lt;/p&gt;
&lt;p&gt;That choice was made all the more easier given that &lt;a href="https://docs.gitlab.com/ee/user/markdown.html#mermaid"&gt;GitLab
supports&lt;/a&gt; the use of
&lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;mermaid charts&lt;/a&gt; within its
Markdown. This meant I could quickly write some code that took the git log
of each repository, turned it into mermaid code, and then render it (by
hand, this was all about getting things done quickly) via GitLab.&lt;/p&gt;
&lt;p&gt;This sounded like it could be a fun personal project. The result was some
Python code called &lt;a href="https://github.com/davep/git2gantt"&gt;git2gantt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned above, the output isn't anything too clever, it's just code
that can be used to create a plot via mermaid. For example, running
git2gannt over itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gantt
  title git2gantt output
  dateFormat YYYY-MM-DD

  section git2gantt
  Development: devgit2gantt20190208, 2019-02-08, 2019-02-13
  Development: devgit2gantt20190214, 2019-02-14, 2019-02-15
  Development: devgit2gantt20190303, 2019-03-03, 2019-03-04
  Development: devgit2gantt20191203, 2019-12-03, 2019-12-04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Usage is pretty straightforward: &lt;img alt="Screenshot 2019-12-08 at
13.18.12.png" src="/attachments/2019/12/08/Screenshot 2019-12-08 at 13.18.12.png"&gt;
As you can see, it can be run over multiple repos at once, and there's also
an option to have it consider every branch within each repository. Another
handy option is the ability to limit the output to just one author --
perhaps you just want to document what you've done on a repo, not the
contributions of other people.&lt;/p&gt;
&lt;p&gt;Also especially handy, if you don't want to bore people with too much
detail, is the "fuzz" option. This lets you tell &lt;code&gt;git2gannt&lt;/code&gt; how relaxed you
want it to be when it tries to decide how long a run of work on a repo
lasted. So, perhaps, you're working on and off on a library that supports
some other system you're documenting, but you might only be making changes
every other day or so. With the correct fuzz value you can make it clear you
were working &lt;em&gt;on&lt;/em&gt; the library for a couple of weeks, despite there only
being a commit every other day.&lt;/p&gt;
&lt;p&gt;An example of running the output over a handful of projects would look
something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2019-12-08 at 13.34.41.png" src="/attachments/2019/12/08/Screenshot 2019-12-08 at 13.34.41.png"&gt;&lt;/p&gt;
&lt;p&gt;This is one of those tools I knocked up quickly to get a job done, and
haven't quite got round to finishing off fully. One thing I'd really like to
do is add mermaid support directly within it, so that it actually has the
option to emit plots, not just mermaid code (or, perhaps, drop the mermaid
approach and use something else entirely).&lt;/p&gt;
&lt;p&gt;Meanwhile though, if you're looking for something quick and dirty that will
help you visualise what you've been working on and when for a good period of
time... perhaps this will help.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="documentation"></category></entry><entry><title>Going on a journey</title><link href="https://blog.davep.org/2019/11/10/going-on-a-journey.html" rel="alternate"></link><published>2019-11-10T14:32:00+00:00</published><updated>2019-11-10T14:32:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2019-11-10:/2019/11/10/going-on-a-journey.html</id><content type="html">&lt;p&gt;It's hardly a revelation to say that learning a new programming language, or
even learning software development at all, is even more difficult if you
don't have an actual problem to solve. I know I'm not alone in having pet
projects that, when faced with a new environment, I'll code up a version of
that project as a way to get familiar with and understand a language's
idioms while implementing something I know well.&lt;/p&gt;
&lt;p&gt;Personally, my two favourites are a puzzle called 5x5
(&lt;a href="https://github.com/davep/5x5.xml"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/Chrome-5x5"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/5x5-for-Chrome"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/5x5-Palm"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/5x5.el"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/5x5-react"&gt;here&lt;/a&gt; and
&lt;a href="http://davep.org/misc/5x5/"&gt;here&lt;/a&gt;), and writing a library or even a full
application to read &lt;a href="https://en.wikipedia.org/wiki/Norton_Guides"&gt;Norton Guide database
files&lt;/a&gt;
(&lt;a href="https://github.com/davep/ng2html"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/w3ng"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/eg-OS2"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/weg1013"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/weg"&gt;here&lt;/a&gt;, &lt;a href="https://github.com/davep/eg"&gt;here&lt;/a&gt;,
&lt;a href="https://github.com/davep/eg.el"&gt;here&lt;/a&gt; and
&lt;a href="https://github.com/davep/jsNG"&gt;here&lt;/a&gt;). Both are fun to work on, have
practical uses, and both have the benefit of being solved problems (for me)
that let me concentrate on the "how do I do &lt;em&gt;X&lt;/em&gt; in this
language/toolkit/environment/framework/etc?".&lt;/p&gt;
&lt;p&gt;Even with those two as my goto projects, I'm always open to new small
problems that might be fun to apply to languages I do know, or languages I
want to get to know (internally at work &lt;a href="https://twitter.com/davepdotorg/status/1123952281156751361"&gt;we have a fun "league" of sorts,
writing a particular hamming distance calculation tool in different
languages&lt;/a&gt;, for
example).&lt;/p&gt;
&lt;p&gt;A few days ago, via &lt;a href="https://github.com/Lethrir/Journeys"&gt;this repo on
GitHub&lt;/a&gt;, I discovered &lt;a href="https://github.com/mikehadlow/Journeys"&gt;this fun little
problem&lt;/a&gt;. Right away I could see the
benefit in it. As a "go away and code up a solution" interview question it
strikes me as near-perfect. It's obviously not hard to solve, but it touches
on some basic but important aspects of software development and so will
allow the developer to show off how they approach things.&lt;/p&gt;
&lt;p&gt;There's so many different approaches to it too. Even in a single language, I
could imagine having some fun writing the smallest code to solve the
problem, the most idiomatic code to solve the problem, the most supportable
and well-documented code to solve the problem, etc. And then there's the
thing I talk about above: knowing the solution and knowing it's easy, you
can then use it to learn the idiomatic way of solving the problem in new
languages.&lt;/p&gt;
&lt;p&gt;Even better, &lt;a href="https://github.com/mikehadlow/Journeys#other-solutions"&gt;the README of the original repo links to solutions others have
written&lt;/a&gt;. Knowing
the problem, and knowing the solution, you can then go and read other
people's code and learn something about different styles and different
languages.&lt;/p&gt;
&lt;p&gt;Over the next few weeks, as I get free time, I think I might just do this.
Take the "Journeys" problem and write versions in different languages I work
with, or know, and also use it to get to know languages I've yet to know or
use heavily (I'm especially keen to try a version in
&lt;a href="https://julialang.org/"&gt;Julia&lt;/a&gt; -- a language I really like the look of and
want to find a reason to use).&lt;/p&gt;
&lt;p&gt;Meanwhile, yesterday, I had a quick go at a first version in Python (aimed
at Python 3.8 or higher):
&lt;a href="https://github.com/davep/journeys.py"&gt;https://github.com/davep/journeys.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I set out to try and write something that was fairly idiomatic Python, which
uses tools that I tend to employ when working on Python projects (pipenv,
make, etc), and which also &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;used something I've never quite found a need for
so far&lt;/a&gt; in my usual
coding, but which I can see being useful and helpful.&lt;/p&gt;
&lt;p&gt;I even threw in a couple of uses of &lt;a href="https://www.python.org/dev/peps/pep-0572/"&gt;PEP
572&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I can see me tinkering with this some more over the next few days. I can
even see me writing a very different implementation in Python, just for the
fun of it.&lt;/p&gt;
&lt;p&gt;I think that's what I like about this little problem. It's a good way to do
a bit of programming exercise; it's like the perfect way to do the
programming equivalent of going for a short run.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>My Pylint shame</title><link href="https://blog.davep.org/2019/11/04/my-pylint-shame.html" rel="alternate"></link><published>2019-11-04T20:39:00+00:00</published><updated>2019-11-04T20:39:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2019-11-04:/2019/11/04/my-pylint-shame.html</id><content type="html">&lt;p&gt;I first got into Python in the mid-to-late 1990s. It's so far back that I
think the copy of &lt;a href="https://www.python.org/doc/essays/foreword/"&gt;Programming
Python&lt;/a&gt; that I have (sadly in
storage at the moment) might be a first edition. I probably fell out of the
habit of using Python some time in the early 2000s (that was when I met
Ruby). It was only 22 months ago that I started using Python a &lt;em&gt;lot&lt;/em&gt; thanks
to &lt;a href="/2017/12/12/on_to_something_new.html"&gt;a change of
employer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you might imagine, much had changed in the 15+ years since I'd last
written a line of Python in anger. So, early on, I made a point of making
&lt;a href="https://www.pylint.org/"&gt;Pylint&lt;/a&gt; part of my development process. All my
projects have a &lt;code&gt;make lint&lt;/code&gt; make target. All of my projects lint the code
when I push to &lt;code&gt;master&lt;/code&gt; in the company GitLab instance. These days I even
use &lt;a href="https://www.flycheck.org/en/latest/"&gt;flycheck&lt;/a&gt; to keep me honest as I
write my code; mostly gone are the days where I don't know of problems until
I do a &lt;code&gt;make lint&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Leaning on Pylint in the early days of my new position made for a great
Python refresher for me. Now, I still lean on it to make sure I don't make
daft mistakes.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;Pylint and I don't always agree. And that's fine. For example, I really
can't stand Pylint's approach to whitespace, and that is a hill I'll happily
die on. Ditto the obsession with lines being no more than 80 characters wide
(120 should be fine thanks). As such any project's &lt;code&gt;.pylintrc&lt;/code&gt; has, as a
bare minimum, this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[FORMAT]&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;120&lt;/span&gt;

&lt;span class="k"&gt;[MESSAGES CONTROL]&lt;/span&gt;
&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bad-whitespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Beyond that though, aside from one or two extras that pertain to particular
projects, I'm happy with what Pylint complains about.&lt;/p&gt;
&lt;p&gt;There are exceptions though. There are times, simply due to the nature of
the code involved, that Pylint's insistence on code purity isn't going to
work. That's where I use its inline &lt;a href="https://pylint.readthedocs.io/en/latest/user_guide/message-control.html#block-disables"&gt;block disabling
feature&lt;/a&gt;.
It's handy and helps keep things clean (I won't deploy code that doesn't
pass 10/10), but there is always this nagging doubt: if I've disabled a
warning in the code, am I ever going to come back and revisit it?&lt;/p&gt;
&lt;p&gt;To help me think about coming back to such disables now and again, I thought
it might be interesting to write a tool that'll show which warnings I
disable most. It resulted in &lt;a href="https://github.com/davep/fish/blob/dd2721e0565928b4145698a42c9c74e4534c578a/conf.d/abbr.d/python.fish#L5"&gt;this fish
abbr&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;abbr&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;pylintshame&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rg --no-messages \&amp;quot;pylint:disable=\&amp;quot; | awk &amp;#39;BEGIN{FS=\&amp;quot;disable=\&amp;quot;;}{print \$2}&amp;#39; | tr \&amp;quot;,\&amp;quot; \&amp;quot;\n\&amp;quot; | sort | uniq -c | sort -hr&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea here being that it produces a "Pylint hall of shame", something
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wildcard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wildcard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;outside&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toplevel&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bare&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;except&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;callable&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;broad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;except&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrong&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrong&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unexpected&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;differ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To break the pipeline down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rg --no-messages &amp;quot;pylint:disable=&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First off, I use &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; (if you
don't, you might want to have a good look at it -- I find it amazingly
handy) to find everywhere in the code in and below the current directory
(the &lt;code&gt;--no-messages&lt;/code&gt; switch just stops any file I/O errors that might result
from permission issues -- they're not interesting here) that contains a line
that has a Pylint block disable (if you tend to format yours differently,
you'll need to tweak the regular expression, of course).&lt;/p&gt;
&lt;p&gt;I then pipe it through &lt;code&gt;awk&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;awk&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;BEGIN{FS=&amp;quot;disable=&amp;quot;;}{print $2}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so I can lazily &lt;a href="https://docs.freebsd.org/info/gawk/gawk.info.Field_Separators.html"&gt;extract everything after the
&lt;code&gt;disable=&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up, because it's a possible list of things that can be disabled, I use
&lt;code&gt;tr&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tr &amp;quot;,&amp;quot; &amp;quot;\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to turn any comma-separated list into multiple lines.&lt;/p&gt;
&lt;p&gt;Having got to this point, I &lt;code&gt;sort&lt;/code&gt; the list, &lt;code&gt;uniq&lt;/code&gt; the result, while
prepending a count (&lt;code&gt;-c&lt;/code&gt;), and then &lt;code&gt;sort&lt;/code&gt; the result again, in reverse and
sorting the numbers based on how a human would read the result (&lt;code&gt;-hr&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sort | uniq -c | sort -hr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's short, sweet and hacky, but does the job quite nicely. From now on, any
time I get curious about which disables I'm leaning on too much, I can use
this to take stock.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="fish"></category></entry><entry><title>pydscheck -- A quick hack that keeps slowly growing</title><link href="https://blog.davep.org/2019/10/26/pydscheck.html" rel="alternate"></link><published>2019-10-26T13:19:00+01:00</published><updated>2019-10-26T13:19:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2019-10-26:/2019/10/26/pydscheck.html</id><content type="html">&lt;p&gt;Something I always try to do when I'm coding is be consistent. I feel this
is important. While people's coding standards may differ, I think different
approaches are easier to handle if someone has been consistent with their
style across all of their code.&lt;/p&gt;
&lt;p&gt;This also stands for documentation too.&lt;/p&gt;
&lt;p&gt;In my current position, I do a &lt;em&gt;lot&lt;/em&gt; of Python coding, and one of the things
I like about Python (there are things I don't like too, but that's not for
now) is that it has doc-strings (just like my &lt;a href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;favourite
language&lt;/a&gt;). I use them
extensively, ensuring every function and method has some form of
documentation, and generally I use
&lt;a href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; to generate documentation
from those doc-strings.&lt;/p&gt;
&lt;p&gt;Early on I was bothered by the fact that, just by the simple act of making
typos, I wasn't keeping the form of the doc-strings consistent. And in this
case it was a &lt;em&gt;really&lt;/em&gt; simple thing that was bugging me. Normally, if I'm
writing a single-line doc-string, I'll write like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one_liner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Here is a one-line doc-string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, so good. But, if the doc-string is a multi-liner, I prefer the
ending quotes to be on a line of their own, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multi_liner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Here is the first line.&lt;/span&gt;
&lt;span class="sd"&gt;    Here is another line.&lt;/span&gt;
&lt;span class="sd"&gt;    Here is the final line.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, sometimes, by accident, I'd leave a doc-string like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multi_liner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Here is the first line.&lt;/span&gt;
&lt;span class="sd"&gt;    Here is another line.&lt;/span&gt;
&lt;span class="sd"&gt;    Here is the final line.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While it's really not a big deal, it would bug me and every time I found one
like this I'd "fix" it.&lt;/p&gt;
&lt;p&gt;Eventually, it bugged me enough that I decided I was going to write a little
tool to find all such instances in my code and report them. My first
approach was to think "I could just do this with some regexp magic", &lt;a href="http://regex.info/blog/2006-09-15/247"&gt;which
was really a bad idea&lt;/a&gt;. Then I
though, I know, I should use this as an excuse to to play with &lt;a href="https://docs.python.org/3/library/ast.html"&gt;Python's ast
library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That worked really well! I had &lt;a href="https://github.com/davep/pydscheck/blob/dc5052002690b1f898ccd68f815cdedbe9172b74/pydscheck"&gt;the first version of the
code&lt;/a&gt;
up and running in no time. It was simple but did the job. It ran through
Python code I threw at it and alerted me to both missing doc-strings, and
doc-strings with the ending I didn't like.&lt;/p&gt;
&lt;p&gt;That served me for a while, until one day I realised that it wasn't quite
doing the job correctly; it was only really looking at top-level functions
and top-level methods in classes. Sometimes, not often, but sometimes, I'll
define functions within functions, and I feel they deserve documentation
too. So then I modified the code to ensure it walked every part of the AST.&lt;/p&gt;
&lt;p&gt;Since then, when I've run into new things and had new ideas, &lt;code&gt;pydscheck&lt;/code&gt; has
grown and grown. I've added checks that all mentioned parameters have a
type; I've added checks that any function/method that returns something
actually documents the return value; I've added checks that any
documentation of a returned value includes its type; I've added checks that
any function or method that yields a value documents that fact; I've added
checks that ensure that every parameter is documented in some way.&lt;/p&gt;
&lt;p&gt;Each time I've done this it's helped uncover issues in my code's
documentation that could be cleaner, and it's also given me a pet project to
slowly better understand Python's AST.&lt;/p&gt;
&lt;p&gt;It could be that there are better tools out there, I'd have thought that a
good doc-string linting tool would be something someone had already written.
But this time around I was happy to
&lt;a href="https://en.wikipedia.org/wiki/Not_invented_here"&gt;NIH&lt;/a&gt; it because I needed a
fun learning exercise that would also have some benefits for my day-to-day
work.&lt;/p&gt;
&lt;p&gt;I'll caveat this with the fact that it's very particular to how I work and
how I like my documentation to look, but if it sounds useful, here it is:
&lt;a href="https://github.com/davep/pydscheck"&gt;https://github.com/davep/pydscheck&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's still lots I could do with it. First off I should really properly
package it up so it can be installed as a command line tool via pip. Other
things that would be handy would be to allow some form of customisation of
how it works. I'm sure there's other fun things I can do with it too.&lt;/p&gt;
&lt;p&gt;That's part of the fun of having a pet project: you can tinker when you like
and also get benefits from it as you use it.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="documentation"></category></entry><entry><title>A little speed issue with openpyxl</title><link href="https://blog.davep.org/2018/06/02/a_little_speed_issue_with_openpyxl.html" rel="alternate"></link><published>2018-06-02T13:16:37+01:00</published><updated>2018-06-02T13:16:37+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2018-06-02:/2018/06/02/a_little_speed_issue_with_openpyxl.html</id><content type="html">&lt;p&gt;It's been very quiet on the blogging front, I'm afraid, mostly for &lt;a href="/2017/12/12/on_to_something_new.html"&gt;the
reasons I wrote about back in December last
year&lt;/a&gt;. In that time I've been really
very busy with work (in a good way, in a &lt;em&gt;very&lt;/em&gt; good way) and there's not a
whole lot of time to be toying with pet projects at home.&lt;/p&gt;
&lt;p&gt;However, finding myself with a spare hour or so, I wanted to write about
something I did run into as part of some development at work, and which I
thought might be worth writing about in case it helps someone else.&lt;/p&gt;
&lt;p&gt;Recently I've needed to write a library of code for loading data from Excel
Workbooks. Given that the vast majority of coding I do at the moment is in
Python, it made sense to make use of
&lt;a href="https://openpyxl.readthedocs.io/"&gt;openpyxl&lt;/a&gt;. The initial prototype code I
wrote worked well and it soon grew into a full-blown library that'll be used
in a couple of work-related projects.&lt;/p&gt;
&lt;p&gt;But one thing kept niggling me... It just wasn't as fast as I'd expected.
The workbooks I'm pulling data from aren't that large, and yet it was taking
a noticeable number of seconds to read in the data, and when I let the code
have a go at a directory full of such workbooks... even the fan on the
machine would ramp up.&lt;/p&gt;
&lt;p&gt;It didn't seem right.&lt;/p&gt;
&lt;p&gt;I did a little bit of profiling and could see that the code was spending
most of its time deep in the guts of some XML-parsing functions. While I
know that an &lt;code&gt;xlsx&lt;/code&gt; file is pretty much an XML document, it seemed odd to me
that it would take so much time and effort to pull the data out from it.&lt;/p&gt;
&lt;p&gt;Given that I had other code to be writing, and given that the
workbook-parsing code was "good enough" for the moment, I moved on for a
short while.&lt;/p&gt;
&lt;p&gt;But, a couple of weeks back, I had a bit of spare time and decided to
revisit it. I did some more searching on openpyxl and speed issues and
almost everything I found said that the common problem was failing to open
the workbook in &lt;code&gt;read_only&lt;/code&gt; mode. That can't have been my problem because
I'd being doing that from the very start.&lt;/p&gt;
&lt;p&gt;Eventually I came across a post somewhere (sorry, I've lost it for now --
I'll try and track it down again) that suggested that openpyxl was very slow
to read from a workbook if you were reading one cell at a time, rather than
using generators. The suggestion being that every time you pull a value form
a cell, it has to parse the whole sheet up to that cell. Generators, on the
other hand, would allow access to all the cells during one parse.&lt;/p&gt;
&lt;p&gt;This seemed a little unlikely to me -- I'd have expected the code to cache
the parsing results or something like that -- but it also would explain what
I was seeing. So I decided to give it a test.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/davep/openpyxl-speed-issue"&gt;&lt;code&gt;openpyxl-speed-issue&lt;/code&gt;&lt;/a&gt; is a
version of the tests I wrote and ran and they absolutely show that there's a
huge difference between cell-by-cell access vs generator access.&lt;/p&gt;
&lt;p&gt;Code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_row&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_column&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is &lt;em&gt;far slower&lt;/em&gt; than something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test Sheet&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's an example of the difference in time, as seen on my iMac:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./read-using-generators
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.59&lt;span class="w"&gt; &lt;/span&gt;real&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.44&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.04&lt;span class="w"&gt; &lt;/span&gt;sys
pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./read-using-peeking
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;.02&lt;span class="w"&gt; &lt;/span&gt;real&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;.88&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10&lt;span class="w"&gt; &lt;/span&gt;sys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the cell-by-cell approach is about 16 times slower than the
generator approach.&lt;/p&gt;
&lt;p&gt;In most circumstances the generator approach would make most sense anyway,
and in any other situation I probably would have used it and never have
noticed this. However, the nature of the workbooks I need to pull data from
means I need to "peek ahead" to make decisions about what I'm doing, so a
more traditional loop over, with an index, made more sense.&lt;/p&gt;
&lt;p&gt;I can easily "fix" this by using the generator approach to build up a
two-dimensional array of cells, acquired via the generator; so I can still
do what I want &lt;em&gt;and&lt;/em&gt; benefit from using generators.&lt;/p&gt;
&lt;p&gt;In conclusion: given that I found it difficult to find information about my
speed issue, and given that the one off-hand comment I saw that suggested it
was this wasn't exactly easy to find, I thought I'd write it all down too
and &lt;a href="https://github.com/davep/openpyxl-speed-issue"&gt;create a repository of some test code to illustrate the
issue&lt;/a&gt;. Hopefully someone
else will benefit from this in the future.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="openpyxl"></category></entry></feed>