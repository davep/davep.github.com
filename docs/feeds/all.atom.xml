<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.davep.org</title><link href="https://blog.davep.org/" rel="alternate"></link><link href="https://blog.davep.org/feeds/all.atom.xml" rel="self"></link><id>https://blog.davep.org/</id><updated>2024-06-16T13:08:00+01:00</updated><subtitle>Code, Emacs, VR, Stuff...</subtitle><entry><title>On to something new (redux) (redux)</title><link href="https://blog.davep.org/2024/06/16/on-to-something-new-redux-redux.html" rel="alternate"></link><published>2024-06-16T13:08:00+01:00</published><updated>2024-06-16T13:08:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-06-16:/2024/06/16/on-to-something-new-redux-redux.html</id><content type="html">&lt;p&gt;It's been a wee while since I wrote anything here (been about a month) so I
thought I'd make mention of what's going on.&lt;/p&gt;
&lt;p&gt;The main news is that I'm employed again!&lt;/p&gt;
&lt;p&gt;Once &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;the news about the Textual layoffs
hit&lt;/a&gt; I, of course, started the job
hunting process. This lasted for a wee while (and I have a couple of stories
about that -- perhaps I'll write them up one day). I officially became
"unemployed" on April the 1st (yeah, I know), and by the 23rd I had an offer
for a new position, which I accepted.&lt;/p&gt;
&lt;p&gt;As of the time of writing I've been in that position for a touch over 3
weeks and it's going really well. Right at this moment I'm doing zero Python
work (that will change, I strongly suspect) and, actually, for the first
time ever, I'm writing some TypeScript (it's tempting me to dive into that
some more).&lt;/p&gt;
&lt;p&gt;The team I'm working in are great and I'm also really impressed so far by
the practices they have in place relating to getting stuff done. It's
actually a refreshing change to work in a bigger organisation and actually
find it not massively frustrating!&lt;/p&gt;
&lt;p&gt;I'm also back to working from home full time. This isn't that big a deal for
me as I spent around 22 years doing so &lt;a href="2017/12/12/on_to_something_new.html"&gt;up until
2018&lt;/a&gt;, and of course it isn't that big
of a deal to many folk these days anyway thanks to the 2020- period. This
prompted me to finally clear out the spare room (I've only been in here a
touch under 5 years so of course there were a lot of "I'll sort those soon"
boxes and stuff in there), buy a second desk, and make a work-coding area
that is away from totally separate from my for-fun-coding area.&lt;/p&gt;
&lt;p&gt;This has turned out to be a &lt;em&gt;really&lt;/em&gt; good decision. I love my main hacking
space in the living room, and have done a lot of work there, but that was
always on the odd days here and there when I'd work at home. Now that
working at home is a full-time role it felt important to make the
distinction.&lt;/p&gt;
&lt;p&gt;Weirdly though, all of this means that I'm spending less time working on
personal stuff. When I was working at Textualize, most days, I'd be spending
the best part of 3 hours in the day getting to and from the office. I
thought that perhaps getting that time back would translate into having more
time to tinker with my own stuff. Actually what I'm finding I'm doing is I'm
spending the time on more general self-care and domestic things. This is a
good thing.&lt;/p&gt;
&lt;p&gt;Doubtless once things really settle down and I form my new routine I'll dive
back into FOSS coding more again, and perhaps &lt;a href="https://www.youtube.com/@davep-codes"&gt;get back to streaming while I
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile though you &lt;em&gt;can&lt;/em&gt; find me steaming many late evenings, &lt;a href="https://www.youtube.com/@DavePearson/streams"&gt;mucking
about on my PS5&lt;/a&gt;. Right at
this moment I'm finally playing all the way through &lt;a href="https://www.youtube.com/playlist?list=PLUY2FpMDyORBz0_ubHoJKT9xe3pvCTbRh"&gt;Just Cause
4&lt;/a&gt;
(a game I bought back in 2019 and never finished). In fact last night I
finished the main story.&lt;/p&gt;
&lt;p&gt;Expect a lot more PS5-based streaming nonsense over the next few months.&lt;/p&gt;
&lt;p&gt;One other change I have made is to my VR video publishing schedule. For the
longest time I had the time and was playing so much that I published a video
every day. This wasn't a schedule I set myself, this was more a case of I
was playing so much that to publish less frequently would mean there would
be a huge backlog. These days I'm back to working 5 days a week (previously
I was working 4 days) so I have to cram a little more into my weekends, and
also I want to try and do other things during weekends too. So recently &lt;a href="https://www.youtube.com/watch?v=eHko0fDZm7I"&gt;I
changed to an every-other-day
schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, really, that's about it. For now expect to see a bit less Python-based
content on here, and also quite a bit less Textual-based stuff too.
Currently my focus is elsewhere and it also seems that Textual is a bit of a
moving target recently, throwing in some fun new bugs and breaking changes
which are tricky to keep on top of. That said, you &lt;em&gt;will&lt;/em&gt; still find me in
the repo, lending a hand when I can, and of course in the Textual Discord
too; just don't expect to see me quite so omnipresent there, especially
during the work day.&lt;/p&gt;</content><category term="Life"></category><category term="work"></category><category term="YouTube"></category><category term="streaming"></category><category term="gaming"></category></entry><entry><title>Tinboard v0.14.0</title><link href="https://blog.davep.org/2024/05/14/tinboard-0-14-0.html" rel="alternate"></link><published>2024-05-14T08:02:00+01:00</published><updated>2024-05-14T08:02:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-05-14:/2024/05/14/tinboard-0-14-0.html</id><content type="html">&lt;p&gt;I've just release &lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; v0.14.0.
This release adds a &lt;a href="https://github.com/davep/tinboard/issues/49"&gt;feature that a user
requested&lt;/a&gt;, wheer you can set
the default values for the privacy and read-later status of a new bookmark:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The application settings dialog" src="/attachments/2024/05/15/app-settings.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;So, any time you create a new bookmark, the edit dialog will use those
values by default. It's a feature that makes perfect sense but I didn't
think to add it early on because... well, I set the defaults to my
preference.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Tinboard v0.12.0</title><link href="https://blog.davep.org/2024/04/18/tinboard-0-12-0.html" rel="alternate"></link><published>2024-04-18T16:46:00+01:00</published><updated>2024-04-18T16:46:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-18:/2024/04/18/tinboard-0-12-0.html</id><content type="html">&lt;p&gt;&lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; has turned into a tool I use
pretty much every day; it's probably my most-used Textual/Python-developed
application at this point. This is causing me to think more and more about
how I can add things to it that are related to the core purpose, but are
also outside of the main "interface with Pinboard" thing.&lt;/p&gt;
&lt;p&gt;A thing with keeping bookmarks for a long time is that some of them go
stale, go away. Some will just plain 404, others the whole site will
disappear. If I find myself going back to a bookmark and seeing this is the
case, I'll hit the &lt;a href="https://web.archive.org/"&gt;Wayback Machine&lt;/a&gt; and see if
there's an archive there.&lt;/p&gt;
&lt;p&gt;So I got to thinking: what if I add the ability to perform this check into
Tinboard itself? &lt;a href="https://www.youtube.com/watch?v=XDgiM6pUP2Y"&gt;So I did just that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, in the application, if you press &lt;kbd&gt;w&lt;/kbd&gt; with a bookmark
highlighted, it will check with the Wayback Machine to see if the bookmark
is in the archive. If it isn't you see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="No archive result" src="/attachments/2024/04/18/no-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, if it &lt;em&gt;is&lt;/em&gt; in the archive, you'll see something like
this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Is in the archive result" src="/attachments/2024/04/18/has-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I sense this is going to be the first step in a couple of features related
to this. I'm thinking that I may go on to add a &lt;em&gt;"swap the URL for this
bookmark with the Wayback Machine archive URL"&lt;/em&gt; feature, which will be handy
for those bookmarks that have one away, and it would also be useful to look
at the options for a &lt;em&gt;"please archive a copy of this bookmark"&lt;/em&gt; feature.&lt;/p&gt;
&lt;p&gt;But, for now, v0.12.0 is available and has this handy (for me anyway) first
step.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>PISpy v0.6.0</title><link href="https://blog.davep.org/2024/04/17/pispy-0-6-0.html" rel="alternate"></link><published>2024-04-17T11:30:00+01:00</published><updated>2024-04-17T11:30:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-17:/2024/04/17/pispy-0-6-0.html</id><content type="html">&lt;p&gt;Back in the very early days of the &lt;a href="https://blog.davep.org/2024/03/28/goodbye-textualize.html"&gt;Textual
adventure&lt;/a&gt;,
within the first month or so of working on the framework, we &lt;a href="https://textual.textualize.io/blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/"&gt;had a period
of
dogfooding&lt;/a&gt;.
One of the projects I wrote during that time was a little tool &lt;a href="https://textual.textualize.io/blog/2022/12/08/be-the-keymaster/#pispy"&gt;I called
PISpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The initial version was pretty much a quick hack; during that dogfooding
period I did my best to try and develop a new project every couple of days.
Since then I've let PISpy descend into &lt;a href="https://en.wikipedia.org/wiki/Software_rot"&gt;bit
rot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the last week or so I've turned my attention back to it and made an
effort to &lt;a href="https://www.youtube.com/watch?v=CepsN8TDq1E"&gt;tidy up the code&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=t2EUXA8RkN0"&gt;tidy it some more&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=2u5CfrgZWcc"&gt;and some
more&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=CDCvWCZx1AM"&gt;even some
more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This morning I put the finishing touches to these changes and released
&lt;a href="https://github.com/davep/pispy/releases/tag/v0.6.0"&gt;v0.6.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/shorts/67xtMdstbx4"&gt;&lt;img alt="PISpy in action" src="/attachments/2024/04/17/pispy-in-action.gif#centre"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PISpy can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideallty) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/pispy-client/"&gt;from
PyPI&lt;/a&gt;. It can also be installed with
Homebrew by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;pispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pispy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/pispy"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>macOS desktop widget switching</title><link href="https://blog.davep.org/2024/04/17/macos-desktop-widget-switching.html" rel="alternate"></link><published>2024-04-17T09:26:00+01:00</published><updated>2024-04-17T09:26:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-17:/2024/04/17/macos-desktop-widget-switching.html</id><content type="html">&lt;p&gt;When &lt;a href="https://support.apple.com/en-gb/108996"&gt;desktop widgets&lt;/a&gt; first turned
up in macOS I was pretty quick to embrace them. On my personal Mac Mini I
use a pair of screens, the right one mostly given over to Emacs, and there
was generally room to space there. These days that screen generally looks
something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The usual layout of my right screen" src="/attachments/2024/04/17/right-screen.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Recently I've got into &lt;a href="https://www.youtube.com/@davep-codes/streams"&gt;streaming while I do some
coding&lt;/a&gt; and it's the
right-hand screen that I work on and capture using OBS. When I was setting
this up I realised that the widgets being there could be a problem; not
because they could distract or anything, more that they could, at times,
contain sensitive information (there's my reminder list and my calendar
there after all).&lt;/p&gt;
&lt;p&gt;What I needed was a quick method of hiding all the widgets, and showing them
again later, without it being a lot of faff.&lt;/p&gt;
&lt;p&gt;With a little bit of digging around on the net I finally came up with a pair
of &lt;code&gt;fish&lt;/code&gt; abbreviations that do just the job!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;abbr -g widoff &amp;quot;defaults write com.apple.WindowManager StandardHideWidgets -int 1&amp;quot;
abbr -g widon &amp;quot;defaults write com.apple.WindowManager StandardHideWidgets -int 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when I'm going to stream, part of my "getting stuff ready to go live"
checklist is to run &lt;code&gt;widoff&lt;/code&gt; in the terminal; once I'm finished I can then
just run &lt;code&gt;widon&lt;/code&gt; again to have them come back.&lt;/p&gt;
&lt;p&gt;Fast, clean, handy.&lt;/p&gt;
&lt;p&gt;I've also got a pair for when I'm using &lt;a href="https://support.apple.com/en-gb/guide/mac-help/mchl534ba392/mac"&gt;Stage
Manager&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;abbr -g smwidoff &amp;quot;defaults write com.apple.WindowManager StageManagerHideWidgets -int 1&amp;quot;
abbr -g smwidon &amp;quot;defaults write com.apple.WindowManager StageManagerHideWidgets -int 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although, really, I can't remember the last time I used Stage Manager. I
dabbled with it for a wee while, found it vaguely handy in a couple of
situations, but it doesn't seem to have stuck as part of my workflow or work
environment.&lt;/p&gt;</content><category term="Tech"></category><category term="macOS"></category><category term="fish"></category><category term="shell"></category><category term="streaming"></category></entry><entry><title>Tinboard v0.11.0</title><link href="https://blog.davep.org/2024/04/09/tinboard-0-11-0.html" rel="alternate"></link><published>2024-04-09T15:43:00+01:00</published><updated>2024-04-09T15:43:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-09:/2024/04/09/tinboard-0-11-0.html</id><content type="html">&lt;p&gt;While &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;my time working on Textual might have come to an
end&lt;/a&gt;, my time working &lt;em&gt;with&lt;/em&gt; Textual
hasn't. Three days back &lt;a href="https://www.youtube.com/watch?v=U66oHFLWmG4"&gt;I experimented with Textual's newly-added "inline
mode"&lt;/a&gt;:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
    &lt;iframe
        width="560"
        height="315"
        src="https://www.youtube.com/embed/U66oHFLWmG4?si=kCQba6vMoxpKMtBG"
        title="YouTube video player" frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In doing so I extended the application so that it's possible to run
&lt;code&gt;tinboard add&lt;/code&gt; and quickly enter a new bookmark and then carry on in the
terminal, without needing to "go fullscreen". I'll admit it's of limited
use, but it seemed like a good shakedown of the feature and in working on it
I was able to discover a couple of bugs
(&lt;a href="https://github.com/Textualize/textual/issues/4385"&gt;#4385&lt;/a&gt;,
&lt;a href="https://github.com/Textualize/textual/issues/4403"&gt;#4403&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The effect of this is this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinboard inline addition in action" src="/attachments/2024/04/09/tinboard-inline-add.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Goodbye Textualize</title><link href="https://blog.davep.org/2024/03/28/goodbye-textualize.html" rel="alternate"></link><published>2024-03-28T06:30:00+00:00</published><updated>2024-03-28T06:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-28:/2024/03/28/goodbye-textualize.html</id><content type="html">&lt;p&gt;While I have been &lt;a href="/2017/12/12/on_to_something_new.html"&gt;on the receiving end of redundancy once
before&lt;/a&gt;, that was after 21 years of
service at a company that, while it was in part about software development,
I would never have called it a "tech" company.&lt;/p&gt;
&lt;p&gt;So, as of today, I can finally say that the "&lt;a href="https://techcrunch.com/2024/03/27/tech-layoffs-2023-list/"&gt;tech
layoffs&lt;/a&gt;" came
for me and I'm one of 67% of employees being let go from a tech startup.&lt;/p&gt;
&lt;p&gt;Achievement unlocked, I guess?&lt;/p&gt;
&lt;p&gt;&lt;img alt="!Achievement unlocked" src="/attachments/2024/03/28/achievement-unlocked.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;To be clear: I'm not annoyed about this, I'm not even shocked about this; I
planned for this from the off and realised and recognised the gamble I was
taking &lt;a href="https://twitter.com/willmcgugan/status/1574118265063972864"&gt;back in 2022&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/willmcgugan/status/1574118265063972864"&gt;&lt;img alt="Announcing being hired" src="/attachments/2024/03/28/textual-startup-tweet.png#centre"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am disappointed about this. Not in a "I'm disappointed in you" kind of
way, but disappointed for all involved and what it says about how FOSS
projects are funded and maintained.&lt;/p&gt;
&lt;p&gt;It's been an interesting journey, and it's been a privilege to do something
I've been wanting to do since the 1990s, when I first read the GNU Manifesto
and subsequently watched the free software and open source movements develop
and grow: work on FOSS for a living. In doing this I've developed my
thoughts about the feasibility of such an endeavour, I've refined how I feel
about working in very small teams, I've learnt a lot of useful lessons I'm
going to draw on in the future (keeping a journal of my experience has been
a great move; I have a lot of notes and thoughts written down that I'll be
reviewing and distilling for myself over the coming weeks).&lt;/p&gt;
&lt;p&gt;Most of all: it's been an absolute blast working on something that people
are actually using to build &lt;a href="https://github.com/davep/transcendent-textual"&gt;cool
things&lt;/a&gt;, and to &lt;a href="https://textual.textualize.io/help/"&gt;provide help
and guidance to those people when they've needed
it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So... what happens now? Well, of course, right now, I'm looking for a new
position. If you're reading this and you are looking for someone who's kinda
handy with Python &lt;a href="https://github.com/davep"&gt;and a bunch of other languages&lt;/a&gt;
and who loves learning new stuff, or if you know someone who is looking for
such a person, &lt;a href="mailto:davep@davep.co.uk"&gt;do drop me a line&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As for what happens with Textual, and my involvement with it...&lt;/p&gt;
&lt;p&gt;Well, what happens &lt;em&gt;with&lt;/em&gt; Textual is
&lt;a href="https://github.com/willmcgugan"&gt;Will&lt;/a&gt;'s call, of course. As for my
involvement with it: I care about FOSS and I care about Textual; I also care
about the folk who have been kind enough to use their time to explore it,
test it, build with it, commit to it and make neat stuff with it. My
intention, as long as free time allows, is to carry on being involved, both
on GitHub and in &lt;a href="https://discord.gg/Enf6Z3qhVr"&gt;the Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's my sincere hope that, as a community of FOSS-friendly developers, we
see Textual over the 1.0 line and beyond.&lt;/p&gt;
&lt;p&gt;But all that starts next week. It's a bank holiday weekend and I think I
might have deserved a run, a bit of &lt;a href="https://www.youtube.com/@DavePearson"&gt;mucking about in
VR&lt;/a&gt;, a beer, and just a wee bit of
down time.&lt;/p&gt;</content><category term="Life"></category><category term="Python"></category><category term="textual"></category><category term="free-software"></category><category term="work"></category></entry><entry><title>Homebrew all the Python things</title><link href="https://blog.davep.org/2024/03/10/homebrew-all-the-python-things.html" rel="alternate"></link><published>2024-03-10T14:12:00+00:00</published><updated>2024-03-10T14:12:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-10:/2024/03/10/homebrew-all-the-python-things.html</id><content type="html">&lt;p&gt;Over the past year and a half I've written a &lt;em&gt;lot&lt;/em&gt; of Python code, and a lot
of that Python code has been Textual applications; most of those Textual
applications have been very quick demonstration or test applications built
to help support someone asking for help; some of them have been less-trivial
applications written in my own time and for my own use and amusement. Of
them I'd say there are two near-daily-drivers, and a couple that I either
have more plans for, or like to maintain just for the hell of it.&lt;/p&gt;
&lt;p&gt;Those latter applications are all ones that &lt;a href="https://pypi.org/user/davepearson/"&gt;I've deployed to
PyPI&lt;/a&gt;, and because of that are all ones
that I've recommenced be installed using
&lt;a href="https://pipx.pypa.io/stable/"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;. During that time though I've had
half an inclination to make them &lt;a href="https://brew.sh/"&gt;installable via
Homebrew&lt;/a&gt;. While probably not installable from the core
Homebrew repository&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, at least installable from a "tap"&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; that's under
my own GitHub account or something.&lt;/p&gt;
&lt;p&gt;To this end I've had &lt;a href="https://til.simonwillison.net/homebrew/packaging-python-cli-for-homebrew"&gt;a blog post about packaging Python apps for
Homebrew&lt;/a&gt;
saved in Pinboard for a while now, and every time I look at it I think
&lt;em&gt;"this is a lot of faff, maybe later"&lt;/em&gt;. Today was that "later".&lt;/p&gt;
&lt;p&gt;As it turned out, it was &lt;em&gt;way&lt;/em&gt; easier than I first realised. The evolution
of today pretty much went like this:&lt;/p&gt;
&lt;h2&gt;Deciding to use a single repository as the "tap"&lt;/h2&gt;
&lt;p&gt;The blog post above seemed to suggest that for every application repository
you want a tap for, you probably want a parallel &lt;code&gt;homebrew-&lt;/code&gt;-prefixed
repository. This in turn would suggest that every time someone wants to
install one of your tools, they'd need to add a new tap&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. As I looked at
it this seemed like way too much faff, so in the end I decided &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;to create a
single repository that I'd keep all my formula files
in&lt;/a&gt;. The naming of
&lt;code&gt;homebrew-homebrew&lt;/code&gt; meant that the tap name would simply be
&lt;code&gt;davep/homebrew&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Simple and clean, I think: things for homebrew, things that can be installed
via homebrew, that come from davep. To add the tap it's simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Ensuring that all my applications and libraries publish source&lt;/h2&gt;
&lt;p&gt;Although it seems that it might be (possibly, maybe, perhaps, who can tell?)
deprecated, it looked like
&lt;a href="https://github.com/tdsmith/homebrew-pypi-poet"&gt;&lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/a&gt; was a
tool I'd need to do all the heavy work on making the formula file. A quick
test threw up a problem where it was complaining that my test package (one
of my own applications) didn't have an &lt;code&gt;sdist&lt;/code&gt;. Sure enough, through nothing
more than never having bothered to make it happen, the source of my
libraries and applications wasn't been uploaded to PyPI when I published.&lt;/p&gt;
&lt;p&gt;So I went through some of my repositories and fixed that, making patch
releases as I went.&lt;/p&gt;
&lt;h2&gt;Making a &lt;code&gt;Makefile&lt;/code&gt; to let me be lazy&lt;/h2&gt;
&lt;p&gt;The next thing to do was to figure out the most lazy way of building the
formula files. From what I could see the main steps to making all of this
work were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a venv and activate it&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the package you want to package for Homebrew&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;poet&lt;/code&gt; to make the formula&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seemed simple enough. For all sorts of lazy reasons I still tend to use
&lt;code&gt;pipenv&lt;/code&gt; to get things done quickly, and that seemed to work fine here too.
I'm also a fan of &lt;code&gt;PIPENV_VENV_IN_PROJECT=true&lt;/code&gt; which makes things clean and
tidy, so I figured a rule in a &lt;code&gt;Makefile&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.12
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev&lt;span class="w"&gt; &lt;/span&gt;homebrew-pypi-poet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;would be fine to make a clean venv ready to build the formula, and then I'd
have a rule for the package itself that depended on the above, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;oshit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;poet&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;oshit&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/oshit.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Fixing the package description&lt;/h2&gt;
&lt;p&gt;The above was great, and worked really well. But there was one issue that I
could see: the resulting formula file always had this &lt;code&gt;desc&lt;/code&gt; inside it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Shiny new formula&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From what I could see there was no way to tell &lt;code&gt;poet&lt;/code&gt; what I wanted the
description to be, and neither did I want to have to remember to edit that
line each time I regenerated the formula file. So &lt;code&gt;sed&lt;/code&gt; to the rescue then I
guess, with this sort of thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/Shiny new formula/The actual text I want/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/coolapp.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The result&lt;/h2&gt;
&lt;p&gt;The result of all of this is that I now have &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;a repository that I or anyone
else can use as a tap&lt;/a&gt; to be
able to install my stuff using the &lt;code&gt;brew&lt;/code&gt; command. So now if you want a
little Hacker News reader for the terminal but you don't want to be messing
with installing &lt;code&gt;pipx&lt;/code&gt; and the like, but you do use &lt;code&gt;brew&lt;/code&gt; on your machine,
it's just this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fingers crossed it all "just works" when I next upgrade one of those
packages. I will, of course, have to remember to go into
&lt;code&gt;davep/homebrew-homebrew&lt;/code&gt; and &lt;code&gt;make the-app&lt;/code&gt; for the relevant application,
and then commit and push the changes, but that's really not too difficult to
remember and do.&lt;/p&gt;
&lt;p&gt;Hopefully it'll then all just work.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do actually &lt;a href="https://formulae.brew.sh/formula/eg"&gt;have one package in
Homebrew&lt;/a&gt;, but it wasn't me who put
it there.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I really like Homebrew as a tool for getting stuff installed, by oh my
gods the naming of things in its ecosystem is terrible and confusing!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;No, really, I mean it, this naming convention is kinda cringe right?&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="Homebrew"></category><category term="Makefile"></category></entry><entry><title>Tinboard v0.10.0</title><link href="https://blog.davep.org/2024/03/07/tinboard-0-10-0.html" rel="alternate"></link><published>2024-03-07T08:45:00+00:00</published><updated>2024-03-07T08:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-07:/2024/03/07/tinboard-0-10-0.html</id><content type="html">&lt;p&gt;I just realised that it's been a while since I &lt;a href="/2023/12/25/tinboard-0-4-0.html"&gt;last posted an
update&lt;/a&gt; about &lt;code&gt;tinboard&lt;/code&gt;. This is probably
my most-used Textual-based application, and one I'm constantly tinkering
with, and just this morning I published v0.10.0.&lt;/p&gt;
&lt;p&gt;Often the changes are small tweaks or fixes to how it works, sometimes
they're simply updates to the version of Textual used, making use of some
new feature or other; I've yet to add another "major" feature so far. They
will come, but so far the ideas I have for the application haven't actually
felt that necessary. Although I say so myself it does what I need it to do
and it does it really well.&lt;/p&gt;
&lt;p&gt;So, as a quick catch-up of what's changed since v0.4.0 (which was the last
version I posted about):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v0.5.0 was released 2024-01-04; this included all the tags of a bookmark
when doing full-text searching.&lt;/li&gt;
&lt;li&gt;v0.6.0 was released 2024-01-10; it fixed a small bug where the tag
suggestion facility got confused by trailing spaces in the input field.&lt;/li&gt;
&lt;li&gt;v0.7.0 was released 2024-02-02; this updated the minimum Textual version to
v0.48.2 and removed all the custom changes to the Textual &lt;code&gt;TextArea&lt;/code&gt; widget,
making use of the updates to &lt;code&gt;TextArea&lt;/code&gt; that version of Textual made
available.&lt;/li&gt;
&lt;li&gt;v0.8.0 was released 2024-02-18; this fixed a crash on startup caused by a
newer release of Textual (the fault was in &lt;code&gt;tinboard&lt;/code&gt;; the update to Textual
helped reveal the problem).&lt;/li&gt;
&lt;li&gt;v0.9.0 was released 2024-02-29; it simply added support for using
&lt;kbd&gt;Esc&lt;/kbd&gt; at the top level of the application to quit (I like to camp
on &lt;kbd&gt;Esc&lt;/kbd&gt; to GTFO).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, just now, I released v0.10.0. This release makes full use of &lt;a href="https://github.com/Textualize/textual/pull/4154"&gt;some
work I recently did to enhance Textual's &lt;code&gt;CommandPalette&lt;/code&gt;
widget&lt;/a&gt;, which added a
"discover" system. The change in &lt;code&gt;tinboard&lt;/code&gt; is that all of the &lt;a href="https://github.com/davep/tinboard/tree/main/tinboard/commands"&gt;command
palette
providers&lt;/a&gt;
now have &lt;code&gt;discover&lt;/code&gt; methods too. The result of this change is that when you
open the command palette in &lt;code&gt;tinboard&lt;/code&gt; (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;) you
can see &lt;em&gt;every&lt;/em&gt; possible command right away.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in discovery mode" src="/attachments/2024/03/07/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Back to Death Stranding</title><link href="https://blog.davep.org/2024/02/05/back-to-death-stranding.html" rel="alternate"></link><published>2024-02-05T07:45:00+00:00</published><updated>2024-02-05T07:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-02-05:/2024/02/05/back-to-death-stranding.html</id><content type="html">&lt;p&gt;&lt;img alt="Death Stranding" src="/attachments/2024/02/05/IMG_4223.JPG#centre"&gt;&lt;/p&gt;
&lt;p&gt;Death Stranding is easily one of my top 5 games ever. I bought the PS4
version, on a whim, back in early 2020, to see what all the fuss was about.
I didn't know much about it other than the love/hate it seemed to be
getting. I can still remember the first session, being a bit confused about
what was going on, and then suddenly hitting a perfect moment in the game
where I knew it was for me, and that I was going to love it.&lt;/p&gt;
&lt;p&gt;That moment? It's when you're setting out for the incinerator, the camera
pulls back, the landscape opens up before you, and &lt;a href="https://www.youtube.com/watch?v=SBwoMJNxiFo"&gt;&lt;em&gt;Bones&lt;/em&gt; by Low Roar
kicks in&lt;/a&gt;. Perfection!&lt;/p&gt;
&lt;p&gt;I went on to finish the story in around 45 to 50 hours (much of that
overlapping with the first week or so of lockdown during the pandemic); and
then played at least as much again just exploring, building zip lines,
roads, etc.&lt;/p&gt;
&lt;p&gt;I even &lt;a href="https://my.chiral.pictures/"&gt;kept a photoblog of my time in the
game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;About a year back I bought the Director's Cut of the game, this time for PC.
I'd decided that I had to play it through again &lt;a href="https://www.youtube.com/watch?v=Zb7390_rldQ&amp;amp;list=PLUY2FpMDyORDJd_VYhF74e6Mapf8oHp8i"&gt;and did start streaming
it&lt;/a&gt;.
Annoyingly though the PC setup wasn't great. The game itself ran just fine
on my PC, but the controller setup meant that, as I sat on the sofa, it
would drop connection from time to time. The only workaround for this was to
sit on my office chair closer to the TV and, really, this wasn't
comfortable.&lt;/p&gt;
&lt;p&gt;Eventually that play-through fell away.&lt;/p&gt;
&lt;p&gt;Fast forward to last week &lt;a href="https://www.youtube.com/watch?v=wbLstJHlC4U"&gt;and the release of the 10 minute Death Stranding
2 trailer&lt;/a&gt; and I was hooked all
over again! While it never totally went away, my obsession with this game
was back full force.&lt;/p&gt;
&lt;p&gt;I had to play again!&lt;/p&gt;
&lt;p&gt;Meanwhile, between the attempt to play through on the PC and now, I'd
acquired a PS5 &lt;em&gt;and&lt;/em&gt; at some point I'd upgraded my PS4 version of Death
Stranding to the PS5 Director's Cut.&lt;/p&gt;
&lt;p&gt;So I had to. I just had to. I'd had a great time &lt;a href="https://www.youtube.com/watch?v=0TriPR0c-eg&amp;amp;list=PLUY2FpMDyORBQXTLCgueUh5v8DCx5TByU"&gt;streaming my play through
the story of Cyberpunk
2077&lt;/a&gt;
so it made sense to do the same with Death Stranding.&lt;/p&gt;
&lt;p&gt;Last night I hit &lt;em&gt;New game&lt;/em&gt; on my PS5 &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g"&gt;and played for just over 2
hours&lt;/a&gt;. This play through is
likely going to take a long time -- my work situation means I have a longer
and more tiring commute -- but I'm determined to do it. I want to experience
all of the extra things in the Director's Cut, including the extra story
(which I've read there is, but haven't seen or read about).&lt;/p&gt;
&lt;p&gt;I hope, eventually, &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g&amp;amp;list=PLUY2FpMDyORCBUB0_pmQ5hKu1WTJnAVGI"&gt;the playlist I
started&lt;/a&gt;
will have the full story plus lots more fun and building and exploring in
it. Hopefully I'll be done just in time for the release of DS2! (and
&lt;a href="https://www.youtube.com/watch?v=QdBZY2fkU-0"&gt;GTA6&lt;/a&gt;, it's going to be a busy
year for gaming next year!)&lt;/p&gt;</content><category term="Gaming"></category><category term="Death Stranding"></category><category term="PS5"></category><category term="gaming"></category></entry><entry><title>How not to ask for help</title><link href="https://blog.davep.org/2024/02/04/how-not-to-ask-for-help.html" rel="alternate"></link><published>2024-02-04T11:27:00+00:00</published><updated>2024-02-04T11:27:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-02-04:/2024/02/04/how-not-to-ask-for-help.html</id><content type="html">&lt;p&gt;My association with Textual works on two levels: on the one hand, sure, it's
&lt;a href="https://www.textualize.io/about-us/"&gt;currently my day job&lt;/a&gt;; on the other
hand it's a FOSS project that I'm keen to support so &lt;em&gt;"free time me"&lt;/em&gt; tries
to work with it and support others working with it too. For this reason
you'll often see me being terminally&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; online in the Textual Discord,
trying to answer questions as they come up, every waking free moment.&lt;/p&gt;
&lt;p&gt;Almost without exception the people who ask for help are appreciative and
ask in the spirit of wanting help and wanting to work together with whoever
is helping them to get an answer. That... that's actually quite a cool thing
to be part of. I like the sense of community that comes from someone going
&lt;em&gt;"bah I'm trying to do this thing and it isn't working PLEASE HELP!"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And then... well, let's just say that sometimes the odd question will crop
up that seems to be asked from a less collaborative position.&lt;/p&gt;
&lt;p&gt;Without wanting to appear to dunk on an individual (I don't wish to), I want
to break down an example that happened yesterday. For some background, I'd
been AFK all day, &lt;a href="https://fosstodon.org/@davep/111867694675165507"&gt;having a wonderful time in town with a
friend&lt;/a&gt;, shopping,
&lt;a href="https://fosstodon.org/@davep/111867942313370807"&gt;lunch&lt;/a&gt;, a movie, that sort
of thing. A nicely-chilled day where I didn't even look at the Discord
notifications that had popped up on my watch and phone.&lt;/p&gt;
&lt;p&gt;However, later on that evening, finally home and flopped on the sofa, I saw
a question pop up that, while lacking &lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;any useful
detail&lt;/a&gt; and
possibly suffering a wee bit from being &lt;a href="https://label.dev/articles/xy-problem/"&gt;an XY
problem&lt;/a&gt;, the immediate answer was
clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;tt&gt;BadIdentifier: 'test.udp_json_client-input' is an invalid id; identifiers must
contain only letters, numbers, underscores, or hyphens, and must not begin with
a number.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;????????????????? a dot isn't allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like I say: it lacks context and detail, and the number of question marks
doesn't really clarify much, but the core question that seems to be at play
here is &lt;em&gt;"is it true that a full stop can't be used as part of the ID of a
widget?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The answer is: no, it can't. There's a reason for that too, and if someone
were to take a step back for a moment and think about how IDs play a part in
queries and how they'd be used in a stylesheet, the reason for that might
pop out. So, to help the person asking the question walk in the direction of
the answer, I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you come to query that how would the parser know it’s not ID “test”
combined with a class, if dot was allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we go on, to illustrate my point, consider this ID: &lt;code&gt;foo.bar&lt;/code&gt;. When
you come to query that back, or use it in a stylesheet, how would &lt;code&gt;#foo.bar&lt;/code&gt;
look? Is it a widget with the ID &lt;code&gt;foo.bar&lt;/code&gt;; or is it a widget with the id
&lt;code&gt;foo&lt;/code&gt; and the class &lt;code&gt;bar&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As far as Textual's CSS is concerned, it would be the latter.&lt;/p&gt;
&lt;p&gt;But at this point it didn't seem necessary to get into all that detail; I
like to try and assume knowledge on the part of the person asking the
question, sans any other evidence, so for the moment I'll assume a &lt;em&gt;"oh,
right, yeah, that's a damn good point"&lt;/em&gt; kind of reply. Or if not, perhaps a
&lt;em&gt;"I don't quite follow, could you explain?"&lt;/em&gt; reply, in which case I'm happy
to go into all the detail.&lt;/p&gt;
&lt;p&gt;The reply was neither:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why are element ID and classes co-mingled?&lt;/p&gt;
&lt;p&gt;this was previously allowed so your question doesn't really make sense to
me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I'm confused. Asking why element IDs and classes &lt;em&gt;are&lt;/em&gt; co-mingled seems
odd; but I'm used to chatting with people who don't have English as a first
language so I'm going to assume it's just a wording choice; but the latter
part is very odd: this has &lt;em&gt;never&lt;/em&gt; been allowed. Or, more to the point...
without any proper context I can't really appreciate what claim is being
made here.&lt;/p&gt;
&lt;p&gt;You see... &lt;a href="https://github.com/Textualize/textual/issues/3954"&gt;I did notice a bug in Textual recently, when it came to widget
IDs&lt;/a&gt;. Long story short:
when you set your ID for the widget in your code, no actual validation of
the ID was being done. This was an oversight &lt;a href="https://github.com/Textualize/textual/pull/4032"&gt;that was fixed in the latest
release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But knowing that that's the case would be guesswork on my part; I'm also
fresh at my desk after a day out; I'm probably not quite in the
coding/Textual zone yet, so rather than try and guess half of the
conversation, it's easier to just ask the person who is asking. So I ask
them to restate the question, and give some more background.&lt;/p&gt;
&lt;p&gt;The reply is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the objective is to put a string like test.udp_json_client-input as the
label of a tab, which previously just used the ID property. from skimming
release notes, is it better to explicitly set the label, and then assign
something compliant for the ID separately?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait... what? I thought we were talking about valid widget IDs, now we're
talking about tabs and labels? Do we mean &lt;code&gt;TabbeContent&lt;/code&gt; and the labels of a
&lt;code&gt;TabPane&lt;/code&gt;? This is a bit different. So I'm sat there trying to figure out
this person's thought process so I can offer the help they're after and this
follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;okay @davep, you have a real bug. --content-tab- prefix is not ephemeral.
if I create a tab and grab .id, that prefix comes with it, so if you save
it for later and try to set .active, assigning .active doesn't agree that
there is a tab --content-tab-thing&lt;/p&gt;
&lt;p&gt;so I need to de-mangle the name manually before assigning .active I guess?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wut? Like... wut? Okay, we do seem to be talking about &lt;code&gt;TabbedContent&lt;/code&gt;, I
recognise the values being mentioned here; we did some work &lt;a href="https://github.com/Textualize/textual/pull/3815"&gt;late on last
year&lt;/a&gt; that added some
namespacing to parts of the &lt;code&gt;TabbedContent&lt;/code&gt; widget in an effort to &lt;a href="https://github.com/Textualize/textual/issues/3695"&gt;reduce
some foot-gun
situations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But... there's no &lt;code&gt;.&lt;/code&gt; being used in the IDs as part of that; why are we now
proclaiming a bug in an unrelated PR? That's quite the leap with zero
evidence. Like... sure, I'm &lt;em&gt;all&lt;/em&gt; for being alerted to bugs and fixing them,
but this doesn't seem like that.&lt;/p&gt;
&lt;p&gt;And then there's the &lt;em&gt;"so I need to..."&lt;/em&gt; conclusion that also seems to have
no connection to the original question.&lt;/p&gt;
&lt;p&gt;Anyone who has ever done support will recognise this situation, I'm sure.
Someone has seen a problem, they've dug around a little and reached a
conclusion about what the cause is, and turns up looking for help with the
&lt;em&gt;conclusion&lt;/em&gt; they've reached (very much a variant of &lt;a href="https://label.dev/articles/xy-problem/"&gt;a XY
problem&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;That almost never gets us where we want to go, so I do the obvious thing; I
try and reboot the question; I try and get us back to the start and try and
get some clarity; I try and encourage asking the question with zero
assumptions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm afraid I'm still not really understanding your question, as it now no
longer seems to relate to what you very first asked. Perhaps you could
start again, ideally with an
&lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;MRE&lt;/a&gt; of what
you're looking at and trying to do, for clarity?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I figure, whatever the problem is, it can be illustrated with like a dozen
lines of code. Also, when asking people to do this, it often actually helps
them rubber-duck their own problem. There's been plenty of times on Discord
where someone's "found a bug" in Textual, they're asked to make an MRE of
it, and they come back and go &lt;em&gt;"oh, shoot, right, I did that and realised
the bug was in my code"&lt;/em&gt;. It's cool when they happens; everyone learns
something.&lt;/p&gt;
&lt;p&gt;So... no MRE comes back, but this is the reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm trying to fix multiple breakages in my application from some recent
changes. Right now I can't wrap my head around what to assign a
tabbed_content.active for it to work how it did before (where if you have
a tab with ID sample, you can assign tabbed_content.active = "sample", but
you can't do that anymore)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While not an MRE, I &lt;em&gt;can&lt;/em&gt; work with this. It seems clear that they have a
&lt;code&gt;TabbedContent&lt;/code&gt; where they have a &lt;code&gt;TabPane&lt;/code&gt; with the ID &lt;code&gt;"sample"&lt;/code&gt; and they
are struggling to make it the &lt;code&gt;active&lt;/code&gt; tab by setting &lt;code&gt;active&lt;/code&gt; to
&lt;code&gt;"sample"&lt;/code&gt;. That seems hugely unlikely, this is what &lt;code&gt;TabbedContent&lt;/code&gt; is all
about, I think we'd have noticed (I'm petty sure we've got unit tests that
cover this), but I'm game. I can test this. And the MRE I write will
illustrate there isn't a problem.&lt;/p&gt;
&lt;p&gt;So I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, I can only suggest that you make an MRE of the issue you're seeing.
For example, here's me making a set of tabs, the last of which has the ID
"four", and I set the active to "four":&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and provide the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Based on what they've most-recently said is the problem, I'm confident
they'll see that this MRE is their situation in a nutshell, and we can work
out from there and figure out what the problem is they're seeing and where
this &lt;code&gt;.&lt;/code&gt; in their IDs is coming from (because I'm &lt;em&gt;very&lt;/em&gt; confident it isn't
coming from the work that was done on &lt;code&gt;TabbedContent&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is good. We're getting close to heading down a good path; I can feel
it!&lt;/p&gt;
&lt;p&gt;I was wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/Textualize/textual/blob/main/src/textual/widgets/_tabbed_content.py#L513&lt;/p&gt;
&lt;p&gt;there's no way you can deny you just added a metric ton of shenanigans
with the tab ID stuff. I can't get it to work at all anymore (assigning
.active), but yes I will either come up with an MRE or find the bug and
let you know&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, rather than back up a wee bit, work with the MRE I wrote for them so we
can take a walk through the problem, they instead decide to tell me that the
PR I did last year (which &lt;em&gt;still&lt;/em&gt; isn't implicated in any of this outwith of
them seemingly assuming it's the cause of all the issues, presented with
zero evidence that it is) was simply &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No!&lt;/p&gt;
&lt;p&gt;Stop!&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; how you ask for help.&lt;/p&gt;
&lt;p&gt;This isn't how you ask for help from a product or service you pay for. This
&lt;em&gt;really&lt;/em&gt; isn't how you ask for help from a Free Software project, where the
people who are offering you help are doing so in their free time because
they want people to be able to build cool things with it.&lt;/p&gt;
&lt;p&gt;It really isn't hard at all to show just a wee bit of respect for people's
time and willingness to try and help you.&lt;/p&gt;
&lt;p&gt;Now... I get it. I can imagine a scenario where someone has just updated
Textual and their application suddenly starts throwing all sorts of weird
and new errors. That happens. That happened to me &lt;a href="https://github.com/Textualize/textual/issues/4101"&gt;on Thursday evening just
gone&lt;/a&gt;. But that's no
reason for approaching getting help like this.&lt;/p&gt;
&lt;p&gt;The way to approach it is this: pin the problem dependency, perhaps publish
a new version of your application so there's no accidental update of the
dependency, then head to any of the help resources for the dependency has
and &lt;em&gt;work with people who want to help you to find the cause of the
problem&lt;/em&gt;. Trust me, it'll go a lot faster if you work with them, take on
board suggestions (no matter how odd they might first appear), and really
don't call their code &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The conclusion to all of this? The person asking the question eventually
found they were setting some widget's ID to an invalid ID; one with a &lt;code&gt;.&lt;/code&gt; in
it. So as I suspected and wanted to walk them to: they had invalid IDs all
along and they only found out about this because ID validation was fixed.&lt;/p&gt;
&lt;p&gt;Perhaps one day they'll retract the claim that my actually-unrelated code
that wasn't "just" released &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.46.0"&gt;but was from last
year&lt;/a&gt; is &lt;em&gt;"a
metric ton of shenanigans"&lt;/em&gt;. &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Geddit? GEDDIT?&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="free-software"></category><category term="foss"></category><category term="help"></category></entry><entry><title>Quizzical</title><link href="https://blog.davep.org/2024/01/29/quizzical.html" rel="alternate"></link><published>2024-01-29T21:30:00+00:00</published><updated>2024-01-29T21:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-29:/2024/01/29/quizzical.html</id><content type="html">&lt;p&gt;I feel like I'm on a bit of a roll when it comes to building applications
for the terminal at the moment; while I'm still tinkering and improving
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; and
&lt;a href="https://github.com/davep/oshit"&gt;OSHit&lt;/a&gt;, I had the urge to tackle another
idea that's been on my TODO list for a while.&lt;/p&gt;
&lt;p&gt;This is something &lt;a href="https://github.com/davep/quiz.el"&gt;I did for Emacs&lt;/a&gt; back
in 2017 and I felt it was a &lt;em&gt;perfect&lt;/em&gt; candidate for a Textual-based project.
It's a terminal-based trivia quiz game, using &lt;a href="https://opentdb.com/"&gt;the Open Trivia
Database&lt;/a&gt; as the source of questions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quizzical" src="/attachments/2024/01/29/quizzical.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I've just published an early version &lt;a href="https://pypi.org/project/quizzical/"&gt;to
PyPI&lt;/a&gt;; it still needs some polish and I
have a few other ideas for it, but as it stands I feel it's a fun little
game to mess around with.&lt;/p&gt;
&lt;p&gt;The idea is pretty straightforward: you can run it up and create lots of
different quizzes, there are various parameters you can use to create lots
of different kinds of challenges:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Building a new quiz" src="/attachments/2024/01/29/new-quiz.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Once you're created a quiz, you can run it and answer away:&lt;/p&gt;
&lt;p&gt;&lt;img alt="An example question" src="/attachments/2024/01/29/question.png"&gt;&lt;/p&gt;
&lt;p&gt;Right now the idea is that you answer by pressing either &lt;kbd&gt;1&lt;/kbd&gt;,
&lt;kbd&gt;2&lt;/kbd&gt;, &lt;kbd&gt;3&lt;/kbd&gt; or &lt;kbd&gt;4&lt;/kbd&gt; (or just &lt;kbd&gt;1&lt;/kbd&gt; or
&lt;kbd&gt;2&lt;/kbd&gt; for true/false questions); when I get a moment I'll also enable
mouse support for selecting an answer too (honestly I feel
keyboard-answering feels far more natural).&lt;/p&gt;
&lt;p&gt;Once the quiz is done you can review your answers and see which were right
and which were wrong:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing results" src="/attachments/2024/01/29/results.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;As I say: there's a bunch of other things I want to add to this (keeping
track of scores, adding session token support to reduce the chances of
repeat questions, etc), but this felt like a good spot to make a v0.1.0
available if anyone else wanted to have a play.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/quizzical/"&gt;from PyPi&lt;/a&gt;.
The &lt;a href="https://github.com/davep/quizzical"&gt;source is available over on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: Now you can see why I made
&lt;a href="/2024/01/11/textual-countdown.html"&gt;&lt;code&gt;textual-countdown&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Orange Site Hit v0.5.0</title><link href="https://blog.davep.org/2024/01/17/oshit-0-5-0.html" rel="alternate"></link><published>2024-01-17T21:36:00+00:00</published><updated>2024-01-17T21:36:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-17:/2024/01/17/oshit-0-5-0.html</id><content type="html">&lt;p&gt;Just a wee catch-up post about OSHit, &lt;a href="https://github.com/davep/oshit"&gt;my terminal-based HackerNews
browser&lt;/a&gt;. Over the past couple of weeks I've
made some small changes, so I thought I'd make mention of what I've done.&lt;/p&gt;
&lt;p&gt;As of v0.5.0, which I released earlier today, I've:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added a quick way of following links while viewing a comment. While a
  comment is highlighted you can press &lt;kbd&gt;l&lt;/kbd&gt; to follow a link; if
  there's more than one link in the comment a menu will be shown and you can
  select which one to follow.&lt;/li&gt;
&lt;li&gt;Added support for viewing polls. Polls seem to be few and far between on
  HackerNews, so when I published the first version of OSHit I didn't have
  one to hand to test any code against. Eventually one turned up and broke
  OSHit (on purpose; I wanted to see when that happened) so I could then add
  the code to load polls and show them. Right now it just shows scores; I
  might do actual charts at some point.&lt;/li&gt;
&lt;li&gt;Added optional item numbers in the lists; turned on/off with
  &lt;kbd&gt;F4&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far all small things, but handy little improvements. There's still a nice
TODO list in the README and I will slowly work through it. Along with
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; these are two applications
that have absolutely turned into "daily drivers", so they're going to get a
lot of tweaking over the next few weeks, probably even months.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>textual-dominfo</title><link href="https://blog.davep.org/2024/01/15/textual-dominfo.html" rel="alternate"></link><published>2024-01-15T21:20:00+01:00</published><updated>2024-01-15T21:20:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-15:/2024/01/15/textual-dominfo.html</id><content type="html">&lt;p&gt;Last week I was wrestling with some Textual code, trying to get something to
lay out on the screen "just so". On the whole this isn't too tricky at all,
and for those times where it might feel tricky &lt;a href="https://textual.textualize.io/how-to/design-a-layout/"&gt;there's some advice
available on how to go about
it&lt;/a&gt;. But in this case
I was trying to do a couple of "on the edge" things and one thing I really
needed to know was what particular part of the display was being "caused" by
what container or widget&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Now, at the moment anyway, Textual doesn't have a full-blown devtools with
all the bells and whistles; not like in your average web browser. It does
have &lt;a href="https://textual.textualize.io/guide/devtools/"&gt;a devtools&lt;/a&gt;, but not
with all the fancy DOM-diving stuff the above would have needed.&lt;/p&gt;
&lt;p&gt;What I needed was the equivalent of &lt;code&gt;print&lt;/code&gt;-debugging but with a
point-and-ask interface. Now, I actually &lt;em&gt;do&lt;/em&gt; often do &lt;code&gt;print&lt;/code&gt;-debugging
with Textual apps only I use
&lt;a href="https://textual.textualize.io/api/app/#textual.app.App.notify"&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/a&gt;;
this time though &lt;code&gt;notify&lt;/code&gt; wasn't going to cut it.&lt;/p&gt;
&lt;p&gt;I needed something that would let me point at a widget and say &lt;em&gt;"show me
stuff about this"&lt;/em&gt;. Something that happens when the mouse hovers over a
widget. Something like... &lt;a href="https://textual.textualize.io/guide/widgets/#tooltips"&gt;a
tooltip&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;So that was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ancestors_with_self&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Suddenly I could hover my mouse over a bit of space on the screen and get a
"traceback" of sorts for what "caused" it.&lt;/p&gt;
&lt;p&gt;I posted this little hack to &lt;code&gt;#show-and-tell&lt;/code&gt; on the &lt;a href="https://discord.gg/Enf6Z3qhVr"&gt;Discord
server&lt;/a&gt; and someone mentioned it would be
handy if it also showed the CSS for the widget too. That was simple enough
because every widget has a &lt;code&gt;styles.css&lt;/code&gt; property that is the CSS for the
widget, as a string.&lt;/p&gt;
&lt;p&gt;After that I didn't think much more about it; until today.&lt;/p&gt;
&lt;p&gt;Looking back, one thing I realised is that adding the CSS information
&lt;code&gt;on_mount&lt;/code&gt; wasn't quite good enough, as it would only show me the state of
CSS when the mount happened, not at the moment I inspect the widget. I
needed the tooltip to be dynamic.&lt;/p&gt;
&lt;p&gt;Thing is... Textual tooltips can't be functions (which would be the obvious
approach to make it dynamic); so there was no way to get this on-the-fly
behaviour I wanted.&lt;/p&gt;
&lt;p&gt;Except there was! The type of
&lt;a href="https://textual.textualize.io/api/widget/#textual.widget.Widget.tooltip"&gt;&lt;code&gt;tooltip&lt;/code&gt;&lt;/a&gt;
is &lt;code&gt;RenderableType&lt;/code&gt;. So that means I could assign it an object that is a
Rich renderable; that in turn means I could write a &lt;code&gt;__rich__&lt;/code&gt; method for a
class that wraps a widget and then reports back what it can see every time
it's called.&lt;/p&gt;
&lt;p&gt;In other words, via one step of indirection, I could get the &lt;em&gt;"call a
function each time"&lt;/em&gt; approach I was after!&lt;/p&gt;
&lt;p&gt;It works a treat too.&lt;/p&gt;
&lt;p&gt;All of which is a long-winded way of saying I now have a &lt;code&gt;print&lt;/code&gt;-debug-level
DOM inspector tool for when I'm building applications with Textual:&lt;/p&gt;
&lt;p&gt;&lt;img alt="textual-dominfo in action" src="/attachments/2024/01/15/textual-dominfo.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;If this sounds handy to you, you can grab the code too. Install it into your
development environment with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;textual-dominfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then attach it to your app or screen or some top-level widget you're
interested in via &lt;code&gt;on_mount&lt;/code&gt;; for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual_dominfo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DOMInfo&lt;/span&gt;
    &lt;span class="n"&gt;DOMInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then hover away with that mouse cursor and inspect all the things!
Whatever you do though, &lt;em&gt;don't&lt;/em&gt; make it part of your runtime, and don't keep
it installed; just make it a development dependency.&lt;/p&gt;
&lt;p&gt;The source can be found &lt;a href="https://github.com/davep/textual-dominfo"&gt;over on
GitHub&lt;/a&gt; and the package is, as
mentioned above, &lt;a href="https://github.com/davep/textual-dominfo"&gt;over on PyPi&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;ObPedant: Containers are widgets, but it's often helpful to make a
distinction between widgets that exist just to control the layout of the
widgets inside them, and widgets that exist to actually do or show
stuff.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="PyPi"></category><category term="Python"></category><category term="coding"></category><category term="Textual"></category></entry><entry><title>textual-countdown</title><link href="https://blog.davep.org/2024/01/11/textual-countdown.html" rel="alternate"></link><published>2024-01-11T22:52:00+01:00</published><updated>2024-01-11T22:52:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-11:/2024/01/11/textual-countdown.html</id><content type="html">&lt;p&gt;The idea for this one popped into my head while on the bus back from Textual
Towers this evening. So after dinner and some nonsense on TV I had to visit
my desk and do a quick hack.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://github.com/davep/textual-countdown"&gt;&lt;code&gt;textual-countdown&lt;/code&gt;&lt;/a&gt;, a
subtle but I think useful countdown widget for Textual applications.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Textual Countdown in action" src="/attachments/2024/01/11/textual-countdown.gif"&gt;&lt;/p&gt;
&lt;p&gt;The idea is that you compose it somewhere into your screen, and when you
start the countdown the bar highlights and then starts to shrink down to
"nothing" in the middle of its display. When the countdown ends a message is
posted so you can then perform the task that was being waited for in an
event handler.&lt;/p&gt;
&lt;p&gt;Not really a novel thing, I've seen this kind of thing before on the web;
I'm sure we all have. I just thought it would be a fun idea for Textual
applications too.&lt;/p&gt;
&lt;p&gt;I envisage using this where, perhaps, an application needs to wait for an
API-visiting cooldown period, or perhaps as a subtle countdown for a
question in a quiz; something like that.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like it's something useful for your Textual
applications, &lt;a href="https://pypi.org/project/textual-countdown/"&gt;it's now available from
PyPi&lt;/a&gt; and, of course, the
source is over &lt;a href="https://github.com/davep/textual-countdown"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="PyPi"></category><category term="Python"></category><category term="coding"></category><category term="Textual"></category></entry><entry><title>Orange Site Hit v0.2.0</title><link href="https://blog.davep.org/2024/01/07/oshit-0-2-0.html" rel="alternate"></link><published>2024-01-07T09:50:00+00:00</published><updated>2024-01-07T09:50:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-07:/2024/01/07/oshit-0-2-0.html</id><content type="html">&lt;p&gt;This is actually the second release of OSHit since &lt;a href="/2024/01/01/oshit.html"&gt;I first announced it a
week back&lt;/a&gt;, and I'll get to that other release in a
moment.&lt;/p&gt;
&lt;p&gt;I've just published v0.2.0, which isn't a very substantial release, but
which bumps the required version of Textual to
&lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.1"&gt;v0.47.1&lt;/a&gt; and
has some fun with &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.0"&gt;the new nested CSS
feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Underlying the point of this release was me taking a &lt;em&gt;"real world"&lt;/em&gt;
application of mine and nesting as much of the CSS within it as possible, in
part to get a feel for how and when it's useful, but also to give it a
proper test in a &lt;em&gt;"proper"&lt;/em&gt; application. In doing so &lt;a href="https://github.com/Textualize/textual/issues/3969"&gt;I think I've found one
bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dogfooding is always a good idea.&lt;/p&gt;
&lt;p&gt;The main visible change in this release is I've played around with the look
of the comments dialog a bit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OSHit you have comments" src="/attachments/2024/01/07/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm still narrowing this down, but I think I prefer this look to what I
started out with.&lt;/p&gt;
&lt;p&gt;Another change I made was also to the comments dialog. Before, if you
performed the &lt;em&gt;"expand comments"&lt;/em&gt; action on a comment card that already had
its comments expanded, it would move focus to the first child comment; this
was a deliberate choice that felt right at the time. Having used the app for
a few days now I've realised that making it an open/close toggle is far more
useful. So that's what I've done.&lt;/p&gt;
&lt;p&gt;Now... as for &lt;a href="https://github.com/davep/oshit/releases/tag/v0.1.1"&gt;the previous
release&lt;/a&gt; I mentioned
above. That was a fun one.&lt;/p&gt;
&lt;p&gt;Back when I released v0.1.0 some joker decided that it would be fun to
&lt;a href="https://news.ycombinator.com/item?id=38831083"&gt;submit the blog post about it to the Orange
Site&lt;/a&gt;. The comments there
went as you'd expected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some riffed off the opening paragraph, ignoring the tool itself.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in self-reflective way.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in a &lt;em&gt;"I never see the problem"&lt;/em&gt;
  way.&lt;/li&gt;
&lt;li&gt;One or two did the usual &lt;em&gt;"why even bother building that when
  &lt;code&gt;$TOOL_OF_CHOICE&lt;/code&gt; exists?"&lt;/em&gt; dance to show their terminal purity.&lt;/li&gt;
&lt;li&gt;One or two posted genuinely useful links to other similar projects.&lt;/li&gt;
&lt;li&gt;The biggest tree of comments was kind of a fight.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One comment caught my eye though; someone reported having a problem running
it. My initial thought on reading it was &lt;em&gt;"my dude, seriously, you're going
to report the problem in some random comment on HN rather than raise an
issue with the author?!?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For once &lt;a href="https://github.com/davep/oshit/issues/2"&gt;I was wrong to be so cynical&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, yeah, that was the reminder I needed that I'd been intentionally
reckless while writing the original code, and hadn't &lt;a href="https://github.com/davep/oshit/pull/4"&gt;gone back to the API
code I'd written and made it behave&lt;/a&gt;
before doing the initial release.&lt;/p&gt;
&lt;p&gt;All of which is to say: if you run into a problem with some FOSS project, be
like &lt;a href="https://github.com/mihaitodor"&gt;@mihaitodor&lt;/a&gt;. Issue that thing so the
developer gets to know about it; don't assume they'll be reading some random
comment section, social media site or Discord server!&lt;/p&gt;
&lt;p&gt;That and don't make 500+ HTTP requests at once; that might not end well for
some.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Orange Site Hit</title><link href="https://blog.davep.org/2024/01/01/oshit.html" rel="alternate"></link><published>2024-01-01T10:17:00+00:00</published><updated>2024-01-01T10:17:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-01-01:/2024/01/01/oshit.html</id><content type="html">&lt;p&gt;I know I'm not alone in having a relationship with &lt;a href="https://news.ycombinator.com/"&gt;the orange
site&lt;/a&gt; that is... weird. I generally dislike
the culture there, it's almost impossible to read any of the comments
without being frustrated about the industry I work in or am adjacent to and
some of the people who inhabit it; but as a link aggregator of stuff I might
find interesting... I honestly can't think of anywhere better. So, yes, I've
been a fairly avid reader of HackerNews for many years, and have even had an
account there for over 4 years.&lt;/p&gt;
&lt;p&gt;Given this, for a wee while now, I've been meaning to knock up a
terminal-based client for it using
&lt;a href="https://textual.textualize.io/"&gt;Textual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So after work on &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt; settled down I got
the urge to start a new pet project (not abandoning Tinboard, I'm still
going to be tweaking and extending it of course) and finally knocking up
that client seemed like the one.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Orange Site Hit&lt;/em&gt; is the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OShit" src="/attachments/2024/01/01/oshit-index.png"&gt;&lt;/p&gt;
&lt;p&gt;It's worth making clear from the very start: this is a read-only reader.
There is no logging in, there is no voting, there is no posting of things.
This is a client built with &lt;a href="https://github.com/HackerNews/API"&gt;their own
API&lt;/a&gt; and it doesn't provide such a thing;
at least not now and despite me seeing past promises that this will change,
there's no API for doing that sort of thing.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The idea of this application is you can run it up in the terminal, check the
top, best and latest from the categories provided by the API, perhaps dive
off into your web browser if needed, and then got on with other things.&lt;/p&gt;
&lt;p&gt;It's there for when you're in the terminal you just &lt;em&gt;need&lt;/em&gt; your hit of the
orange site.&lt;/p&gt;
&lt;p&gt;The main screen of the app revolves around the index of items, most of which
are going to be stories. You can see an example of that above. For people
who prefer things to be slightly less cramped, I've also added a "relaxed
layout" mode too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The index in relaxed mode" src="/attachments/2024/01/01/oshit-index-relaxed.png"&gt;&lt;/p&gt;
&lt;p&gt;From the index you can head off into your web-browser by hitting
&lt;kbd&gt;Enter&lt;/kbd&gt; on any item; if the item is a story that links to somewhere
that link will be opened; if it's something more like &lt;em&gt;AskHN&lt;/em&gt;, or a job,
it'll open the related page on HackerNews itself.&lt;/p&gt;
&lt;p&gt;Pressing &lt;kbd&gt;u&lt;/kbd&gt; with an item selected will let you view the details
for the user who posted the item:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the details of a user" src="/attachments/2024/01/01/oshit-user-dialog.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're the sort of person who wants to torture themselves by reading the
comments (oh come on we all do it!), there's a comment reader/navigator too.
With an item selected press &lt;kbd&gt;c&lt;/kbd&gt; and the comment dialog will open:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the real meat of HackerNews" src="/attachments/2024/01/01/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; the navigation within that dialog is fine; although I can see some
scope for improvement. At the moment it uses a widget-per-comment (actually,
it's at least 4 widgets per comment), which is fine and Textual handles that
without an issue, even on items with lots of comments, but longer-term I can
see me having some fun using &lt;a href="https://textual.textualize.io/guide/widgets/#line-api"&gt;the line
API&lt;/a&gt; to build a
super-efficient comment presentation and navigation widget.&lt;/p&gt;
&lt;p&gt;That's it for now; it feels like a good v0.1.0 spot to be in. There are a
bunch of things I still want to do with it (better cleaning up of the text,
perhaps with some markup support so links get handled, etc; plus lots of
ways of searching for stuff), but I felt it was in a place where I could
start using it.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/oshit/"&gt;from PyPi&lt;/a&gt;. The
&lt;a href="https://github.com/davep/oshit"&gt;source is available over on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Yes, there are lots of clients that do all sorts of HTML-scraping of
the actual website to make this possible; this ain't that. This ain't
going to be that.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.4.0</title><link href="https://blog.davep.org/2023/12/25/tinboard-0-4-0.html" rel="alternate"></link><published>2023-12-25T10:43:00+00:00</published><updated>2023-12-25T10:43:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-25:/2023/12/25/tinboard-0-4-0.html</id><content type="html">&lt;p&gt;Although it's not planned this way, so far it looks like I'm on a "every
other day" release cycle with Tinboard right now! Today's release is a small
but handy one, I think.&lt;/p&gt;
&lt;p&gt;Thanks to the handy little library
&lt;a href="https://github.com/asweigart/pyperclip"&gt;&lt;code&gt;pyperclip&lt;/code&gt;&lt;/a&gt; I've added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to copy a bookmark's URL to the clipboard.&lt;/li&gt;
&lt;li&gt;URL field autofill if you go to add a new bookmark and the clipboard
  appears to have a valid URL in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="The code for copying to the clipboard" src="/attachments/2023/12/25/copy-to-clipboard.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;At the moment the copy facility is just a straightforward copy of the URL,
nothing else. At some point I may add an extended copy option, which will
open a dialog with a bunch of options of what to copy from the bookmark, and
perhaps also how to format it or something. Like, often, if I'm copying a
bookmark's URL, it's because I want to paste it into some Markdown document,
or some location that will handle Markdown markup.&lt;/p&gt;
&lt;p&gt;Perhaps that'll turn up in v0.5.0 in a couple of days? ;-)&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.3.0</title><link href="https://blog.davep.org/2023/12/23/tinboard-0-3-0.html" rel="alternate"></link><published>2023-12-23T08:49:00+00:00</published><updated>2023-12-23T08:49:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-23:/2023/12/23/tinboard-0-3-0.html</id><content type="html">&lt;p&gt;It looks like I'm in a wee period of small incremental changes and release
of &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt;. This morning I've release v0.3.0,
which has a couple of small but useful changes.&lt;/p&gt;
&lt;p&gt;The first is more of a cosmetic thing. The &lt;a href="https://textual.textualize.io/widgets/footer/"&gt;&lt;code&gt;Footer&lt;/code&gt; widget in
Textual&lt;/a&gt; is handy for showing
the current keyboard bindings in a given context, but it can get massively
cluttered very quickly (we do have plans to revisit this); in Tinboard this
clutter creep was turning into a thing.&lt;/p&gt;
&lt;p&gt;So I've removed almost every binding from being displayed in the &lt;code&gt;Footer&lt;/code&gt;,
and have placed an emphasis on the user pressing &lt;kbd&gt;F1&lt;/kbd&gt; to get
context-sensitive help, and have also left the most useful bindings in the
footer with very minimal descriptions.&lt;/p&gt;
&lt;p&gt;Given that this is a keyboard-first application, and I've tried to make the
bindings easy to remember, I think it's going to make more sense to do it
like this, and will make for a tidier UI too.&lt;/p&gt;
&lt;p&gt;There is one disadvantage here of course: by removing the display of
bindings from the footer, the mouse-heavy user becomes disadvantaged; if a
particular binding doesn't have a UI feature that favours the mouse to cover
it too there's no way to initiate that action with the mouse. I'm going to
think on this a little. Again, Tinboard is designed for &lt;em&gt;me&lt;/em&gt; first and
foremost, and my preference is to be keyboard-first when using the
application; but finding a good compromise would be advantageous when it
comes to advising people asking about Textual application design.&lt;/p&gt;
&lt;p&gt;The second change is a simple but useful one. I've added a toggle of the
sort order of the tags menu in the left-hand column (bound to
&lt;kbd&gt;F4&lt;/kbd&gt;). Right now it simply toggles between alphabetical order, or
bookmark count order (most to least). At some point I might make it more of
a cycle than a toggle, but this serves my purposes for now.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Tinboard v0.2.0</title><link href="https://blog.davep.org/2023/12/21/tinboard-0-2-0.html" rel="alternate"></link><published>2023-12-21T09:29:00+00:00</published><updated>2023-12-21T09:29:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2023-12-21:/2023/12/21/tinboard-0-2-0.html</id><content type="html">&lt;p&gt;Following on from &lt;a href="/2023/12/19/tinboard.html"&gt;the initial full release a couple of days
ago&lt;/a&gt;, I've just &lt;a href="https://github.com/davep/tinboard/releases/tag/v0.2.0"&gt;released v0.2.0 of
Tinboard&lt;/a&gt;. There's
just one small change in this, but I think it's a really useful one.&lt;/p&gt;
&lt;p&gt;In the top-left corner of the screen there's a menu of main filters, letting
you switch between seeing all bookmarks, or a combination of read, unread,
public, private, etc... In using the application I quickly realised that it
would be handy to have bookmark counts in that menu.&lt;/p&gt;
&lt;p&gt;So I added that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Counts in the filters menu" src="/attachments/2023/12/21/filters-menu.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;These counts are a little different from those in the tags list, in that
they always show the number of matching bookmarks amongst &lt;em&gt;all recorded
bookmarks&lt;/em&gt;, not just those currently on display (and so subject to any sort
of filter that's in play).&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; this is the right approach here. I know for sure that that's what
I want from this, and I am writing this for me after all...&lt;/p&gt;
&lt;p&gt;What's handy about this is that it makes it easier for me to see how many
bookmarks haven't been tagged, and also how many I haven't looked back over
and marked as read. This is already helping me get to untagged-zero.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry></feed>