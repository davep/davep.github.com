<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.davep.org</title><link href="https://blog.davep.org/" rel="alternate"></link><link href="https://blog.davep.org/feeds/all.atom.xml" rel="self"></link><id>https://blog.davep.org/</id><updated>2025-03-24T14:17:00+00:00</updated><subtitle>Code, Emacs, VR, Stuff...</subtitle><entry><title>ng2web v1.0.0</title><link href="https://blog.davep.org/2025/03/24/ng2web.html" rel="alternate"></link><published>2025-03-24T14:17:00+00:00</published><updated>2025-03-24T14:17:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-03-24:/2025/03/24/ng2web.html</id><content type="html">&lt;p&gt;It pretty much all started with this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="k"&gt;*&lt;/span&gt; Revision 1.1  1996/02/15 18:57:13  davep
 &lt;span class="k"&gt;*&lt;/span&gt; Initial revision
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's from the rcs log &lt;a href="https://github.com/davep/w3ng/blob/master/w3ng.c"&gt;for the source for
&lt;code&gt;w3ng&lt;/code&gt;&lt;/a&gt;, a tool I write so
I could read Norton Guide files in my web browser, served by Apache running
on my GNU/Linux server in my office. The tool itself was written as a
&lt;a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;CGI&lt;/a&gt; tool (remember
then?).&lt;/p&gt;
&lt;p&gt;I believe I posted about this to &lt;code&gt;comp.lang.clipper&lt;/code&gt; and pretty quickly some
folk asked if it might be possible to do a version of that would write the
whole guide as a collection of HTML files for static hosting, rather than
serving them from cgi-bin utility. That seemed like a sensible idea and so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="k"&gt;*&lt;/span&gt; Revision 1.1  1996/03/16 09:49:00  davep
 &lt;span class="k"&gt;*&lt;/span&gt; Initial revision
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/davep/ng2html/blob/master/ng2html.c"&gt;&lt;code&gt;ng2html&lt;/code&gt;&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;Fast forward around a quarter of a decade and I decided it would be fun to
write a library for Python that reads Norton Guide files, and a tool called
&lt;code&gt;ng2web&lt;/code&gt; was the first test I wrote of it, designed as a more flexible
replacement for &lt;code&gt;ng2html&lt;/code&gt;. I've tweaked and tinkered with the tool since I
first created it but never actually "finished" it.&lt;/p&gt;
&lt;p&gt;That's changed today. I've just released v1.0.0 of &lt;code&gt;ng2web&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A page generated with ng2web" src="/attachments/2025/03/24/ng2web.png"&gt;&lt;/p&gt;
&lt;p&gt;If turning one or more Norton Guides into static websites seems like the
sort of thing you want to be doing, &lt;a href="https://blog.davep.org/ng2web/"&gt;take a look at the
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ng2web is licensed GPL-3.0 and available &lt;a href="https://github.com/davep/ng2web"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/ng2web/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that has
&lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ng2web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;ng2web&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ng2web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="Norton Guide"></category></entry><entry><title>AgiNG v0.3.0</title><link href="https://blog.davep.org/2025/03/22/aging-0-3-0.html" rel="alternate"></link><published>2025-03-22T09:30:00+00:00</published><updated>2025-03-22T09:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-03-22:/2025/03/22/aging-0-3-0.html</id><content type="html">&lt;p&gt;I've &lt;a href="https://github.com/davep/aging/releases/tag/v0.3.0"&gt;just released AgiNG
v0.3.0&lt;/a&gt;. The main focus
of this release was to get some searching added to the application. Similar
to what I added to &lt;a href="https://github.com/davep/weg"&gt;WEG&lt;/a&gt; back in the day, I
wanted three types of searching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current entry search.&lt;/li&gt;
&lt;li&gt;Current guide-wide search.&lt;/li&gt;
&lt;li&gt;All registered guides-wide search.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current entry search is done with a simple modal input, and for now the
searching is always case-insensitive (I was going to add a switch for this
but it sort of felt unnecessary and I liked how clean the input is).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entry search" src="/attachments/2025/03/22/entry-search.png"&gt;&lt;/p&gt;
&lt;p&gt;The search is started by pressing &lt;kbd&gt;/&lt;/kbd&gt;, and if a hit is found
&lt;kbd&gt;n&lt;/kbd&gt; will take you through all subsequent matches.&lt;/p&gt;
&lt;p&gt;As always, if you're not sure of the keys, you'll find them in the help
screen or via the command palette:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Looking up search in the command palette" src="/attachments/2025/03/22/entry-search-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;Guide-wide and all-guide searching is done in the same dialog. To search
guide-wide you enter what you want to find and untick &lt;em&gt;"All Guides"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Setting up a guide search" src="/attachments/2025/03/22/guide-wide-setup.png"&gt;&lt;/p&gt;
&lt;p&gt;With that, the search will stick to the current guide.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Guide-wide search running" src="/attachments/2025/03/22/guide-wide-running.png"&gt;&lt;/p&gt;
&lt;p&gt;As will be obvious, searching all guides that have been registered with
AgiNG is as simple as ticking &lt;em&gt;"All Guides"&lt;/em&gt;. Then when you search it'll
take a walk through every entry of every guide you've added to the guide
directory in the application.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gide-wide searching" src="/attachments/2025/03/22/guide-wide-search.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;Global searching is accessed with &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;/&lt;kbd&gt; or via the
command palette.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Finding global search" src="/attachments/2025/03/22/global-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;With this added, I think that's most of the major functionality I wanted for
AgiNG. I imagine there's a few more tweaks I'll think of (for example: I
think adding regex search to the global search screen could be handy), but I
don't think there's any more big features it needs.&lt;/p&gt;
&lt;p&gt;AgiNG can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/aging/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;aging&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;aging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/aging"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="Norton Guide"></category></entry><entry><title>AgiNG</title><link href="https://blog.davep.org/2025/03/12/aging.html" rel="alternate"></link><published>2025-03-12T08:00:00+00:00</published><updated>2025-03-12T08:00:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-03-12:/2025/03/12/aging.html</id><content type="html">&lt;p&gt;&lt;img alt="AgiNG" src="/attachments/2025/03/12/aging-social-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;It seems I really do still have this need to create new terminal-based
projects at the moment. There's been
&lt;a href="/2025/01/03/braindrop.html"&gt;Braindrop&lt;/a&gt;, then
&lt;a href="/2025/01/25/peplum.html"&gt;Peplum&lt;/a&gt;, then after that came
&lt;a href="/2025/02/14/hike.html"&gt;Hike&lt;/a&gt;. While I'm still tweaking and adding to them,
and also using them to refine &lt;a href="https://github.com/davep/textual-enhanced"&gt;a wee library I'm building up that forms the
core of my latest apps&lt;/a&gt;, I felt I
still had this one app that I &lt;em&gt;needed&lt;/em&gt; to finally build.&lt;/p&gt;
&lt;p&gt;Since the 1990s I've had this mild obsession with &lt;a href="https://www.davep.org/norton-guides/"&gt;building tools for
maintaining access to Norton Guide
files&lt;/a&gt;. I've written readers for
&lt;a href="https://github.com/davep/eg"&gt;GNU/Linux (which also works on macOS too)&lt;/a&gt;,
&lt;a href="https://github.com/davep/eg-OS2"&gt;OS/2&lt;/a&gt;,
&lt;a href="https://github.com/davep/weg"&gt;Windows&lt;/a&gt;, &lt;a href="https://github.com/davep/eg.el"&gt;GNU
Emacs&lt;/a&gt;, and also or the web (in multiple
incarnations). Those builds have covered a few languages, including C, C++,
Pascal, JavaScript and Emacs Lisp.&lt;/p&gt;
&lt;p&gt;I'd never written a Python library or application for it though.&lt;/p&gt;
&lt;p&gt;So when I first saw Textual mentioned in passing on Twitter a few years
back, way back in the 0.1 days, I thought that could be the thing that would
push me over the edge. In anticipation of that, back in 2021, I initially
developed &lt;a href="https://blog.davep.org/ngdb.py/"&gt;&lt;code&gt;ngdb.py&lt;/code&gt;&lt;/a&gt;. This is a library
that provides the core Norton Guide reading code for Python applications and
could form the basis for other tools.&lt;/p&gt;
&lt;p&gt;As a test for this I then wrote &lt;a href="https://github.com/davep/ng2web"&gt;&lt;code&gt;ng2web&lt;/code&gt;&lt;/a&gt;
(which works, but I think still needs a bit of tidying up -- something I'm
aiming to do in the next few weeks).&lt;/p&gt;
&lt;p&gt;Meanwhile, the journey with Textual itself &lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;kicked
off&lt;/a&gt;, happened, and &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;came to an
end&lt;/a&gt;; and yet somehow I'd never got
round to building the thing I'd initially looked at Textual for: a
terminal-based Norton Guide reader that looked nice and modern (by terminal
standards). When I initially joined Textualize the owner had actually said
they wanted me to build this as test of the framework, to essentially start
out by employing me to create some Free Software that would help dogfood the
library, but that seemed to get forgotten.&lt;/p&gt;
&lt;p&gt;Fast forward to the start of this month and I finally felt it was time to
tackle this. The result is &lt;a href="https://github.com/davep/aging"&gt;AgiNG&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AgiNG in action" src="/attachments/2025/03/12/aging-textual-dark.png"&gt;&lt;/p&gt;
&lt;p&gt;As of v0.1.0 it has most of the features you'd expect from a usable Norton
Guide reader, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An ability to add guide files to an in-application directory.&lt;/li&gt;
&lt;li&gt;The ability open and navigate a guide.&lt;/li&gt;
&lt;li&gt;Full see-also support, etc.&lt;/li&gt;
&lt;li&gt;Full translation of characters as were under MS-DOS into the terminal.&lt;/li&gt;
&lt;li&gt;The ability to copy entry text or source to the clipboard.&lt;/li&gt;
&lt;li&gt;The ability to copy save entry text or source to a file.&lt;/li&gt;
&lt;li&gt;Access to a guide's credits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="AgiNG showing a long entry" src="/attachments/2025/03/12/aging-long-entry.png"&gt;&lt;/p&gt;
&lt;p&gt;I still need to write some proper documentation for the application, but
meanwhile all commands and key shortcuts can be discovered either via the
help screen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="AgiNG help" src="/attachments/2025/03/12/aging-help-screen.png"&gt;&lt;/p&gt;
&lt;p&gt;or by pulling up the command palette:&lt;/p&gt;
&lt;p&gt;&lt;img alt="AgiNG command palette" src="/attachments/2025/03/12/aging-command-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;Hopefully the workings of the application will be fairly obvious to anyone
who is familiar with Norton Guide files; if anything isn't making sense &lt;a href="https://github.com/davep/aging/discussions/categories/q-a"&gt;I'm
more than happy to answer
questions&lt;/a&gt; or
&lt;a href="https://github.com/davep/aging/discussions/categories/ideas"&gt;take suggestions for
improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One wee feature I want to call out, that I felt was important to add, was a
"classic view" facility. The thing with Norton Guide files is they were
mostly created in the very late 1980s and early-to-mid 1990s. People would
often get creative with the colouring within them, but in many cases the
colouring assumed the default Norton Guide application. Its colours were
white text on a blue background. So sometimes other colouring was done
assuming that background.&lt;/p&gt;
&lt;p&gt;You can see an example of this here, with an entry in a guide being viewed
using the default &lt;code&gt;textual-dark&lt;/code&gt; theme:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entry in textual-dark" src="/attachments/2025/03/12/textual-dark.png"&gt;&lt;/p&gt;
&lt;p&gt;Notice the colouring in the syntax section. This is more obvious if the
application is switched to one of the light themes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entry in solarized-light" src="/attachments/2025/03/12/solarized-light.png"&gt;&lt;/p&gt;
&lt;p&gt;With a nod to this issue in mind, I added the "classic view" for entries
(which is a sticky setting -- turn it on and it stays on until you turn it
off):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Classic view in action" src="/attachments/2025/03/12/classic-view.png"&gt;&lt;/p&gt;
&lt;p&gt;A little hard on the eyes, I think, but also filled with nostalgia!&lt;/p&gt;
&lt;p&gt;Talking of themes, all the usual application themes are available, here's a
wee selection:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nord" src="/attachments/2025/03/12/aging-nord.png"&gt;
&lt;img alt="Textual Light" src="/attachments/2025/03/12/aging-textual-light.png"&gt;
&lt;img alt="Gruvbox" src="/attachments/2025/03/12/aging-gruvbox.png"&gt;
&lt;img alt="Solarize Light" src="/attachments/2025/03/12/aging-solarized-light.png"&gt;
&lt;img alt="Monokai" src="/attachments/2025/03/12/aging-monokai.png"&gt;&lt;/p&gt;
&lt;p&gt;AgiNG is licensed GPL-3.0 and available &lt;a href="https://github.com/davep/aging"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/aging/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that has
&lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;aging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;aging&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;aging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Expect to see more updates in the near future; as with other recent projects
this is very much something I'm going to be dabbling with and improving as
time goes on.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;If you're wondering about the name, it's nothing more than a word that
happens to have &lt;code&gt;NG&lt;/code&gt; in it, and also a mild pun about this being an
ageing hypertext help system; with the spelling acknowledging Peter
Norton's nationality.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="Norton Guide"></category></entry><entry><title>MkDocs/mkdocstrings 404 CSS TIL update</title><link href="https://blog.davep.org/2025/02/28/mkdocs-gh-pages-redux.html" rel="alternate"></link><published>2025-02-28T22:23:00+00:00</published><updated>2025-02-28T22:23:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-02-28:/2025/02/28/mkdocs-gh-pages-redux.html</id><content type="html">&lt;p&gt;Following on from &lt;a href="/2025/02/28/documenting-fspicker.html"&gt;my post this
morning&lt;/a&gt;, regarding the problem I was
having with &lt;code&gt;_mkdocstrings.css&lt;/code&gt; being 404 any time I deployed by
documentation, build with &lt;code&gt;mkdocs&lt;/code&gt;/&lt;code&gt;mkdocstrings&lt;/code&gt;, to GitHub Pages...&lt;/p&gt;
&lt;p&gt;It's come to light that I was doing this on hard mode, pretty much.&lt;/p&gt;
&lt;p&gt;While trying to figure out the best way of deploying the docs, I'd stumbled
on &lt;code&gt;ghp-import&lt;/code&gt; and had been using that. On the other hand, MkDocs has it's
own command for doing the same thing: &lt;a href="https://www.mkdocs.org/user-guide/deploying-your-docs/"&gt;&lt;code&gt;mkdocs
gh-deploy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Timothée &lt;a href="https://github.com/mkdocstrings/mkdocstrings/discussions/742#discussioncomment-12351028"&gt;pointed out to
me&lt;/a&gt;
that he never runs into this problem, but he used this command. As it turns
out, if you use &lt;code&gt;mkdocs gh-deploy&lt;/code&gt; it creates the &lt;code&gt;.nojekyll&lt;/code&gt; file by
default.&lt;/p&gt;
&lt;p&gt;And how does it do this? It uses the &lt;code&gt;ghp-import&lt;/code&gt; code &lt;a href="https://github.com/mkdocs/mkdocs/blob/4c7404485f988f409ccaf42fefe705222ff5965a/mkdocs/commands/gh_deploy.py#L138"&gt;and uses a switch it
has to achieve exactly
this&lt;/a&gt;.
In fact... the command line version even has a switch for it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-n, --no-jekyll      Include a .nojekyll file in the branch.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is off by default, when you run the command itself, but I wish I'd
noticed this when I was first experimenting. O_o&lt;/p&gt;
&lt;p&gt;Anyway, thanks to Timothée's pointers, I've now managed to &lt;a href="https://github.com/davep/textual-fspicker/pull/39/files"&gt;simplify how I
build and publish the docs from
&lt;code&gt;textual-fspicker&lt;/code&gt;&lt;/a&gt;,
and I'll apply this to other projects too.&lt;/p&gt;</content><category term="Coding"></category><category term="documentation"></category><category term="GitHub"></category><category term="mkdocs"></category><category term="mkdocstrings"></category><category term="gh-pages"></category></entry><entry><title>Documenting textual-fspicker (plus a TIL)</title><link href="https://blog.davep.org/2025/02/28/documenting-fspicker.html" rel="alternate"></link><published>2025-02-28T11:45:00+00:00</published><updated>2025-02-28T11:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-02-28:/2025/02/28/documenting-fspicker.html</id><content type="html">&lt;p&gt;I've just made a wee update to
&lt;a href="https://github.com/davep/textual-fspicker"&gt;&lt;code&gt;textual-fspicker&lt;/code&gt;&lt;/a&gt;, my dialog
library for &lt;a href="https://textual.textualize.io"&gt;Textual&lt;/a&gt; which adds &lt;code&gt;FileOpen&lt;/code&gt;,
&lt;code&gt;FileSave&lt;/code&gt; and &lt;code&gt;SelectDirectory&lt;/code&gt; dialogs. There's no substantial change to
the workings of the library itself, but I have added something it's been
lacking for a long time: documentation!&lt;/p&gt;
&lt;p&gt;Well... that's not quite true, it's always had documentation. I'm an avid
writer of Python docstrings and I make a point of always writing them for
every class, function, method or global value as I write the code. As such
the low-level "API" documentation has always been sat there ready to be
published somehow, eventually.&lt;/p&gt;
&lt;p&gt;Meanwhile the description for how to use the library was mostly a pointer to
some example code inside the README. Not ideal, and something I really
wanted to improve at some point.&lt;/p&gt;
&lt;p&gt;Given I'm still on a bit of a coding spree in my spare time, I finally
decided to get round to using the amazing
&lt;a href="https://mkdocstrings.github.io"&gt;mkdocstrings&lt;/a&gt;, in conjunction with
&lt;a href="https://www.mkdocs.org"&gt;mkdocs&lt;/a&gt;, to &lt;a href="https://blog.davep.org/textual-fspicker/"&gt;get some better documentation up an
running&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The approach I decided to take with the documentation was to &lt;a href="https://blog.davep.org/textual-fspicker/using/"&gt;have a page
that gave some general information on how to use the
library&lt;/a&gt; and then also
&lt;a href="https://blog.davep.org/textual-fspicker/library-contents/base_dialog/"&gt;generate low-level documentation for the all the useful content of the
library from the
docstrings&lt;/a&gt;.
While latter isn't really useful to anyone wanting to use the library in
their own applications, it could be useful to anyone wanting to understand
how it hangs together at a lower-level, perhaps because they want to
contribute to or extend the library in some way.&lt;/p&gt;
&lt;p&gt;While writing some of the general guide took a bit of work, of course, the
work to get the documentation up and running and generating was simple
enough. The effort comes down to 3 rules in the
&lt;a href="https://github.com/davep/textual-fspicker/blob/ad6818c96816f2f1ad7a39909d276271af3f760d/Makefile"&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;
for the project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;##############################################################################&lt;/span&gt;
&lt;span class="c"&gt;# Documentation.&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;
&lt;span class="nf"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c"&gt;# Generate the system documentation&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mkdocs&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rtfm&lt;/span&gt;
&lt;span class="nf"&gt;rtfm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c"&gt;# Locally read the library documentation&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mkdocs&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publishdocs&lt;/span&gt;
&lt;span class="nf"&gt;publishdocs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;        &lt;span class="c"&gt;# Set up the docs for publishing&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;run&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ghp-import&lt;span class="w"&gt; &lt;/span&gt;--push&lt;span class="w"&gt; &lt;/span&gt;site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;rtfm&lt;/code&gt; target is useful for locally-serving the documentation so I can
live preview as I write things and update the code. The &lt;code&gt;publishdocs&lt;/code&gt; target
is used to create and push a &lt;code&gt;gh-pages&lt;/code&gt; branch for the repository, resulting
in the documentation being hosted by GitHub.&lt;/p&gt;
&lt;h2&gt;A wee problem&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE: &lt;a href="/2025/02/28/mkdocs-gh-pages-redux.html"&gt;I've since found out there's an easier way of fixing the issue&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is, however, where I ran into a wee problem. I noticed that the
locally-hosted version of the documentation looked great, but the version
hosted on GitHub Pages was... not so great. I was seeing a load of text
alignment issues, and also whole bits of text just not appearing at all.&lt;/p&gt;
&lt;p&gt;Here's an example of what I was seeing locally:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Good layout" src="/attachments/2025/02/28/good.png"&gt;&lt;/p&gt;
&lt;p&gt;and here's what I was seeing being served up from GitHub Pages:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bad layout" src="/attachments/2025/02/28/bad.png"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, in the "bad" version the &lt;code&gt;func&lt;/code&gt; label is missing from the
header, and the &lt;code&gt;Parameters&lt;/code&gt; and &lt;code&gt;Returns&lt;/code&gt; tables look quite messy.&lt;/p&gt;
&lt;p&gt;I spent a little bit of time digging and, looking in Safari's console, I
then noticed that I was getting a 404 on a file called &lt;code&gt;_mkdocstrings.css&lt;/code&gt;
in the &lt;code&gt;assets&lt;/code&gt; folder. Problem found!&lt;/p&gt;
&lt;p&gt;Only... was it though? If I looked in the &lt;code&gt;gh-pages&lt;/code&gt; local branch the file
was there (and with fine permissions). If I looked in the remote branch, it
was there too. Thinking it could be some odd browser problem I even tried to
grab the file back from the command line and it came back 404 as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Testing from the command line" src="/attachments/2025/02/28/http-grab.png"&gt;&lt;/p&gt;
&lt;p&gt;At this point it was getting kind of late so I decided I must have screwed
up somehow but I should leave it for the evening and head to bed. Before
doing so though &lt;a href="https://github.com/mkdocstrings/mkdocstrings/discussions/742"&gt;I decided to drop a question into the mkdocstrings
discussions to see if anyone could see where I'd messed
up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As it turns out, it looked like I hadn't messed up and the reply from the
&lt;a href="https://github.com/pawamoy"&gt;always super-helpful Timothée&lt;/a&gt; was, in effect,
&lt;em&gt;"yeah, that should work fine"&lt;/em&gt;. At least I wasn't the only one confused.&lt;/p&gt;
&lt;p&gt;Fast forward to this morning and, with breakfast and coffee inside me, I
decided to try and methodically get to the bottom of it. I &lt;a href="https://github.com/mkdocstrings/mkdocstrings/discussions/742#discussioncomment-12348912"&gt;wrote up the
current state of
understanding&lt;/a&gt;
and looked at what might be the common cause. The thing that stood out to me
was that this was a file that started with an underscore, so I did a quick
search for &lt;em&gt;"github pages underscore"&lt;/em&gt; and right away landed on &lt;a href="https://www.ianwootten.co.uk/2022/11/08/how-to-use-underscores-with-github-pages/"&gt;this
result&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bingo!&lt;/p&gt;
&lt;p&gt;That had to be it!&lt;/p&gt;
&lt;p&gt;A little bit of testing later and sure enough, the documentation hosted on
GitHub Pages looked exactly like the locally-hosted version.&lt;/p&gt;
&lt;p&gt;So, TIL: by default sites hosted by GitHub Pages will pretend that any asset
that starts with an underscore doesn't exist, unless you have a &lt;code&gt;.nojekyll&lt;/code&gt;
in the root of the repository, on the &lt;code&gt;gh-pages&lt;/code&gt; branch (or whatever branch
you decide to serve from).&lt;/p&gt;
&lt;p&gt;To make this all work I added &lt;code&gt;.nojekyll&lt;/code&gt; to
&lt;a href="https://github.com/davep/textual-fspicker/tree/ad6818c96816f2f1ad7a39909d276271af3f760d/docs/source"&gt;&lt;code&gt;docs/source&lt;/code&gt;&lt;/a&gt;
and added this to &lt;code&gt;mkdocs.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;exclude_docs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;!.nojekyll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All done!&lt;/p&gt;
&lt;p&gt;And now I've worked out a simple workflow for using &lt;code&gt;mkdocs&lt;/code&gt;/&lt;code&gt;mkdocstrings&lt;/code&gt;
for my own Python projects, in conjunction with GitHub Pages, I guess I'll
start to sprinkle it over other projects too.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="textual"></category><category term="documentation"></category><category term="GitHub"></category><category term="mkdocs"></category><category term="mkdocstrings"></category><category term="gh-pages"></category></entry><entry><title>Hike</title><link href="https://blog.davep.org/2025/02/14/hike.html" rel="alternate"></link><published>2025-02-14T09:22:00+00:00</published><updated>2025-02-14T09:22:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-02-14:/2025/02/14/hike.html</id><content type="html">&lt;p&gt;&lt;img alt="Hike" src="/attachments/2025/02/14/hike-social-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;The run of writing new terminal-based tools that I want still keeps going.
First there was &lt;a href="/2025/01/03/braindrop.html"&gt;Braindrop&lt;/a&gt;, then there was
&lt;a href="/2025/01/25/peplum.html"&gt;Peplum&lt;/a&gt;, and now, released today, there's
&lt;a href="https://github.com/davep/hike"&gt;Hike&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hike is yet another terminal-based Markdown browser. While it's far from the
first, and unlikely to be the last, it's mine and it looks and works exactly
how I need. Perhaps it'll be your sort of thing too?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hike viewing its README" src="/attachments/2025/02/14/hike-in-action.png"&gt;&lt;/p&gt;
&lt;p&gt;This initial release has a bunch of handy features, including things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command line where file names, URLs and commands can be entered.&lt;/li&gt;
&lt;li&gt;A persistent history for the command line.&lt;/li&gt;
&lt;li&gt;A local file browser.&lt;/li&gt;
&lt;li&gt;A simple bookmarking system.&lt;/li&gt;
&lt;li&gt;A browsing history.&lt;/li&gt;
&lt;li&gt;Commands for quickly loading and viewing files held on GitHub, GitLab,
  Codeberg and Bitbucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As there's a lot to discover in the application, I've tried to make the help
screen as comprehensive as possible:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hike help" src="/attachments/2025/02/14/hike-help.png"&gt;&lt;/p&gt;
&lt;p&gt;and there's also the command palette to help with discovering commands and
the keys that are associated with them:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in action" src="/attachments/2025/02/14/hike-command-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;Once again, themes are supported so no matter your taste you should find
something that's easy on your eyes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dark" src="/attachments/2025/02/14/hike-textual-dark.png"&gt;
&lt;img alt="Light" src="/attachments/2025/02/14/hike-textual-light.png"&gt;
&lt;img alt="Tokyo Night" src="/attachments/2025/02/14/hike-tokyo-night.png"&gt;
&lt;img alt="Solarized Light" src="/attachments/2025/02/14/hike-solarized-light.png"&gt;&lt;/p&gt;
&lt;p&gt;Hike is licensed GPL-3.0 and available &lt;a href="https://github.com/davep/hike"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/hike/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that has
&lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;hike
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;hike&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;hike
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Expect to see more updates in the near future; this is very much an ongoing
tinker project.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Peplum</title><link href="https://blog.davep.org/2025/01/25/peplum.html" rel="alternate"></link><published>2025-01-25T14:21:00+00:00</published><updated>2025-01-25T14:21:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-01-25:/2025/01/25/peplum.html</id><content type="html">&lt;p&gt;&lt;img alt="Peplum" src="/attachments/2025/01/25/peplum-social-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;I seem to be back in the swing of writing handy (for me) little
terminal-based applications again. Having not long since &lt;a href="/2025/01/03/braindrop.html"&gt;released
Braindrop&lt;/a&gt; (which I'm still working on and
tinkering with; it'll get more features in the near future, for sure), I had
an idea for another tool I'd like to have: something for looking through,
searching, and filtering &lt;a href="https://peps.python.org"&gt;Python PEPs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As with anyone who is interested in what's happening with Python itself, I
subscribe to the RSS feed of the latest Python PEPs, but I also wanted
something that would let me look back at older ones in a way that worked
&lt;em&gt;"just so"&lt;/em&gt; (&lt;em&gt;"just so" being "what feels right for me"&lt;/em&gt;, of course). Having
finished the main work on Braindrop I realised that the general layout of
its UI would work here, as would the filtering and searching approach I
used.&lt;/p&gt;
&lt;p&gt;From this idea &lt;a href="https://github.com/davep/peplum"&gt;Peplum&lt;/a&gt; was born!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Peplum in action" src="/attachments/2025/01/25/peplum.png"&gt;&lt;/p&gt;
&lt;p&gt;In this first release I've simply concentrated on all things to do with
grabbing the list of PEPs and presenting them in a useful way; adding
various forms of filtering them; adding the ability to search the metadata;
that sort of thing. I aim to keep developing this out over the next few
weeks and months, adding things like the ability to make notes, to locally
view the text of a PEP, perhaps even to mark PEPs as unread and read, etc.&lt;/p&gt;
&lt;p&gt;As I mentioned earlier, much of the design was driven by what I did with
Braindrop, so once again I've tried my very best to make it
keyboard-friendly and as much as possible keyboard-first. This sometimes
means having to work against how Textual works, but generally that isn't too
tricky to do. I'm once again making heavy use of the command palette and
also ensuring that all commands that have corresponding keyboard bindings
are documented in the help screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Peplum Help" src="/attachments/2025/01/25/peplum-help.png"&gt;&lt;/p&gt;
&lt;p&gt;There's enough common code between Peplum and Braindrop, when it comes to
this aspect of building a Textual application, that I'm minded to spin it
out into a little library of its own. I'm going to sit on this code for a
wee while and see how it develops, but I can see me taking this approach
with future applications and doing this will stop the need to copy and
paste.&lt;/p&gt;
&lt;p&gt;It might also be useful to others building with Textual.&lt;/p&gt;
&lt;p&gt;Also as with Braindrop, themes are a thing, and the theme setting is sticky
so you can set it the once and stick with that you like. Here's some
examples:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nord" src="/attachments/2025/01/25/peplum-nord.png"&gt;
&lt;img alt="Catppuccin Latte" src="/attachments/2025/01/25/peplum-catppuccin-latte.png"&gt;
&lt;img alt="Tokyo Night" src="/attachments/2025/01/25/peplum-tokyo-night.png"&gt;&lt;/p&gt;
&lt;p&gt;That's a small selection of the themes, with more to explore.&lt;/p&gt;
&lt;p&gt;While working on this project I managed to find a couple more bugs in
Textual, including &lt;a href="https://github.com/Textualize/textual/issues/5488"&gt;a fun way to get &lt;code&gt;transparent&lt;/code&gt; backgrounds to get out of
sync&lt;/a&gt; and also a way to
get &lt;a href="https://github.com/Textualize/textual/issues/5489"&gt;an easy crash out of &lt;code&gt;OptionList&lt;/code&gt; if it's set to &lt;code&gt;width:
auto&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What was even more fun was I sort of &lt;a href="https://fosstodon.org/@davep/113843011699020404"&gt;discovered a bug in the Python PEP
API&lt;/a&gt;. Thanks to
&lt;a href="https://fosstodon.org/@hugovk@mastodon.social"&gt;Hugo&lt;/a&gt; noticing my &lt;em&gt;"huh,
weird"&lt;/em&gt; post on Fosstodon, there's &lt;a href="https://github.com/python/peps/issues/4211"&gt;now an issue for
it&lt;/a&gt; as well as &lt;a href="https://github.com/python/peps/pull/4226"&gt;a PR in the
works&lt;/a&gt;. In retrospect I should
have raised an issue myself; instead I fell into that &lt;em&gt;"they obviously know
what they're doing so it must be like this for a reason"&lt;/em&gt; trap.&lt;/p&gt;
&lt;p&gt;Lesson relearned: it's always better to ask and get an answer, than to
assume a thing is how it is for a reason you don't know; which I guess is a
version of &lt;a href="https://en.wikipedia.org/wiki/Linus%27s_law"&gt;Linus' law&lt;/a&gt; really.&lt;/p&gt;
&lt;p&gt;So that's v0.1.0 out in the wild. I'm pleased with how it's turned out and
there's more to come. It's licensed GPL-3.0 and available &lt;a href="https://github.com/davep/peplum"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/peplum/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that
has &lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;peplum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;peplum&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;peplum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'm going to be making good use of this and working on it more; I hope it's
useful to someone else. :-)&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Braindrop</title><link href="https://blog.davep.org/2025/01/03/braindrop.html" rel="alternate"></link><published>2025-01-03T16:24:00+00:00</published><updated>2025-01-03T16:24:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2025-01-03:/2025/01/03/braindrop.html</id><content type="html">&lt;p&gt;&lt;img alt="Braindrop" src="/attachments/2025/01/03/braindrop-social-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;A touch over a year ago I did the initial work on an application called
&lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt;, a terminal-based client for
the Pinboard bookmarking service. I had a lot of fun building it and it was
an application that I used on a near-daily basis. However, around August
last year &lt;a href="/2024/08/18/paindrop.html"&gt;I realised it was time for me to move on from Pinboard and try
something new&lt;/a&gt;; based on various recommendations
I settled on &lt;a href="https://raindrop.io/"&gt;Raindrop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned &lt;a href="(/2024/08/18/paindrop.html)"&gt;in the other blog post&lt;/a&gt;, Raindrop
offered more or less everything I had with Pinboard and so the move was
fairly straightforward. The one thing that was missing though was an
application similar to Tinboard.&lt;/p&gt;
&lt;p&gt;So, late on last year, with my winter break approaching, I decided to start
from scratch and build a &lt;em&gt;"Tinboard for Raindrop"&lt;/em&gt;, which I'm calling
&lt;a href="https://github.com/davep/braindrop"&gt;Braindrop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was going to be a bit of an adventure too. Since &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;being laid off from
Textualize earlier in 2024&lt;/a&gt; I'd not
been following its development quite as closely as I used to, and had also
run into some issues and bugs with it since that time; moreover, as well as
various bugs appearing, some breaking changes had also been made. As such
this was going to be a process where I'd wrap my head around what's happened
with the framework over the prior six months or so.&lt;/p&gt;
&lt;p&gt;Given all this, over the past couple of weeks I've been spending a few hours
a day doing some for-pleasure coding and v0.1.0 of Braindrop is the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Main display" src="/attachments/2025/01/03/braindrop-main.png"&gt;&lt;/p&gt;
&lt;p&gt;As much as possible I've tried to keep the look and feel similar to that of
Tinboard, while also doing my best to avoid some of the &lt;em&gt;"ah, I wish I
hadn't done it this way"&lt;/em&gt; design decisions I'd made. As of the time of
writing I'm very pleased with the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The edit dialog" src="/attachments/2025/01/03/braindrop-edit.png"&gt;&lt;/p&gt;
&lt;p&gt;One thing I did want to do is ensure that the application was as
keyboard-friendly as possible, while also still allowing use of the mouse.
Textual can sometimes get that wrong and I ran into an example of this while
trying to ensure that there's good in-application help. Somewhat recently
Textual added a built-in help system which, sadly, can't easily be used by
and navigated by someone using the keyboard. So instead I've recreated the
help system I built into Tinboard, while adopting the documentation standard
that Textual had settled on (which, coincidentally, was kind of similar to
what I did in Tinboard to start with).&lt;/p&gt;
&lt;p&gt;&lt;img alt="The help dialog" src="/attachments/2025/01/03/braindrop-help.png"&gt;&lt;/p&gt;
&lt;p&gt;As with Tinboard, I've also made sure to make full use of the command
palette, with every action that makes sense having a keyboard hotkey as well
as a command in the palette. I also took things a little further and made
sure that the hotkeys are shown in the command palette for easier discovery.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette" src="/attachments/2025/01/03/braindrop-command-palette.png"&gt;&lt;/p&gt;
&lt;p&gt;I've also made sure that Textual's new theme system is available for easy
use; so out goes dark/light mode toggling and in comes a collection of
different themes. Here's a wee selection as an example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example theme 1" src="/attachments/2025/01/03/braindrop-theme-1.png"&gt;
&lt;img alt="Example theme 2" src="/attachments/2025/01/03/braindrop-theme-2.png"&gt;
&lt;img alt="Example theme 3" src="/attachments/2025/01/03/braindrop-theme-3.png"&gt;
&lt;img alt="Example theme 4" src="/attachments/2025/01/03/braindrop-theme-4.png"&gt;&lt;/p&gt;
&lt;p&gt;That's a small selection of the themes, with more to explore.&lt;/p&gt;
&lt;p&gt;There's a few more things I want to do before I consider the application
v1.0-ready, but it's already in use by me and working well. As I decide what
else I want to add to it &lt;a href="https://github.com/davep/braindrop/issues?q=is%3Aissue+is%3Aopen+label%3ATODO"&gt;I'm building up a list of TODO
items&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given that my day job these days is quite varied, isn't quite so
coding-intensive, and isn't always related to all things Python, it's
actually been fun to sit down and hack up a pure Python application from
scratch again. It's also helped me discover a couple or so fresh bugs in
Textual (which &lt;a href="https://github.com/Textualize/textual/issues/created_by/davep"&gt;I've
reported&lt;/a&gt;, of
course) and given me the opportunity to &lt;a href="https://github.com/Textualize/textual/pulls/davep"&gt;PR some trivial fixes as I've
noticed typos and stuff as I
go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway; that's v0.1.0 out in the wild. I'm pleased with how it's turned out
and there's more to come. It's licensed GPL-3.0 and available &lt;a href="https://github.com/davep/braindrop"&gt;via
GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/braindrop/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that
has &lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;braindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;braindrop&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;braindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this is useful to someone else. :-)&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Markdown all the things</title><link href="https://blog.davep.org/2024/11/04/markdown-all-the-things.html" rel="alternate"></link><published>2024-11-04T21:00:00+00:00</published><updated>2024-11-04T21:00:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-11-04:/2024/11/04/markdown-all-the-things.html</id><content type="html">&lt;p&gt;Recently I've been on a bit of a &lt;em&gt;"turn stuff into Markdown files and slap
them in an Obsidian Vault"&lt;/em&gt; trip. This kicked off a couple of months back
when I made a decision unrelated to coding.&lt;/p&gt;
&lt;p&gt;On and off, since my teenage years, I've kept journals. Since those teenage
years it's been more off than on, but a couple of times in my adult life
it's been really helpful to actually write one. The last time this happened
was early 2019. It was pretty vital I did that at the time and it was a
really sensible and helpful decision, and an approach to the situation I was
in that I'd recommend to anyone (and have done on occasion to anyone going
through the same thing).&lt;/p&gt;
&lt;p&gt;The actual motivation for starting that particular journal is long behind
me, but I'd got into the habit of writing it and so, until a couple or so
months back, I kept jotting something down every day. But I came to the
realisation that I didn't &lt;em&gt;need&lt;/em&gt; to and that it had become something of a
chore.&lt;/p&gt;
&lt;p&gt;I'd been using an application called &lt;a href="https://journey.cloud"&gt;Journey&lt;/a&gt;. It's
a great app, does the job well, but was also suffering from the creep of
"AI" (I've had a few apps ion my arsenal that don't need it, acquire a
useless "AI" feature). This privacy-problematic change of direction,
combined with the realisation that I didn't &lt;em&gt;need&lt;/em&gt; to write about my day,
every day, any more, made me decide it was time to stop and cancel the
subscription.&lt;/p&gt;
&lt;p&gt;Thankfully Journey has a pretty comprehensive export option so I used it and
didn't think too much more about it for a while.&lt;/p&gt;
&lt;p&gt;Meanwhile I also had a subscription to &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt; that
I didn't really use any more. Within it I had held a handful of years of
journal entries from a decade or so ago, along with other &lt;em&gt;"remember this
for some point in the future"&lt;/em&gt; stuff. For the longest time I was on some
really cheap tier that didn't exist any more, one that was low enough that I
didn't really notice the cost go out each month so I kept putting off
exporting things and closing it all down until &lt;em&gt;"next month"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then I got an email from them to say they were forcing me onto some new tier
that was more expensive. So that was the final straw there. I made an export
of what I had in Evernote and closed that account down too.&lt;/p&gt;
&lt;p&gt;A wee while went past and then I got to thinking that it might be
interesting to try and combine both these sources into one archived journal.
I had stuff from around 2010 to 2015, and I also had stuff from 2019 until
2024; the former in the Evernote archive and the latter in the Journey
archive. Surely I could write a couple of tools to turn that data into one
consolidated Obsidian Vault?&lt;/p&gt;
&lt;p&gt;Over the course of a couple of weekends
&lt;a href="https://github.com/davep/journey2md"&gt;&lt;code&gt;journey2md&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://github.com/davep/evernote2md"&gt;&lt;code&gt;evernote2md&lt;/code&gt;&lt;/a&gt; were born. While both
of those tools work differently, they're both designed to populate the same
Obsidian Vault. Once I was happy with this I did the mass conversion and I
was happy with the result.&lt;/p&gt;
&lt;p&gt;Now I have years of journal entries, all converted to Markdown files and
made available for reading via an application that lets me rummage through
history using dates and tags and all sorts of other searching.&lt;/p&gt;
&lt;p&gt;So I was happy with that and didn't give it much more though.&lt;/p&gt;
&lt;p&gt;Then last week I got to thinking...&lt;/p&gt;
&lt;p&gt;Twitter has turned into the worst place possible and I can't for the life of
me think why any right-thinking person who has an ounce of humanity or has
anything approaching a humanistic outlook on life would remain an active
user. Honestly I stuck it out longer than was sensible, but in June 2023 I
finally quit for good.&lt;/p&gt;
&lt;p&gt;Back when the &lt;a href="https://en.wikipedia.org/wiki/Acquisition_of_Twitter_by_Elon_Musk"&gt;new owner was
confirmed&lt;/a&gt;
I, like a lot of people, extracted my archive. It's since been sat in
storage doing nothing, yet there's a lot of data in there that could be
interesting to work with, or just to go back and look through. So last
week's thought was &lt;em&gt;"why don't I also turn this into an Obsidian Vault?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So I did...&lt;/p&gt;
&lt;p&gt;&lt;img alt="The graph of my Twitter Obsidian Vault" src="/attachments/2024/11/04/bird2glass.png"&gt;&lt;/p&gt;
&lt;p&gt;The tool I built to do this is
&lt;a href="https://github.com/davep/bird2glass"&gt;&lt;code&gt;bird2glass&lt;/code&gt;&lt;/a&gt;. As you'll see in &lt;a href="https://github.com/davep/bird2glass/blob/main/README.md"&gt;the
README&lt;/a&gt; it makes a
few assumptions about the state of Twitter archive dumps and also what a
user wants from this. Personally I'm pleased with the result.&lt;/p&gt;
&lt;p&gt;The main aim of the tool is to break the tweets down into a hierarchy of
year, month and day...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing a tweet" src="/attachments/2024/11/04/tweet-view.png"&gt;&lt;/p&gt;
&lt;p&gt;...and also to connect them with any account that was being replied to or
mentioned in some way...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing a user" src="/attachments/2024/11/04/user-view.png"&gt;&lt;/p&gt;
&lt;p&gt;This user view is handy when viewing backlinks, as it gives you a list of
all the tweets that mention that user (and, of course, if you're into
Obsidian's graph it will make for some interesting connections within
there).&lt;/p&gt;
&lt;p&gt;I sense there's more I can do with this, and I imagine I will continue to
tinker with it. Meanwhile though, if that sounds like something you'd
benefit from do feel free to grab it and play with it and hack on it. Keep
in mind the notes and assumptions that are in the README, and &lt;em&gt;really&lt;/em&gt; be
prepared for a lot of files to be created if you did a lot of tweeting like
I did (I do think that over 50,000 individual files for an Obsidian Vault is
a bit silly, if I'm honest).&lt;/p&gt;
&lt;p&gt;Meanwhile... I might need to look at other applications and think about how
I can turn the data into useful Markdown collections!&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="Twitter"></category><category term="Journey"></category><category term="Evernote"></category></entry><entry><title>Paindrop v1.0.0</title><link href="https://blog.davep.org/2024/08/18/paindrop.html" rel="alternate"></link><published>2024-08-18T10:57:00+01:00</published><updated>2024-08-18T10:57:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-08-18:/2024/08/18/paindrop.html</id><content type="html">&lt;p&gt;I was quite late discovering Pinboard; by the looks of things I created my
account and paid my first subscription for it in early 2019. Since then I've
been a pretty avid user and found it really useful. I've even written a
couple of clients for it (&lt;a href="https://github.com/davep/pinboard.el"&gt;one for
Emacs&lt;/a&gt; and &lt;a href="https://github.com/davep/tinboard"&gt;one for the
terminal&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;During that time it's had its fair share of hiccups and outages, but on the
whole I've found it a stable and useful service.&lt;/p&gt;
&lt;p&gt;The service does have its detractors, and concerns over its long-term
stability and how well it's maintained &lt;a href="https://news.ycombinator.com/item?id=34062802"&gt;are fairly
common&lt;/a&gt;. I half paid
attention to these, and had started to think about where I might go if there
was an issue.&lt;/p&gt;
&lt;p&gt;While maintaining and syncing bookmarks isn't exactly a difficult or
unsolved problem, and while it's also true that it could be fun to roll my
own solution, there are a couple of things I need that would make building
my own approach a bit of a chore.&lt;/p&gt;
&lt;p&gt;Things important to me are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An extension for any random browser I might find myself using&lt;/li&gt;
&lt;li&gt;A good mobile client for at least iOS and iPadOS&lt;/li&gt;
&lt;li&gt;A good API so I can write my own tools if I need to&lt;/li&gt;
&lt;li&gt;A clean and focused backend website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I kept these things in mind and kept an eye out but I'd never really felt
the need to actively start looking around.&lt;/p&gt;
&lt;p&gt;Then I &lt;a href="https://sfba.social/@peterme/112915495895055170"&gt;stumbled on this&lt;/a&gt;
after posting about &lt;a href="https://fosstodon.org/@davep/112925762265869565"&gt;another Pinboard
outage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That... yeah, that was the final push I needed to start to think seriously
about where to move and how.&lt;/p&gt;
&lt;p&gt;A couple of people suggested &lt;a href="https://raindrop.io"&gt;Raindrop&lt;/a&gt;, and from what
I could tell it was coming up as a pretty popular service that some Pinboard
users were migrating to. I had a look and it wasn't &lt;em&gt;quite&lt;/em&gt; what I was
after; but close.&lt;/p&gt;
&lt;p&gt;You see, there's two things I really like about Pinboard that Raindop didn't
seem to cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple support for "this shit is unread". I see things, I share to
  whatever Pinboard app I have on my phone or tablet, etc, and then I review
  some time later (normally in
  &lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Support for Private and Public pins. I've liked &lt;a href="https://pinboard.in/u:davep"&gt;having a feed of
  bookmarks I can let people see&lt;/a&gt; and Raindrop
  doesn't have this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I looked around at some blogs that talked about Pinboard vs Raindrop and
didn't see any that really dived into this particular aspect of migrating; I
also asked a couple of folk who'd made the move about this and they didn't
really have any insight (mainly because they didn't care about those
particular uses).&lt;/p&gt;
&lt;p&gt;One thing I did notice though was that Raindrop &lt;em&gt;does&lt;/em&gt; support making
individual collections public. So, if I was willing to sacrifice any other
uses for collections (a bookmark in Raindrop can only be in one collection),
I could simply have a &lt;em&gt;Public&lt;/em&gt; and a &lt;em&gt;Private&lt;/em&gt; collection and import pins
into the appropriate one. Also, unread pins could be left out of the
collections and I could use that to signify unread status.&lt;/p&gt;
&lt;p&gt;This seemed fine as I'm heavy on the tags anyway.&lt;/p&gt;
&lt;p&gt;Now... Raindrop has a pretty comprehensive import facility built in. I gave
it a try with Pinboard's backup file and it worked really well. That is...
really well except it just threw away the public/private/unread aspect of
the pins. There was only one thing for it then: I had to write my own
importer!&lt;/p&gt;
&lt;p&gt;Which brings me to &lt;a href="https://github.com/davep/paindrop"&gt;&lt;code&gt;Paindrop&lt;/code&gt;&lt;/a&gt;. It's a
quick hack but it does the job, and it does the import just how I wanted.
The result of the first test was pretty much spot on (in this image I'm
comparing what Raindrop says vs what Tinboard says I have in Pinboard):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparing Raindrop and Tinboard contents" src="/attachments/2024/08/18/raindrop-imports.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Usage is pretty straightforward. You create &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Private&lt;/code&gt;
collections in Raindrop, you create an app in Raindrop and get the access
token, you grab your Pinboard access token and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;paindrop&lt;span class="w"&gt; &lt;/span&gt;example:xxxxxxxxxxxxxxxxxxxx&lt;span class="w"&gt; &lt;/span&gt;xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the first parameter is the Pinboard access token and the second the
Raindrop access token.&lt;/p&gt;
&lt;p&gt;If all goes well, after a few moments, the importer should finish and you
should find that all of your pins have migrated to Raindrop, all public pins
are in the &lt;code&gt;Public&lt;/code&gt; collection and all private pins are in the &lt;code&gt;Private&lt;/code&gt;
collection. Any pins that were marked as unread will be &lt;em&gt;Unsorted&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note that if you used different names for your public and private
collections you can pass those names to &lt;code&gt;paindrop&lt;/code&gt; with the &lt;code&gt;--public&lt;/code&gt; and
&lt;code&gt;--private&lt;/code&gt; switches.&lt;/p&gt;
&lt;p&gt;If you're looking to move your bookmarking history out of Pinboard and want
to keep the same sort of structure I had I hope Paindrop will be useful to
you too.&lt;/p&gt;
&lt;p&gt;Paindrop can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/paindrop/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;paindrop&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;paindrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/paindrop"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: As for the name... originally it was &lt;code&gt;pin2rain&lt;/code&gt; but then &lt;a href="https://fosstodon.org/@darrenburns/112978377299333401"&gt;Darren Burns
pointed out the obvious and it had to
happen&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="pinboard"></category><category term="raindrop"></category></entry><entry><title>On to something new (redux) (redux)</title><link href="https://blog.davep.org/2024/06/16/on-to-something-new-redux-redux.html" rel="alternate"></link><published>2024-06-16T13:08:00+01:00</published><updated>2024-06-16T13:08:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-06-16:/2024/06/16/on-to-something-new-redux-redux.html</id><content type="html">&lt;p&gt;It's been a wee while since I wrote anything here (been about a month) so I
thought I'd make mention of what's going on.&lt;/p&gt;
&lt;p&gt;The main news is that I'm employed again!&lt;/p&gt;
&lt;p&gt;Once &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;the news about the Textual layoffs
hit&lt;/a&gt; I, of course, started the job
hunting process. This lasted for a wee while (and I have a couple of stories
about that -- perhaps I'll write them up one day). I officially became
"unemployed" on April the 1st (yeah, I know), and by the 23rd I had an offer
for a new position, which I accepted.&lt;/p&gt;
&lt;p&gt;As of the time of writing I've been in that position for a touch over 3
weeks and it's going really well. Right at this moment I'm doing zero Python
work (that will change, I strongly suspect) and, actually, for the first
time ever, I'm writing some TypeScript (it's tempting me to dive into that
some more).&lt;/p&gt;
&lt;p&gt;The team I'm working in are great and I'm also really impressed so far by
the practices they have in place relating to getting stuff done. It's
actually a refreshing change to work in a bigger organisation and actually
find it not massively frustrating!&lt;/p&gt;
&lt;p&gt;I'm also back to working from home full time. This isn't that big a deal for
me as I spent around 22 years doing so &lt;a href="2017/12/12/on_to_something_new.html"&gt;up until
2018&lt;/a&gt;, and of course it isn't that big
of a deal to many folk these days anyway thanks to the 2020- period. This
prompted me to finally clear out the spare room (I've only been in here a
touch under 5 years so of course there were a lot of "I'll sort those soon"
boxes and stuff in there), buy a second desk, and make a work-coding area
that is away from totally separate from my for-fun-coding area.&lt;/p&gt;
&lt;p&gt;This has turned out to be a &lt;em&gt;really&lt;/em&gt; good decision. I love my main hacking
space in the living room, and have done a lot of work there, but that was
always on the odd days here and there when I'd work at home. Now that
working at home is a full-time role it felt important to make the
distinction.&lt;/p&gt;
&lt;p&gt;Weirdly though, all of this means that I'm spending less time working on
personal stuff. When I was working at Textualize, most days, I'd be spending
the best part of 3 hours in the day getting to and from the office. I
thought that perhaps getting that time back would translate into having more
time to tinker with my own stuff. Actually what I'm finding I'm doing is I'm
spending the time on more general self-care and domestic things. This is a
good thing.&lt;/p&gt;
&lt;p&gt;Doubtless once things really settle down and I form my new routine I'll dive
back into FOSS coding more again, and perhaps &lt;a href="https://www.youtube.com/@davep-codes"&gt;get back to streaming while I
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile though you &lt;em&gt;can&lt;/em&gt; find me steaming many late evenings, &lt;a href="https://www.youtube.com/@DavePearson/streams"&gt;mucking
about on my PS5&lt;/a&gt;. Right at
this moment I'm finally playing all the way through &lt;a href="https://www.youtube.com/playlist?list=PLUY2FpMDyORBz0_ubHoJKT9xe3pvCTbRh"&gt;Just Cause
4&lt;/a&gt;
(a game I bought back in 2019 and never finished). In fact last night I
finished the main story.&lt;/p&gt;
&lt;p&gt;Expect a lot more PS5-based streaming nonsense over the next few months.&lt;/p&gt;
&lt;p&gt;One other change I have made is to my VR video publishing schedule. For the
longest time I had the time and was playing so much that I published a video
every day. This wasn't a schedule I set myself, this was more a case of I
was playing so much that to publish less frequently would mean there would
be a huge backlog. These days I'm back to working 5 days a week (previously
I was working 4 days) so I have to cram a little more into my weekends, and
also I want to try and do other things during weekends too. So recently &lt;a href="https://www.youtube.com/watch?v=eHko0fDZm7I"&gt;I
changed to an every-other-day
schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, really, that's about it. For now expect to see a bit less Python-based
content on here, and also quite a bit less Textual-based stuff too.
Currently my focus is elsewhere and it also seems that Textual is a bit of a
moving target recently, throwing in some fun new bugs and breaking changes
which are tricky to keep on top of. That said, you &lt;em&gt;will&lt;/em&gt; still find me in
the repo, lending a hand when I can, and of course in the Textual Discord
too; just don't expect to see me quite so omnipresent there, especially
during the work day.&lt;/p&gt;</content><category term="Life"></category><category term="work"></category><category term="YouTube"></category><category term="streaming"></category><category term="gaming"></category><category term="PS5"></category></entry><entry><title>Tinboard v0.14.0</title><link href="https://blog.davep.org/2024/05/14/tinboard-0-14-0.html" rel="alternate"></link><published>2024-05-14T08:02:00+01:00</published><updated>2024-05-14T08:02:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-05-14:/2024/05/14/tinboard-0-14-0.html</id><content type="html">&lt;p&gt;I've just released &lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; v0.14.0.
This release adds a &lt;a href="https://github.com/davep/tinboard/issues/49"&gt;feature that a user
requested&lt;/a&gt;, where you can set
the default values for the privacy and read-later status of a new bookmark:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The application settings dialog" src="/attachments/2024/05/15/app-settings.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;So, any time you create a new bookmark, the edit dialog will use those
values by default. It's a feature that makes perfect sense but I didn't
think to add it early on because... well, I set the defaults to my
preference.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Tinboard v0.12.0</title><link href="https://blog.davep.org/2024/04/18/tinboard-0-12-0.html" rel="alternate"></link><published>2024-04-18T16:46:00+01:00</published><updated>2024-04-18T16:46:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-18:/2024/04/18/tinboard-0-12-0.html</id><content type="html">&lt;p&gt;&lt;a href="https://github.com/davep/tinboard"&gt;Tinboard&lt;/a&gt; has turned into a tool I use
pretty much every day; it's probably my most-used Textual/Python-developed
application at this point. This is causing me to think more and more about
how I can add things to it that are related to the core purpose, but are
also outside of the main "interface with Pinboard" thing.&lt;/p&gt;
&lt;p&gt;A thing with keeping bookmarks for a long time is that some of them go
stale, go away. Some will just plain 404, others the whole site will
disappear. If I find myself going back to a bookmark and seeing this is the
case, I'll hit the &lt;a href="https://web.archive.org/"&gt;Wayback Machine&lt;/a&gt; and see if
there's an archive there.&lt;/p&gt;
&lt;p&gt;So I got to thinking: what if I add the ability to perform this check into
Tinboard itself? &lt;a href="https://www.youtube.com/watch?v=XDgiM6pUP2Y"&gt;So I did just that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, in the application, if you press &lt;kbd&gt;w&lt;/kbd&gt; with a bookmark
highlighted, it will check with the Wayback Machine to see if the bookmark
is in the archive. If it isn't you see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="No archive result" src="/attachments/2024/04/18/no-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, if it &lt;em&gt;is&lt;/em&gt; in the archive, you'll see something like
this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Is in the archive result" src="/attachments/2024/04/18/has-archive.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I sense this is going to be the first step in a couple of features related
to this. I'm thinking that I may go on to add a &lt;em&gt;"swap the URL for this
bookmark with the Wayback Machine archive URL"&lt;/em&gt; feature, which will be handy
for those bookmarks that have one away, and it would also be useful to look
at the options for a &lt;em&gt;"please archive a copy of this bookmark"&lt;/em&gt; feature.&lt;/p&gt;
&lt;p&gt;But, for now, v0.12.0 is available and has this handy (for me anyway) first
step.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>PISpy v0.6.0</title><link href="https://blog.davep.org/2024/04/17/pispy-0-6-0.html" rel="alternate"></link><published>2024-04-17T11:30:00+01:00</published><updated>2024-04-17T11:30:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-17:/2024/04/17/pispy-0-6-0.html</id><content type="html">&lt;p&gt;Back in the very early days of the &lt;a href="https://blog.davep.org/2024/03/28/goodbye-textualize.html"&gt;Textual
adventure&lt;/a&gt;,
within the first month or so of working on the framework, we &lt;a href="https://textual.textualize.io/blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/"&gt;had a period
of
dogfooding&lt;/a&gt;.
One of the projects I wrote during that time was a little tool &lt;a href="https://textual.textualize.io/blog/2022/12/08/be-the-keymaster/#pispy"&gt;I called
PISpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The initial version was pretty much a quick hack; during that dogfooding
period I did my best to try and develop a new project every couple of days.
Since then I've let PISpy descend into &lt;a href="https://en.wikipedia.org/wiki/Software_rot"&gt;bit
rot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the last week or so I've turned my attention back to it and made an
effort to &lt;a href="https://www.youtube.com/watch?v=CepsN8TDq1E"&gt;tidy up the code&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=t2EUXA8RkN0"&gt;tidy it some more&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=2u5CfrgZWcc"&gt;and some
more&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=CDCvWCZx1AM"&gt;even some
more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This morning I put the finishing touches to these changes and released
&lt;a href="https://github.com/davep/pispy/releases/tag/v0.6.0"&gt;v0.6.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/shorts/67xtMdstbx4"&gt;&lt;img alt="PISpy in action" src="/attachments/2024/04/17/pispy-in-action.gif#centre"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PISpy can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideallty) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/pispy-client/"&gt;from
PyPI&lt;/a&gt;. It can also be installed with
Homebrew by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;pispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pispy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/pispy"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>macOS desktop widget switching</title><link href="https://blog.davep.org/2024/04/17/macos-desktop-widget-switching.html" rel="alternate"></link><published>2024-04-17T09:26:00+01:00</published><updated>2024-04-17T09:26:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-17:/2024/04/17/macos-desktop-widget-switching.html</id><content type="html">&lt;p&gt;When &lt;a href="https://support.apple.com/en-gb/108996"&gt;desktop widgets&lt;/a&gt; first turned
up in macOS I was pretty quick to embrace them. On my personal Mac Mini I
use a pair of screens, the right one mostly given over to Emacs, and there
was generally room to space there. These days that screen generally looks
something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The usual layout of my right screen" src="/attachments/2024/04/17/right-screen.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Recently I've got into &lt;a href="https://www.youtube.com/@davep-codes/streams"&gt;streaming while I do some
coding&lt;/a&gt; and it's the
right-hand screen that I work on and capture using OBS. When I was setting
this up I realised that the widgets being there could be a problem; not
because they could distract or anything, more that they could, at times,
contain sensitive information (there's my reminder list and my calendar
there after all).&lt;/p&gt;
&lt;p&gt;What I needed was a quick method of hiding all the widgets, and showing them
again later, without it being a lot of faff.&lt;/p&gt;
&lt;p&gt;With a little bit of digging around on the net I finally came up with a pair
of &lt;code&gt;fish&lt;/code&gt; abbreviations that do just the job!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;abbr -g widoff &amp;quot;defaults write com.apple.WindowManager StandardHideWidgets -int 1&amp;quot;
abbr -g widon &amp;quot;defaults write com.apple.WindowManager StandardHideWidgets -int 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when I'm going to stream, part of my "getting stuff ready to go live"
checklist is to run &lt;code&gt;widoff&lt;/code&gt; in the terminal; once I'm finished I can then
just run &lt;code&gt;widon&lt;/code&gt; again to have them come back.&lt;/p&gt;
&lt;p&gt;Fast, clean, handy.&lt;/p&gt;
&lt;p&gt;I've also got a pair for when I'm using &lt;a href="https://support.apple.com/en-gb/guide/mac-help/mchl534ba392/mac"&gt;Stage
Manager&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;abbr -g smwidoff &amp;quot;defaults write com.apple.WindowManager StageManagerHideWidgets -int 1&amp;quot;
abbr -g smwidon &amp;quot;defaults write com.apple.WindowManager StageManagerHideWidgets -int 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although, really, I can't remember the last time I used Stage Manager. I
dabbled with it for a wee while, found it vaguely handy in a couple of
situations, but it doesn't seem to have stuck as part of my workflow or work
environment.&lt;/p&gt;</content><category term="Tech"></category><category term="macOS"></category><category term="fish"></category><category term="shell"></category><category term="streaming"></category></entry><entry><title>Tinboard v0.11.0</title><link href="https://blog.davep.org/2024/04/09/tinboard-0-11-0.html" rel="alternate"></link><published>2024-04-09T15:43:00+01:00</published><updated>2024-04-09T15:43:00+01:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-04-09:/2024/04/09/tinboard-0-11-0.html</id><content type="html">&lt;p&gt;While &lt;a href="/2024/03/28/goodbye-textualize.html"&gt;my time working on Textual might have come to an
end&lt;/a&gt;, my time working &lt;em&gt;with&lt;/em&gt; Textual
hasn't. Three days back &lt;a href="https://www.youtube.com/watch?v=U66oHFLWmG4"&gt;I experimented with Textual's newly-added "inline
mode"&lt;/a&gt;:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
    &lt;iframe
        width="560"
        height="315"
        src="https://www.youtube.com/embed/U66oHFLWmG4?si=kCQba6vMoxpKMtBG"
        title="YouTube video player" frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In doing so I extended the application so that it's possible to run
&lt;code&gt;tinboard add&lt;/code&gt; and quickly enter a new bookmark and then carry on in the
terminal, without needing to "go fullscreen". I'll admit it's of limited
use, but it seemed like a good shakedown of the feature and in working on it
I was able to discover a couple of bugs
(&lt;a href="https://github.com/Textualize/textual/issues/4385"&gt;#4385&lt;/a&gt;,
&lt;a href="https://github.com/Textualize/textual/issues/4403"&gt;#4403&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The effect of this is this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinboard inline addition in action" src="/attachments/2024/04/09/tinboard-inline-add.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. It can also be installed with
&lt;code&gt;Homebrew&lt;/code&gt; by tapping &lt;code&gt;davep/homebrew&lt;/code&gt; and then installing &lt;code&gt;tinboard&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="YouTube"></category></entry><entry><title>Goodbye Textualize</title><link href="https://blog.davep.org/2024/03/28/goodbye-textualize.html" rel="alternate"></link><published>2024-03-28T06:30:00+00:00</published><updated>2024-03-28T06:30:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-28:/2024/03/28/goodbye-textualize.html</id><content type="html">&lt;p&gt;While I have been &lt;a href="/2017/12/12/on_to_something_new.html"&gt;on the receiving end of redundancy once
before&lt;/a&gt;, that was after 21 years of
service at a company that, while it was in part about software development,
I would never have called it a "tech" company.&lt;/p&gt;
&lt;p&gt;So, as of today, I can finally say that the "&lt;a href="https://techcrunch.com/2024/03/27/tech-layoffs-2023-list/"&gt;tech
layoffs&lt;/a&gt;" came
for me and I'm one of 67% of employees being let go from a tech startup.&lt;/p&gt;
&lt;p&gt;Achievement unlocked, I guess?&lt;/p&gt;
&lt;p&gt;&lt;img alt="!Achievement unlocked" src="/attachments/2024/03/28/achievement-unlocked.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;To be clear: I'm not annoyed about this, I'm not even shocked about this; I
planned for this from the off and realised and recognised the gamble I was
taking &lt;a href="https://twitter.com/willmcgugan/status/1574118265063972864"&gt;back in 2022&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/willmcgugan/status/1574118265063972864"&gt;&lt;img alt="Announcing being hired" src="/attachments/2024/03/28/textual-startup-tweet.png#centre"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am disappointed about this. Not in a "I'm disappointed in you" kind of
way, but disappointed for all involved and what it says about how FOSS
projects are funded and maintained.&lt;/p&gt;
&lt;p&gt;It's been an interesting journey, and it's been a privilege to do something
I've been wanting to do since the 1990s, when I first read the GNU Manifesto
and subsequently watched the free software and open source movements develop
and grow: work on FOSS for a living. In doing this I've developed my
thoughts about the feasibility of such an endeavour, I've refined how I feel
about working in very small teams, I've learnt a lot of useful lessons I'm
going to draw on in the future (keeping a journal of my experience has been
a great move; I have a lot of notes and thoughts written down that I'll be
reviewing and distilling for myself over the coming weeks).&lt;/p&gt;
&lt;p&gt;Most of all: it's been an absolute blast working on something that people
are actually using to build &lt;a href="https://github.com/davep/transcendent-textual"&gt;cool
things&lt;/a&gt;, and to &lt;a href="https://textual.textualize.io/help/"&gt;provide help
and guidance to those people when they've needed
it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So... what happens now? Well, of course, right now, I'm looking for a new
position. If you're reading this and you are looking for someone who's kinda
handy with Python &lt;a href="https://github.com/davep"&gt;and a bunch of other languages&lt;/a&gt;
and who loves learning new stuff, or if you know someone who is looking for
such a person, &lt;a href="mailto:davep@davep.co.uk"&gt;do drop me a line&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As for what happens with Textual, and my involvement with it...&lt;/p&gt;
&lt;p&gt;Well, what happens &lt;em&gt;with&lt;/em&gt; Textual is
&lt;a href="https://github.com/willmcgugan"&gt;Will&lt;/a&gt;'s call, of course. As for my
involvement with it: I care about FOSS and I care about Textual; I also care
about the folk who have been kind enough to use their time to explore it,
test it, build with it, commit to it and make neat stuff with it. My
intention, as long as free time allows, is to carry on being involved, both
on GitHub and in &lt;a href="https://discord.gg/Enf6Z3qhVr"&gt;the Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's my sincere hope that, as a community of FOSS-friendly developers, we
see Textual over the 1.0 line and beyond.&lt;/p&gt;
&lt;p&gt;But all that starts next week. It's a bank holiday weekend and I think I
might have deserved a run, a bit of &lt;a href="https://www.youtube.com/@DavePearson"&gt;mucking about in
VR&lt;/a&gt;, a beer, and just a wee bit of
down time.&lt;/p&gt;</content><category term="Life"></category><category term="Python"></category><category term="textual"></category><category term="free-software"></category><category term="work"></category></entry><entry><title>Homebrew all the Python things</title><link href="https://blog.davep.org/2024/03/10/homebrew-all-the-python-things.html" rel="alternate"></link><published>2024-03-10T14:12:00+00:00</published><updated>2024-03-10T14:12:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-10:/2024/03/10/homebrew-all-the-python-things.html</id><content type="html">&lt;p&gt;Over the past year and a half I've written a &lt;em&gt;lot&lt;/em&gt; of Python code, and a lot
of that Python code has been Textual applications; most of those Textual
applications have been very quick demonstration or test applications built
to help support someone asking for help; some of them have been less-trivial
applications written in my own time and for my own use and amusement. Of
them I'd say there are two near-daily-drivers, and a couple that I either
have more plans for, or like to maintain just for the hell of it.&lt;/p&gt;
&lt;p&gt;Those latter applications are all ones that &lt;a href="https://pypi.org/user/davepearson/"&gt;I've deployed to
PyPI&lt;/a&gt;, and because of that are all ones
that I've recommenced be installed using
&lt;a href="https://pipx.pypa.io/stable/"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;. During that time though I've had
half an inclination to make them &lt;a href="https://brew.sh/"&gt;installable via
Homebrew&lt;/a&gt;. While probably not installable from the core
Homebrew repository&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, at least installable from a "tap"&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; that's under
my own GitHub account or something.&lt;/p&gt;
&lt;p&gt;To this end I've had &lt;a href="https://til.simonwillison.net/homebrew/packaging-python-cli-for-homebrew"&gt;a blog post about packaging Python apps for
Homebrew&lt;/a&gt;
saved in Pinboard for a while now, and every time I look at it I think
&lt;em&gt;"this is a lot of faff, maybe later"&lt;/em&gt;. Today was that "later".&lt;/p&gt;
&lt;p&gt;As it turned out, it was &lt;em&gt;way&lt;/em&gt; easier than I first realised. The evolution
of today pretty much went like this:&lt;/p&gt;
&lt;h2&gt;Deciding to use a single repository as the "tap"&lt;/h2&gt;
&lt;p&gt;The blog post above seemed to suggest that for every application repository
you want a tap for, you probably want a parallel &lt;code&gt;homebrew-&lt;/code&gt;-prefixed
repository. This in turn would suggest that every time someone wants to
install one of your tools, they'd need to add a new tap&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. As I looked at
it this seemed like way too much faff, so in the end I decided &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;to create a
single repository that I'd keep all my formula files
in&lt;/a&gt;. The naming of
&lt;code&gt;homebrew-homebrew&lt;/code&gt; meant that the tap name would simply be
&lt;code&gt;davep/homebrew&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Simple and clean, I think: things for homebrew, things that can be installed
via homebrew, that come from davep. To add the tap it's simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Ensuring that all my applications and libraries publish source&lt;/h2&gt;
&lt;p&gt;Although it seems that it might be (possibly, maybe, perhaps, who can tell?)
deprecated, it looked like
&lt;a href="https://github.com/tdsmith/homebrew-pypi-poet"&gt;&lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/a&gt; was a
tool I'd need to do all the heavy work on making the formula file. A quick
test threw up a problem where it was complaining that my test package (one
of my own applications) didn't have an &lt;code&gt;sdist&lt;/code&gt;. Sure enough, through nothing
more than never having bothered to make it happen, the source of my
libraries and applications wasn't been uploaded to PyPI when I published.&lt;/p&gt;
&lt;p&gt;So I went through some of my repositories and fixed that, making patch
releases as I went.&lt;/p&gt;
&lt;h2&gt;Making a &lt;code&gt;Makefile&lt;/code&gt; to let me be lazy&lt;/h2&gt;
&lt;p&gt;The next thing to do was to figure out the most lazy way of building the
formula files. From what I could see the main steps to making all of this
work were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a venv and activate it&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;homebrew-pypi-poet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the package you want to package for Homebrew&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;poet&lt;/code&gt; to make the formula&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seemed simple enough. For all sorts of lazy reasons I still tend to use
&lt;code&gt;pipenv&lt;/code&gt; to get things done quickly, and that seemed to work fine here too.
I'm also a fan of &lt;code&gt;PIPENV_VENV_IN_PROJECT=true&lt;/code&gt; which makes things clean and
tidy, so I figured a rule in a &lt;code&gt;Makefile&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;Pipfile.lock
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.12
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--dev&lt;span class="w"&gt; &lt;/span&gt;homebrew-pypi-poet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;would be fine to make a clean venv ready to build the formula, and then I'd
have a rule for the package itself that depended on the above, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;oshit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;span class="w"&gt;        &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;poet&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;oshit&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/oshit.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Fixing the package description&lt;/h2&gt;
&lt;p&gt;The above was great, and worked really well. But there was one issue that I
could see: the resulting formula file always had this &lt;code&gt;desc&lt;/code&gt; inside it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Shiny new formula&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From what I could see there was no way to tell &lt;code&gt;poet&lt;/code&gt; what I wanted the
description to be, and neither did I want to have to remember to edit that
line each time I regenerated the formula file. So &lt;code&gt;sed&lt;/code&gt; to the rescue then I
guess, with this sort of thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/Shiny new formula/The actual text I want/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Formula/coolapp.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The result&lt;/h2&gt;
&lt;p&gt;The result of all of this is that I now have &lt;a href="https://github.com/davep/homebrew-homebrew"&gt;a repository that I or anyone
else can use as a tap&lt;/a&gt; to be
able to install my stuff using the &lt;code&gt;brew&lt;/code&gt; command. So now if you want a
little Hacker News reader for the terminal but you don't want to be messing
with installing &lt;code&gt;pipx&lt;/code&gt; and the like, but you do use &lt;code&gt;brew&lt;/code&gt; on your machine,
it's just this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;davep/homebrew
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oshit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fingers crossed it all "just works" when I next upgrade one of those
packages. I will, of course, have to remember to go into
&lt;code&gt;davep/homebrew-homebrew&lt;/code&gt; and &lt;code&gt;make the-app&lt;/code&gt; for the relevant application,
and then commit and push the changes, but that's really not too difficult to
remember and do.&lt;/p&gt;
&lt;p&gt;Hopefully it'll then all just work.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do actually &lt;a href="https://formulae.brew.sh/formula/eg"&gt;have one package in
Homebrew&lt;/a&gt;, but it wasn't me who put
it there.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I really like Homebrew as a tool for getting stuff installed, by oh my
gods the naming of things in its ecosystem is terrible and confusing!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;No, really, I mean it, this naming convention is kinda cringe right?&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category><category term="Homebrew"></category><category term="Makefile"></category></entry><entry><title>Tinboard v0.10.0</title><link href="https://blog.davep.org/2024/03/07/tinboard-0-10-0.html" rel="alternate"></link><published>2024-03-07T08:45:00+00:00</published><updated>2024-03-07T08:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-03-07:/2024/03/07/tinboard-0-10-0.html</id><content type="html">&lt;p&gt;I just realised that it's been a while since I &lt;a href="/2023/12/25/tinboard-0-4-0.html"&gt;last posted an
update&lt;/a&gt; about &lt;code&gt;tinboard&lt;/code&gt;. This is probably
my most-used Textual-based application, and one I'm constantly tinkering
with, and just this morning I published v0.10.0.&lt;/p&gt;
&lt;p&gt;Often the changes are small tweaks or fixes to how it works, sometimes
they're simply updates to the version of Textual used, making use of some
new feature or other; I've yet to add another "major" feature so far. They
will come, but so far the ideas I have for the application haven't actually
felt that necessary. Although I say so myself it does what I need it to do
and it does it really well.&lt;/p&gt;
&lt;p&gt;So, as a quick catch-up of what's changed since v0.4.0 (which was the last
version I posted about):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v0.5.0 was released 2024-01-04; this included all the tags of a bookmark
when doing full-text searching.&lt;/li&gt;
&lt;li&gt;v0.6.0 was released 2024-01-10; it fixed a small bug where the tag
suggestion facility got confused by trailing spaces in the input field.&lt;/li&gt;
&lt;li&gt;v0.7.0 was released 2024-02-02; this updated the minimum Textual version to
v0.48.2 and removed all the custom changes to the Textual &lt;code&gt;TextArea&lt;/code&gt; widget,
making use of the updates to &lt;code&gt;TextArea&lt;/code&gt; that version of Textual made
available.&lt;/li&gt;
&lt;li&gt;v0.8.0 was released 2024-02-18; this fixed a crash on startup caused by a
newer release of Textual (the fault was in &lt;code&gt;tinboard&lt;/code&gt;; the update to Textual
helped reveal the problem).&lt;/li&gt;
&lt;li&gt;v0.9.0 was released 2024-02-29; it simply added support for using
&lt;kbd&gt;Esc&lt;/kbd&gt; at the top level of the application to quit (I like to camp
on &lt;kbd&gt;Esc&lt;/kbd&gt; to GTFO).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, just now, I released v0.10.0. This release makes full use of &lt;a href="https://github.com/Textualize/textual/pull/4154"&gt;some
work I recently did to enhance Textual's &lt;code&gt;CommandPalette&lt;/code&gt;
widget&lt;/a&gt;, which added a
"discover" system. The change in &lt;code&gt;tinboard&lt;/code&gt; is that all of the &lt;a href="https://github.com/davep/tinboard/tree/main/tinboard/commands"&gt;command
palette
providers&lt;/a&gt;
now have &lt;code&gt;discover&lt;/code&gt; methods too. The result of this change is that when you
open the command palette in &lt;code&gt;tinboard&lt;/code&gt; (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;) you
can see &lt;em&gt;every&lt;/em&gt; possible command right away.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in discovery mode" src="/attachments/2024/03/07/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Coding"></category><category term="Python"></category><category term="terminal"></category><category term="textual"></category></entry><entry><title>Back to Death Stranding</title><link href="https://blog.davep.org/2024/02/05/back-to-death-stranding.html" rel="alternate"></link><published>2024-02-05T07:45:00+00:00</published><updated>2024-02-05T07:45:00+00:00</updated><author><name>Dave Pearson</name></author><id>tag:blog.davep.org,2024-02-05:/2024/02/05/back-to-death-stranding.html</id><content type="html">&lt;p&gt;&lt;img alt="Death Stranding" src="/attachments/2024/02/05/IMG_4223.JPG#centre"&gt;&lt;/p&gt;
&lt;p&gt;Death Stranding is easily one of my top 5 games ever. I bought the PS4
version, on a whim, back in early 2020, to see what all the fuss was about.
I didn't know much about it other than the love/hate it seemed to be
getting. I can still remember the first session, being a bit confused about
what was going on, and then suddenly hitting a perfect moment in the game
where I knew it was for me, and that I was going to love it.&lt;/p&gt;
&lt;p&gt;That moment? It's when you're setting out for the incinerator, the camera
pulls back, the landscape opens up before you, and &lt;a href="https://www.youtube.com/watch?v=SBwoMJNxiFo"&gt;&lt;em&gt;Bones&lt;/em&gt; by Low Roar
kicks in&lt;/a&gt;. Perfection!&lt;/p&gt;
&lt;p&gt;I went on to finish the story in around 45 to 50 hours (much of that
overlapping with the first week or so of lockdown during the pandemic); and
then played at least as much again just exploring, building zip lines,
roads, etc.&lt;/p&gt;
&lt;p&gt;I even &lt;a href="https://my.chiral.pictures/"&gt;kept a photoblog of my time in the
game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;About a year back I bought the Director's Cut of the game, this time for PC.
I'd decided that I had to play it through again &lt;a href="https://www.youtube.com/watch?v=Zb7390_rldQ&amp;amp;list=PLUY2FpMDyORDJd_VYhF74e6Mapf8oHp8i"&gt;and did start streaming
it&lt;/a&gt;.
Annoyingly though the PC setup wasn't great. The game itself ran just fine
on my PC, but the controller setup meant that, as I sat on the sofa, it
would drop connection from time to time. The only workaround for this was to
sit on my office chair closer to the TV and, really, this wasn't
comfortable.&lt;/p&gt;
&lt;p&gt;Eventually that play-through fell away.&lt;/p&gt;
&lt;p&gt;Fast forward to last week &lt;a href="https://www.youtube.com/watch?v=wbLstJHlC4U"&gt;and the release of the 10 minute Death Stranding
2 trailer&lt;/a&gt; and I was hooked all
over again! While it never totally went away, my obsession with this game
was back full force.&lt;/p&gt;
&lt;p&gt;I had to play again!&lt;/p&gt;
&lt;p&gt;Meanwhile, between the attempt to play through on the PC and now, I'd
acquired a PS5 &lt;em&gt;and&lt;/em&gt; at some point I'd upgraded my PS4 version of Death
Stranding to the PS5 Director's Cut.&lt;/p&gt;
&lt;p&gt;So I had to. I just had to. I'd had a great time &lt;a href="https://www.youtube.com/watch?v=0TriPR0c-eg&amp;amp;list=PLUY2FpMDyORBQXTLCgueUh5v8DCx5TByU"&gt;streaming my play through
the story of Cyberpunk
2077&lt;/a&gt;
so it made sense to do the same with Death Stranding.&lt;/p&gt;
&lt;p&gt;Last night I hit &lt;em&gt;New game&lt;/em&gt; on my PS5 &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g"&gt;and played for just over 2
hours&lt;/a&gt;. This play through is
likely going to take a long time -- my work situation means I have a longer
and more tiring commute -- but I'm determined to do it. I want to experience
all of the extra things in the Director's Cut, including the extra story
(which I've read there is, but haven't seen or read about).&lt;/p&gt;
&lt;p&gt;I hope, eventually, &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g&amp;amp;list=PLUY2FpMDyORCBUB0_pmQ5hKu1WTJnAVGI"&gt;the playlist I
started&lt;/a&gt;
will have the full story plus lots more fun and building and exploring in
it. Hopefully I'll be done just in time for the release of DS2! (and
&lt;a href="https://www.youtube.com/watch?v=QdBZY2fkU-0"&gt;GTA6&lt;/a&gt;, it's going to be a busy
year for gaming next year!)&lt;/p&gt;</content><category term="Gaming"></category><category term="Death Stranding"></category><category term="PS5"></category><category term="gaming"></category></entry></feed>