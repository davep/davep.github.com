<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>blog.davep.org</title><link>https://blog.davep.org/</link><description>Code, Emacs, VR, Stuff...</description><lastBuildDate>Tue, 11 Jul 2023 20:50:00 +0100</lastBuildDate><item><title>Dot Files</title><link>https://blog.davep.org/2023/07/11/dot-files.html</link><description>&lt;p&gt;While I'm still &lt;a href="/2023/07/05/the-switch-has-been-made.html"&gt;in blog-tinkering
mode&lt;/a&gt; (long may it last!), I
thought it might be handy to keep a page kicking around that has links to
the small collection of "dot file" repositories I have.&lt;/p&gt;
&lt;p&gt;Like many people, I keep these in a central location (in my case &lt;a href="https://github.com/davep"&gt;up on
GitHub&lt;/a&gt;) so that I can very quickly spin up a
familiar work environment on a new machine (new machines are something that
doesn't happen &lt;em&gt;too&lt;/em&gt; often, but it's always good to be able to get going
quickly when it does).&lt;/p&gt;
&lt;p&gt;So, depending on browser type/size, either above here or off to the side,
there should now be a permanent link to &lt;a href="/pages/dot-files.html"&gt;a page of links to those
repositories&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I look at it now it's actually surprising to me how much of my
"comfortable" environment is encapsulated in so few tools, and configured
with so few collections of files. There are other tools I use a lot too, but
most of them either have their own sync systems, or they have so few
configuration options (and are likely in a format that isn't easy to
grab/store) that it's not worth the bother.&lt;/p&gt;
&lt;p&gt;This feels like a good thing, really.&lt;/p&gt;
&lt;p&gt;One thing that's not amongst all of this, partly because it's not that
interesting, but also partly because the repository is private, is a single
bash script called &lt;code&gt;myenv&lt;/code&gt;. On a new machine, once I've got enough of a
setup that I can clone from GitHub, I drag this down and run the script and
most of the rest of the environment follows.&lt;/p&gt;
&lt;p&gt;It's quite satisfying when I need to use it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Tue, 11 Jul 2023 20:50:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-11:/2023/07/11/dot-files.html</guid><category>Meta</category><category>Blog</category></item><item><title>New desk</title><link>https://blog.davep.org/2023/07/08/new-desk.html</link><description>&lt;p&gt;I moved into my current place back in August 2019, bringing with me a fairly
small desk. Originally, many years back, I'd had a pretty big office with
&lt;em&gt;lots&lt;/em&gt; of office space but, upon moving up to Scotland back in 2016, I
needed to go with something a lot smaller.&lt;/p&gt;
&lt;p&gt;Which was perfectly fine. Me and that desk wrote a lot of code. Me and that
desk &lt;a href="/2017/12/12/on_to_something_new.html"&gt;transitioned from one job to
another&lt;/a&gt;, and then
&lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;another&lt;/a&gt;. Me and that desk made
it through the pandemic.&lt;/p&gt;
&lt;p&gt;It's been a good desk.&lt;/p&gt;
&lt;p&gt;But it was small. I'm in a place where I could spread out a fair bit again,
but I also kept putting it off and putting it off.&lt;/p&gt;
&lt;p&gt;Earlier this year I decided that it was high time I actually upgraded; I
also promised the desk to someone else who I know will get a &lt;em&gt;lot&lt;/em&gt; of good
use out of it; so finally earlier this week I put in the order for something
bigger and fancier.&lt;/p&gt;
&lt;p&gt;Yesterday, with the help of a very good friend (thanks MariÃ«lle!), I got the
desk built and roughly in place, and then today I've been putting the
desktop back together and adding extra bits.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My new desk" src="/attachments/2023/07/08/new-desk.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;It's so nice to have more space to spread out, it's also nice to have a
black desk again! (the last one was white because... reasons) But what's
&lt;em&gt;really&lt;/em&gt; exciting is that it transforms into a standing desk at the touch of
a button.&lt;/p&gt;
&lt;p&gt;I've been trying it in the standing configuration today and, while I doubt I
could do a whole day of coding with it like that, I'm already really liking
it as a way of breaking up the time at the keyboard. On the days I work from
home, or the days of my own where I get sucked into a personal project, I
can absolutely see me swapping between the two states.&lt;/p&gt;
&lt;p&gt;All that's left now is to get used to it. The screens are ever so slightly
further away, the height is ever so slightly different (although I can
adjust it, of course, but what I've done is adjust the sitting position to a
nicer one and that's going to take some getting used to), my iPad and Stream
Desk are in just a slightly different location, etc, etc... So I'm sure
there'll be a few days of sitting here and making small tweaks to the spot
where things live.&lt;/p&gt;
&lt;p&gt;Before I know it I'll be used to it. It'll be "my spot".&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 08 Jul 2023 17:50:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-08:/2023/07/08/new-desk.html</guid><category>Life</category><category>Life</category><category>desk</category></item><item><title>Dark Waters</title><link>https://blog.davep.org/2023/07/06/dark-waters.html</link><description>&lt;p&gt;More than ever I'm listening to music while I work. Despite having grown up
in the 80s, and so having a good vinyl collection, and then having got into
buying all the CDs in the 90s and 00s, these days I have managed to embrace
the "just stream all the things" approach. After a long time using Spotify I
finally ended up migrating to Apple Music.&lt;/p&gt;
&lt;p&gt;One of the things I do find Apple Music does well is the whole "you seem to
like this, have you tried this?" thing; which on occasion has resulted in a
pretty neat rabbit hole of discovery.&lt;/p&gt;
&lt;p&gt;Earlier this year this happened with &lt;a href="https://fosstodon.org/@davep/109709660400107128"&gt;female-fronted Dutch goth/rock type
bands&lt;/a&gt;. I don't even
remember how that happened, but it's a thing that happened and I gleefully
dived right in. I came away with a few names I didn't know before, but one
album has really stuck in my head and, now that we're just over 1/2 way
through the year, I feel it's the one that gets played more than anything
else.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delain Dark Waters" src="/attachments/2023/07/06/Delain Dark Waters.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;This keeps creeping back to the top of things I'm playing; sometimes when
I'm in "bang on the keyboard lots" coding mode (you know the sort of coding
mode: where you don't have to think too much because you have a good plan
for what you're doing, but you've got a lot of tapping away to do), plus
also often while I'm in the car.&lt;/p&gt;
&lt;p&gt;I won't be the least bit surprised to find that this ends up being my
most-played album this year. According to last.fm it's at the top of the
albums I've played (in places where I have scrobbling set up) in the last
365 days.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My last 365 days of albums on last.fm" src="/attachments/2023/07/06/AlbumsInLast365Days.png#centre"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 06 Jul 2023 07:36:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-06:/2023/07/06/dark-waters.html</guid><category>Music</category><category>Music</category></item><item><title>The switch has been made</title><link>https://blog.davep.org/2023/07/05/the-switch-has-been-made.html</link><description>&lt;p&gt;Well, it didn't take as long as I expected it to. Just &lt;a href="/2023/07/04/considering-pelican.html#considering-pelican"&gt;yesterday
morning&lt;/a&gt; I was
giving &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; a look over as a possible engine
for generating my blog, having wanted to move away from Jekyll for a while
now. Having tried it and liked what I saw to start with, I wrote about how I
liked it and wondered how long it would take me to make the switch.&lt;/p&gt;
&lt;p&gt;By the evening I was making a proper effort to get the switchover started,
and just a wee while earlier, before writing this post, the switch was made!&lt;/p&gt;
&lt;p&gt;The process of making the switch was roughly this (and keep in mind I'm
coming from using Jekyll):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Made a branch in the repo to work in.&lt;/li&gt;
&lt;li&gt;Removed all of the Jekyll-oriented files.&lt;/li&gt;
&lt;li&gt;Decided to set up Pelican and related tools in a virtual environment,
   managed using &lt;code&gt;pipenv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ran &lt;code&gt;pelican-quickstart&lt;/code&gt; to kick things off and give me a framework to
   start with.&lt;/li&gt;
&lt;li&gt;Renamed the old &lt;code&gt;_posts&lt;/code&gt; directory to &lt;code&gt;content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Kept tweaking the hell out of the &lt;a href="https://github.com/davep/davep.github.com/blob/main/pelicanconf.py"&gt;Pelican config
   file&lt;/a&gt;
   until it started to look "just so" (this is a process that has been
   ongoing, and doubtless will keep happening for some time to come).&lt;/li&gt;
&lt;li&gt;Tried out a few themes and settled on
   &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt;; while not &lt;em&gt;exactly&lt;/em&gt;
   what I wanted, it was close enough to help keep me motivated (while
   rolling my own theme from scratch would seem fun, I just know it would
   mean the work would never get done, or at least finished).&lt;/li&gt;
&lt;li&gt;Did a mass tidy up of all the tags in all the posts; something I'd never
   really paid too much attention to as the Jekyll-based blog never actually
   allowed for following tags.&lt;/li&gt;
&lt;li&gt;Went though all the posts and removed double quotes from a lot of the
   titles in the frontmatter (something Jekyll seems to have stripped, but
   which Pelican doesn't).&lt;/li&gt;
&lt;li&gt;Tweaked the &lt;code&gt;FILE_METADATA&lt;/code&gt; to ensure that the slugs for the URLs came
    from the filenames -- by default Pelican seems to slugify the title of a
    post and this meant that some of the URLs were changing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All in all I probably spent 6 or 7 hours on making the move; a lot of that
involving reading up on how to configure Pelican and researching themes. The
rest of it was a lot of repetitive work to fix or tidy things.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The&lt;/em&gt; most important aspect of this was keeping the post URLs the same all
the way back to the first post; as best as I can tell I've managed that.&lt;/p&gt;
&lt;p&gt;So far I'm pleased with the result. I'm going to live with the look/theme
for a wee while and see how it sits for me. I'm sure I'll tweak it a bit as
time goes on, but at the moment I'm comfortable with how it looks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Wed, 05 Jul 2023 17:56:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-05:/2023/07/05/the-switch-has-been-made.html</guid><category>Meta</category><category>Python</category><category>Blogging</category></item><item><title>Considering Pelican</title><link>https://blog.davep.org/2023/07/04/considering-pelican.html</link><description>&lt;p&gt;Since getting my blog editing environment set up on the "new" machine &lt;a href="/2023/07/02/catching-up.html"&gt;a
couple of days back&lt;/a&gt; I've been thinking some
more about moving away from Jekyll. Jekyll itself has served me well since I
started this blog &lt;a href="/2015/06/18/hello-world.html"&gt;back in 2015&lt;/a&gt;, but I was
reminded again when installing it on the Mac Mini that it's Ruby-based and I
have very little understanding of how to get a good Ruby experience on
macOS&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Having &lt;a href="https://fosstodon.org/@davep/110643256889173912"&gt;mentioned on Mastodon that I was thinking about finally looking at
moving my blog management/generation to something
new&lt;/a&gt;, and specifically
something Python-based and ideally some sort of site generator, I got a few
suggestions.&lt;/p&gt;
&lt;p&gt;One that looks promising so far is &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt;. At
first glance it seems to tick a few boxes for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python-based (so easy for me to grok in terms of installing, and also more
  chance of being hackable).&lt;/li&gt;
&lt;li&gt;Uses Markdown (curiously as an alternative, to reStructuredText, which
  looks to be the default).&lt;/li&gt;
&lt;li&gt;Does article-based stuff as well as page-based stuff.&lt;/li&gt;
&lt;li&gt;Lots of themes, and themes are Jinja2-based (I'm pretty familiar with
  Jinja thanks to my Django days and also &lt;a href="https://github.com/davep/ng2web"&gt;using the library when kicking
  off &lt;code&gt;ng2web&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;RSS feed generation.&lt;/li&gt;
&lt;li&gt;Syntax-highlighted code blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I'm not quite ready to dive in and make the move just yet (I am on a
"muck about at home" holiday this week, but I've got enough planned without
losing a day to rebooting my blog), I did do a quick experiment to see if
Pelican would work for me.&lt;/p&gt;
&lt;p&gt;Key to this is can I keep the URLs for all the posts the same? If I can't
that's a non-starter.&lt;/p&gt;
&lt;p&gt;Things got off to a good start with an easy install:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then used the &lt;code&gt;pelican-quickstart&lt;/code&gt; to kick off a test site, copied in my
existing Markdown files, dived into the docs and found how to configure the
generated URLs and... yeah, within like 10 minutes I had a &lt;em&gt;very&lt;/em&gt; rough
version of my blog up and going.&lt;/p&gt;
&lt;p&gt;It looked like garbage, the theme really wasn't to my taste at all, but the
core of the blog was working.&lt;/p&gt;
&lt;p&gt;I've nuked it all for now but a more considered evaluation is now on my TODO
list. Things I'll need to drive into properly are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a base theme that's to my taste.&lt;/li&gt;
&lt;li&gt;Get Disqus working it so that any old comments remain in place.&lt;/li&gt;
&lt;li&gt;Get my image/attachment layout back in place.&lt;/li&gt;
&lt;li&gt;Go through and tidy up all the tagging (which has been a mess with this
  blog because I never did get round to getting Jekyll to actually use
  tags).&lt;/li&gt;
&lt;li&gt;Figure out the best way to do the publishing to GitHub pages.&lt;/li&gt;
&lt;li&gt;Likely a bunch of other stuff I've not thought about yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But, yeah, for a brief "over first coffee of the day" tinker to see if I
like it... I like!&lt;/p&gt;
&lt;p&gt;Let's see how long it takes me to actually get around to making the switch.
;-)&lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;When setting this up a couple of days back, I had to pin some packages
for the blog to older versions because of Ruby version issues; I'm sure
that Ruby has virtual environment solutions akin to Python, but diving
into that just for one tool... nah.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Tue, 04 Jul 2023 08:32:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-04:/2023/07/04/considering-pelican.html</guid><category>Meta</category><category>Python</category><category>Blogging</category></item><item><title>A new GitHub profile README</title><link>https://blog.davep.org/2023/07/03/making-my-github-banner.html</link><description>&lt;p&gt;&lt;img alt="My new GitHub banner" src="https://raw.githubusercontent.com/davep/davep/main/davep.svg"&gt;&lt;/p&gt;
&lt;p&gt;Ever since GitHub introduced the &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;profile
README&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;
I've had a massively low-effort one in place. I made the repo, quickly wrote
the file, and then sort of forgot about it. Well, I didn't so much forget as
just keep looking at it and thinking "I should do something better with that
one day".&lt;/p&gt;
&lt;p&gt;Thing is, while there are lots of fancy approaches out there, and lots of
neat generator tools and the like... they just weren't for me.&lt;/p&gt;
&lt;p&gt;Then yesterday, over my second morning coffee, after &lt;a href="/2023/07/02/catching-up.html"&gt;getting my blog
environment up and going again&lt;/a&gt;, I had an
idea. It could be cool to use &lt;a href="https://textual.textualize.io/api/app/#textual.app.App.save_screenshot"&gt;Textual's screenshot
facility&lt;/a&gt;
to make something terminal-themed! I mean, while it's not &lt;em&gt;all&lt;/em&gt; I am these
days, so much of what I'm doing right now is aimed at the terminal.&lt;/p&gt;
&lt;p&gt;So... what to do? Then I thought it could be cool to knock up some sort of
login screen type thing; with a banner. One visit to an online large
terminal text generator site later, I had some banner text. All that was
left was to write &lt;a href="https://github.com/davep/davep/blob/main/make_banner.py"&gt;a simple Textual application to create the
"screen"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main layout is simple enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;banner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PRATTLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;github.com/davep login: [reverse] [/]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;NAME&lt;/code&gt; contains the banner and &lt;code&gt;PRATTLE&lt;/code&gt; contains the "login message".
With some &lt;a href="https://textual.textualize.io/guide/CSS/"&gt;Textual CSS&lt;/a&gt; sprinkled
over it to give the exact layout and colour I wanted, all that was left was
to make the snapshot. This was easy enough too.&lt;/p&gt;
&lt;p&gt;While the whole thing isn't fully documented just yet, Textual does have &lt;a href="https://textual.textualize.io/api/app/#textual.app.App.run_test"&gt;a
great tool for automatically running an application and interacting with
it&lt;/a&gt;; that
meant I could easily write a function to load up my app and save the
screenshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;GitHubBannerApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pilot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pilot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;davep.svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, that needs running async, but that's simple enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_banner&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Throw in a &lt;code&gt;Makefile&lt;/code&gt; so I don't forget what I'm supposed to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;.PHONY:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
&lt;span class="nl"&gt;all:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;pipenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;make_banner.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and that's it! Job done!&lt;/p&gt;
&lt;p&gt;From here onward I guess I could have some real fun with this. It would be
simple enough I guess to modify the code so that it changes what's displayed
over time; perhaps show a "last login" value that relates to recently
activity or something; any number of things; and then run it in a cron job
and update the repository.&lt;/p&gt;
&lt;p&gt;For now though... I'll stick with keeping things nice and simple.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;It was actually kind of annoying when they introduced it because the
repo it uses is named after your user name. I already had a &lt;code&gt;davep&lt;/code&gt;
repo: it was a private repo where I was slowly working on a (now
abandoned, I'll start it again some day I'm sure) ground-up rewrite of
my &lt;code&gt;davep.org&lt;/code&gt; website.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 03 Jul 2023 08:15:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-03:/2023/07/03/making-my-github-banner.html</guid><category>Coding</category><category>GitHub</category><category>Python</category><category>Textual</category></item><item><title>Catching up</title><link>https://blog.davep.org/2023/07/02/catching-up.html</link><description>&lt;p&gt;So... erm... yeah... I did it again. I looked away for a moment and somehow
&lt;a href="/2022/12/16/oidia.html"&gt;almost 7 months passed without a post&lt;/a&gt;! It's so
easily done too isn't it? While, &lt;a href="/2022/05/20/im-back.html"&gt;when I revived this blog last
year&lt;/a&gt;, I didn't make a point of intending to write
lots and often, I had hope that I'd manage something at least once a week;
perhaps at least once a month.&lt;/p&gt;
&lt;p&gt;Ahh well.&lt;/p&gt;
&lt;p&gt;There's been two main reasons why it's been quiet around here. The first is
that &lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;my (now not so) new job&lt;/a&gt;
keeps me busy (in a good way). It involves a reasonable amount of trekking
into town and back (which I don't mind on the whole), and once I'm home in
the evening I'm generally (but not always) done with the keyboard and desk.&lt;/p&gt;
&lt;p&gt;The second reason, which is probably the dafter one, is that a bit earlier
this year I finally upgraded my desktop setup from the 2019 Intel MacBook
Pro I was using to a recently-released M2Pro Mac Mini (and &lt;em&gt;what&lt;/em&gt; an
upgrade!). How this plays into blogging being even more quiet is... I needed
to set up jekyll again, and I'd forgotten how I got it running in the first
place, so I kept putting off getting it going, and...&lt;/p&gt;
&lt;p&gt;Well, this morning, I sat down with coffee, grepped the &lt;code&gt;history&lt;/code&gt; on my
previous machine, and got it running in like 5 minutes (of course).&lt;/p&gt;
&lt;p&gt;So, here I am, back adding another blog post. I'm writing this as much to
test that the setup works as anything else.&lt;/p&gt;
&lt;p&gt;But also, this time, I'm going to try and make a promise to myself: I'm
going to try and write more. I can and should write about anything. I can
and should write short things as well as long things. I can and should
remember that it's not about writing things that are going to be super
important or anything like that, it's about just getting stuff down and
creating and recording.&lt;/p&gt;
&lt;p&gt;Note of course I said "try" and make a promise.&lt;/p&gt;
&lt;p&gt;We'll see. ;-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 02 Jul 2023 08:00:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-07-02:/2023/07/02/catching-up.html</guid><category>Meta</category><category>Mac</category><category>Apple</category></item><item><title>OIDIA</title><link>https://blog.davep.org/2022/12/16/oidia.html</link><description>&lt;p&gt;Another little thing that's up on PyPi now, which is the final bit of
fallout from &lt;a href="/2022/12/01/new-things-on-pypi.html"&gt;the Textual dogfooding
sessions&lt;/a&gt;, is a little project I'm
calling OIDIA.&lt;/p&gt;
&lt;p&gt;The application is a streak tracker. I'm quite the fan of streak trackers.
I've used a few over the years, both to help keep me motivated and honest,
and also to help me track that I've avoided unhelpful things too. Now, most
of the apps I've used, and use now, tend to have reminders and counts and
stats and are all about "DO NOT BREAK THE STREAK OR ELSE" and that's mostly
fine, but...&lt;/p&gt;
&lt;p&gt;To keep things simple and to purely concentrate on how to build Textual
apps, I made this a "non-judgement" streak tracker. It's designed to be
really simple: you add a streak, you bump up/down the number of times you
did (or didn't do) the thing related to that streak, for each day, and
that's it.&lt;/p&gt;
&lt;p&gt;No totals. No stats. No reminders and bugging. No judgement.&lt;/p&gt;
&lt;p&gt;Here it is in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
    &lt;iframe
        width="560" height="315"
        src="https://www.youtube.com/embed/3Kz8eUzO9-8"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;When I started it, I wasn't quite sure how I wanted to store the data.
Throwing it in a SQLite database held some appeal, but that also felt like a
lot of faff for something so simple. Also, I wanted to make the data as easy
to get at, to use elsewhere, and to hack on, as possible. So in the end I
went with a simple JSON file.&lt;/p&gt;
&lt;p&gt;On macOS and GNU/Linux &lt;code&gt;streaks.json&lt;/code&gt; lives in &lt;code&gt;~/.local/share/oidia&lt;/code&gt;, on
Windows it'll be in... I'm not sure off the top of my head actually; it'll
be in whatever directory &lt;a href="https://pypi.org/project/xdg/"&gt;the handy &lt;code&gt;xdg&lt;/code&gt;
library&lt;/a&gt; has chosen. and because it's JSON
that means that something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OIDIA in action" src="/attachments/2022/12/16/oidia.png"&gt;&lt;/p&gt;
&lt;p&gt;ends up looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hack some Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Brush my teeth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Walk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-06&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-29&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run 5k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Run 10k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-12-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;2022-11-28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, it remains to be seen how well that actually scales; possibly not
so well over a long period of time, but this was written more as another way
to explore Textual than anything else. Even then, it would be pretty trivial
to update to something better for holding the data.&lt;/p&gt;
&lt;p&gt;If this seems like your thing (and I will be supporting it and onward
developing it) you &lt;a href="https://pypi.org/project/oidia/"&gt;can find it over on
PyPi&lt;/a&gt;, which means it can be installed with
&lt;code&gt;pip&lt;/code&gt; or the ever-handy &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;oidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 16 Dec 2022 09:30:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-12-16:/2022/12/16/oidia.html</guid><category>Python</category><category>Python</category><category>coding</category></item><item><title>New Things On PyPi</title><link>https://blog.davep.org/2022/12/01/new-things-on-pypi.html</link><description>&lt;h1&gt;An update&lt;/h1&gt;
&lt;p&gt;So, it's fast approaching 2 months now &lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;since I started the new
thing&lt;/a&gt; and it's been a busy
time. I've had to adjust to a quite a few new things, not least of which has
been a longer and more involved commute. I'm actually mostly enjoying it
too. While having to contend with busses isn't the &lt;em&gt;best&lt;/em&gt; thing to be doing
with my day, I do have a very fond spot for Edinburgh and it's nice to be in
there most days of the week.&lt;/p&gt;
&lt;p&gt;Part of the fallout from the new job has been that, in the last couple of
weeks, I've thrown some more stuff up on PyPi. This comes about as part of a
bit of a dog-fooding campaign we're on at the moment (you can read some
background to this &lt;a href="https://textual.textualize.io/blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/"&gt;over on the company
blog&lt;/a&gt;).
While they have been, and will continue to be, mentioned on the Textualize
blog, I thought I'd give a brief mention of them here on my own blog too
given they are, essentially, personal projects.&lt;/p&gt;
&lt;h1&gt;gridinfo&lt;/h1&gt;
&lt;p&gt;This is one I'd like to tweak some more and improve on if possible. It is,
in essence, a Python-coded terminal tool that does more or less the same as
&lt;a href="https://github.com/davep/slstats.el"&gt;&lt;code&gt;slstats.el&lt;/code&gt;&lt;/a&gt;. It started out as &lt;a href="https://twitter.com/davepdotorg/status/1590476280457490434"&gt;a
rather silly quick
hack&lt;/a&gt;, designed
to do something different with
&lt;a href="https://github.com/darrenburns/rich-pixels"&gt;&lt;code&gt;rich-pixels&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the finished version (as of the time of writing) being put through
its paces:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/dzpGgVPD2aM" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Download &lt;a href="https://pypi.org/project/gridinfo/"&gt;from here&lt;/a&gt;, or install and
play with it with a quick &lt;code&gt;pipx install gridinfo&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;unbored&lt;/h1&gt;
&lt;p&gt;The next experiment with Textual was to write a terminal-based client for
the &lt;a href="https://www.boredapi.com/"&gt;Bored-API&lt;/a&gt;. My initial plan for this was to
just have a button or two that the user could mash on and they'd get an
activity suggestion dropped into the middle of the terminal; but really that
seemed a bit boring. Then I realised that it'd be a bit more silly and a bit
more fun if I did it as a sort of TODO app. Bored? Run it up and use one of
the activities you'd generated before. Don't like any of them? Ignore them
and generate some more! Feeling bad that you've got such a backlog of
reasons to not be bored? Delete a bunch!&lt;/p&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;p&gt;Here's a short video of it in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/Zl3dIzYfIWI" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Download &lt;a href="https://pypi.org/project/unbored/"&gt;from here&lt;/a&gt;, or install and play
with it with a quick &lt;code&gt;pipx install unbored&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;textual-qrcode&lt;/h1&gt;
&lt;p&gt;This one... this one I'm going to blame on the brain fog that followed flu
&lt;em&gt;and&lt;/em&gt; Covid jabs that happened the day before (and which are still kicking
my arse 4 days later). Monday morning, at my desk, and I'm wondering what to
next write to experiment with Textual, and I realised it would be
interesting to write something that would show off that it's easy to make a
third party widget library.&lt;/p&gt;
&lt;p&gt;And... yeah, I don't know why, but I remembered
&lt;a href="https://github.com/davep/qrencode.el"&gt;&lt;code&gt;qrencode.el&lt;/code&gt;&lt;/a&gt; and so
&lt;code&gt;textual-qrcode&lt;/code&gt; was born!&lt;/p&gt;
&lt;p&gt;&lt;img alt="The most useless Textal widget yet" src="/attachments/2022/12/01/textual-qrcode.png"&gt;&lt;/p&gt;
&lt;p&gt;I think the most amusing part about this is that I did it in full knowledge
that it would be useless; the idea being it would be a daft way of showing
off how you could build a widget library as an add-on for Textual. But...
more than one person actually ended up saying "yeah hold up there this could
actually be handy!"&lt;/p&gt;
&lt;p&gt;If you're one of those people... &lt;a href="https://pypi.org/project/textual-qrcode/"&gt;you'll find it
here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;FivePyFive&lt;/h1&gt;
&lt;p&gt;While I was on a roll putting stuff up on PyPi, I also decided to tweak up
my Textual-based 5x5 and throw that up too. This was &lt;a href="https://twitter.com/davepdotorg/status/1554207518615814148"&gt;my first app built
with Textual&lt;/a&gt;,
initially written before I'd even spoken to Will about the position here. At
one point I even did &lt;a href="https://github.com/davep/textual/blob/c4f60548922609133763c0e49f7b23aea5d44c2b/sandbox/davep/five_by_five.hy"&gt;a version in
Lisp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's since gone on to become &lt;a href="https://github.com/Textualize/textual/tree/d2ba22b86f48f4ce5b0f55767efdcf1a5478b180/examples"&gt;one of the example apps in Textual
itself&lt;/a&gt;
but I felt it deserved being made available to the world via an easy(ish)
install. So, if you fancy trying to crack the puzzle in your terminal, just
do a quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;fivepyfive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and click away.&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="343" height="610"
src="https://www.youtube.com/embed/Rf34Z5r7Q60" title="FivePyFive -- A
little annoying puzzle for the terminal" frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;You can find it &lt;a href="https://pypi.org/project/fivepyfive/"&gt;over here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;PISpy&lt;/h1&gt;
&lt;p&gt;Finally... for this week anyway, is a tool I've called PISpy. It's designed
as a simple terminal client for looking up package information on PyPi. As
of right now it's pretty straightforward, but I'd like to add more to it
over time. Here's an example of it in action:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/yMGD6bXqIEo" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;One small wrinkle with publishing it to PyPi was the fact that, once I'd
chosen the name, I checked that it hadn't been used on PyPi (it hadn't) but
when it came to publishing the package it got rejected because the name was
too similar to another package! I don't know which, it wouldn't say, but
that was a problem. So in the end the published name ended up having to be
slightly different from the actual tool's name.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://pypi.org/project/pispy-client/"&gt;over here&lt;/a&gt; for the package, and
you can install it with a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pispy-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then just run &lt;code&gt;pispy&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It's been a fun couple of weeks coming up with stuff to help exercise
Textual, and there's more to come. Personally I've found the process really
helpful in that it's help me learn more about the framework and also figure
out my own approach to working with it. Each thing I've built so far has
been a small step in evolution on from what I did in the previous thing. I
doubt I've arrived at a plateau of understanding just yet.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 01 Dec 2022 22:13:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-12-01:/2022/12/01/new-things-on-pypi.html</guid><category>Python</category><category>Python</category><category>coding</category></item><item><title>Python and macOS</title><link>https://blog.davep.org/2022/11/05/python-and-macos.html</link><description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On Twitter, a few weeks back, &lt;a href="https://twitter.com/itsBexli/status/1577332548933500928"&gt;@itsBexli asked me how I go about setting up
Python for development on
macOS&lt;/a&gt;. It's a
great question and one that seems to crop up in various places, and since &lt;a href="/2015/06/27/my-first-couple-of-weeks-with-an-imac.html"&gt;I
first got into using
macOS&lt;/a&gt; and then
&lt;a href="/2017/12/12/on_to_something_new.html"&gt;subsequently got back into coding lots in
Python&lt;/a&gt; it's absolutely an issue I ran
into.&lt;/p&gt;
&lt;p&gt;With my previous employer, while I was the only developer, I wasn't the only
person writing code and more than one other person had this issue so I
eventually wrote up my approach to solving this problem. That document is on
their internal GitLab, but I thought it worth me writing my personal
macOS/Python "rules" up again, just in case they're useful to anyone else.&lt;/p&gt;
&lt;p&gt;I am, of course, not the first person to tackle this, to document this, to
write down a good approach to this. Before and after I settled on my
approach I'd seen other people write about this. So... this post isn't here
to try and replace those, it's simply to write down my own approach, so if
anyone asks again I can point them here. I feel it's important to stress:
this isn't the only way or thoughts on this issue, there are lots of others.
Do go read them too and then settle on an approach that works for you.&lt;/p&gt;
&lt;p&gt;One other point to note, which may or may not make a difference (and may or
may not affect how this changes with time): for the past few years I've been
a heavy user of &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt; to manage my
virtual environments. This is very likely to change from now on, but keep in
mind that what follows was arrived at from the perspective of a &lt;code&gt;pipenv&lt;/code&gt;
user.&lt;/p&gt;
&lt;p&gt;So... with that admin aside...&lt;/p&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;When I first got back into writing Python it was on macOS and, really early
on, I ran into all the usual issues: virtual environments breaking because
they were based on the system Python and it got updated, virtual
environments based on the Homebrew-installed Python and it got updated,
etc... Simply put, an occasional, annoying, non-show-stopping breaking of my
development environment which would distract me when I'd sat down to just
hack on some code, not do system admin!&lt;/p&gt;
&lt;h1&gt;My Solution&lt;/h1&gt;
&lt;p&gt;For me, what's worked for me without a problem over the past few years, in
short, is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use the system version of Python. Just don't.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use the Homebrew's own version of Python (I'm not even sure
   this is an issue any more; but it used to be).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; use a version of Python installed with Homebrew (or, more to
   the point, never install Python with Homebrew).&lt;/li&gt;
&lt;li&gt;Manage everything with &lt;a href="https://github.com/pyenv/"&gt;&lt;code&gt;pyenv&lt;/code&gt;&lt;/a&gt;; which I do
   install from Homebrew.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The Detail&lt;/h1&gt;
&lt;p&gt;As mentioned earlier, what I'm writing here assumes that virtual
environments are being managed with &lt;code&gt;pipenv&lt;/code&gt; (something I still do for
personal projects, for now, but this may change soon). Your choices and
mileage may vary, etc... This is what works well for me.&lt;/p&gt;
&lt;h2&gt;The "one time" items&lt;/h2&gt;
&lt;p&gt;These are the items that need initially installing into a new macOS machine:&lt;/p&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;Unless it comes from the Mac App Store, I try and install everything via
&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;. It's really handy for keeping track of what
I've got installed, for recreating a development environment in general, and
for keeping things up to date.&lt;/p&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;With Homebrew installed the next step for me is to install &lt;code&gt;pyenv&lt;/code&gt;. Doing so
is as easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once installed, if it's not done it for you, you may need to make some
changes to your login profile. I'm a user of &lt;a href="https://fishshell.com"&gt;fish&lt;/a&gt;
so I have &lt;a href="https://github.com/davep/fish/blob/efc77fd20c4bd2f36eb628730787924b6a56fcfd/conf.d/python.fish#L21-L25"&gt;these lines in my
setup&lt;/a&gt;.
Simply put: it asks pyenv to set up my environment so my calls to Python go
via its setup.&lt;/p&gt;
&lt;p&gt;Plenty of help on how to set up &lt;code&gt;pyenv&lt;/code&gt; can be found &lt;a href="https://github.com/pyenv/pyenv#installation"&gt;in its
README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I've done this I tend to go on and install the Python versions I'm
likely to need. For me this tends to be the most recent "active" stable
versions (as of the time of writing, 3.7 through 3.10; although I need to
now start throwing 3.11 into the mix too).&lt;/p&gt;
&lt;p&gt;I use this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to see the available versions. If I want to see what's available for a
specific version I'll pipe through grep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fgrep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  3.9&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is handy if I want to check what the very latest release of a specific
version of Python is.&lt;/p&gt;
&lt;h3&gt;The "Global" Python&lt;/h3&gt;
&lt;p&gt;When I'm done with the above I then tend to use &lt;code&gt;pyenv&lt;/code&gt; to set my "global"
Python. This is the version I want to get when I run &lt;code&gt;python&lt;/code&gt; and I'm not
inside a virtual environment. Doing that is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, you'd swap the version for whatever works for you.&lt;/p&gt;
&lt;h3&gt;When Stuff Breaks&lt;/h3&gt;
&lt;p&gt;It seems more rare these days, but on occasion I've had it such that some
update somewhere still causes my environment to break. Now though I find
that all it takes is a quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;rehash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and everything is good again.&lt;/p&gt;
&lt;h2&gt;Setting Up A Repo&lt;/h2&gt;
&lt;p&gt;With all of the stuff above being mostly a one-off (or at least something I
do once when I set up a new machine -- which isn't often), the real "work"
here is when I set up a fresh repository when I start a new project. Really
it's no work at all. Again, as I've said before, I've tended to use &lt;code&gt;pipenv&lt;/code&gt;
for my own work, and still do for personal stuff (but do want to change
that), mileage may vary here depending on tool.&lt;/p&gt;
&lt;p&gt;When I start a new project I think about which Python version I want to be
working with, I ensure I have the latest version of it installed with
&lt;code&gt;pyenv&lt;/code&gt;, and then ask &lt;code&gt;pipenv&lt;/code&gt; to create a new virtual environment with
that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you do this, you should see &lt;code&gt;pipenv&lt;/code&gt; pulling the version of Python from
the &lt;code&gt;pyenv&lt;/code&gt; directories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;--python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7
Creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;virtualenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;project...
Pipfile:&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/temp/cool-project/Pipfile
Using&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/.pyenv/versions/3.10.7/bin/python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.7&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;virtualenv...
â &lt;span class="w"&gt; &lt;/span&gt;Creating&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment...created&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment&lt;span class="w"&gt; &lt;/span&gt;CPython3.10.7.final.0-64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;795ms
&lt;span class="w"&gt;  &lt;/span&gt;creator&lt;span class="w"&gt; &lt;/span&gt;CPython3Posix&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/davep/temp/cool-project/.venv,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;no_vcs_ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;global&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;seeder&lt;span class="w"&gt; &lt;/span&gt;FromAppData&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wheel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bundle,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;via&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;copy,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;app_data_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/davep/Library/Application&lt;span class="w"&gt; &lt;/span&gt;Support/virtualenv&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;added&lt;span class="w"&gt; &lt;/span&gt;seed&lt;span class="w"&gt; &lt;/span&gt;packages:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;.2.2,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;.3.0,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wheel&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.37.1
&lt;span class="w"&gt;  &lt;/span&gt;activators&lt;span class="w"&gt; &lt;/span&gt;BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
â&lt;span class="w"&gt; &lt;/span&gt;Successfully&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;virtual&lt;span class="w"&gt; &lt;/span&gt;environment!
Virtualenv&lt;span class="w"&gt; &lt;/span&gt;location:&lt;span class="w"&gt; &lt;/span&gt;/Users/davep/temp/cool-project/.venv
Creating&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;Pipfile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;project...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key thing here is seeing that &lt;code&gt;pipenv&lt;/code&gt; is pulling Python from
&lt;code&gt;~/.pyenv/versions/&lt;/code&gt;. If it isn't there's a good chance you have a Python
earlier in your &lt;code&gt;PATH&lt;/code&gt; than the &lt;code&gt;pyenv&lt;/code&gt; one -- something you generally don't
want. It will work, but it's more likely to break at some point in the
future. That's the key thing I look for; if I see that I know things are
going to be okay.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Since I adopted these personal rules and approaches (and really, calling
them "rules" is kind of grand -- there's almost nothing to this) I've found
I've had near-zero issues with the stability of my Python virtual
environments (and what issues I have run into tend to be trivial and of my
own doing).&lt;/p&gt;
&lt;p&gt;As I said at the start: there are, of course, other approaches to this, but
this is mine and works well for me. Do feel free to comment with your own,
I'm always happy to learn about new ways!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 05 Nov 2022 08:49:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-11-05:/2022/11/05/python-and-macos.html</guid><category>Python</category><category>Python</category><category>macOS</category><category>coding</category></item><item><title>Build in public, even in private</title><link>https://blog.davep.org/2022/10/06/build-in-public-even-in-private.html</link><description>&lt;p&gt;As mentioned &lt;a href="/2022/10/05/on-to-something-new-redux.html"&gt;yesterday&lt;/a&gt;, I'm
about to start working at &lt;a href="https://www.textualize.io"&gt;Textualize&lt;/a&gt;, and
building Open-source software is important to the company.
&lt;a href="https://twitter.com/willmcgugan"&gt;Will&lt;/a&gt; -- the CEO -- is all about building
in public. If you follow him on Twitter you'll notice that his Python coding
adventure tweets actually outnumber is cooking tweets!&lt;/p&gt;
&lt;p&gt;As someone who has long been a supporter of and fan of &lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free
Software&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Open-source_software"&gt;Open-source
software&lt;/a&gt;, and has made
some small contributions along the way, I've also always made a point of
&lt;a href="https://github.com/davep/"&gt;building my own tools in public&lt;/a&gt;. In most cases
they're things that are likely only helpful to me, but some are more
generally useful. The point being though: it's all there in case it's
helpfull to someone else.&lt;/p&gt;
&lt;p&gt;Which means that, as much as possible, when I'm writing code, I write it as
if it's going to be visible in public and someone else is going to be
reading it. I try and make the code tidy. I try and comment it well. I try
(but don't always manage for personal projects) to fully document it. The
important thing here being that someone coming to the code fresh should be
able to follow what's going on.&lt;/p&gt;
&lt;p&gt;Against that background, and having just gone through the process of handing
off almost 5 years of work to someone else as a left an employer, I got to
thinking: we should always "build in public", even if it's in private.&lt;/p&gt;
&lt;p&gt;When I started with my previous employer, and even to the day I left, I was
the only software developer there. I worked with a team who wrote code, but
being software developers wasn't what they did. Bioinformaticians and
machine learning scientists have other things to be doing. But, as I wrote
my code, I wrote every line assuming they, or some other developer down the
line, would be reading it. Pretty much every line was written for an
audience I couldn't see and didn't fully know. This, as mentioned above,
meant trying to keep the code clean, ensuring it was commented in helpful
ways, ensuring the documentation was helpful, and so on.&lt;/p&gt;
&lt;p&gt;But it wasn't just about the code. Any non-trivial system will have more to
it than code. We had an internal instance of GitLab and I tracked all of my
work on there. So, as I planned and worked on new features, or went on bug
hunts, I'd document the process in the issue tracker. As much as possible
I'd be really verbose about the process. Often I wouldn't just open an
issue, go work on it, and then mark it closed; as I worked through the issue
I'd add comment after comment under it, documenting my thinking, problems,
solutions, cite sources when looking something up, that sort of thing.&lt;/p&gt;
&lt;p&gt;The whole process was an act in having a conversation with current or future
team members if they ever needed to look; with future me (really, that
helped more than once -- we all have those "that the &lt;em&gt;hell&lt;/em&gt; was I thinking?"
moments); with any developer(s) who took over from me in the future.&lt;/p&gt;
&lt;p&gt;I did all this as if I was broadcasting it in public &lt;a href="https://twitter.com/davepdotorg"&gt;on
Twitter&lt;/a&gt; or &lt;a href="https://github.com/davep"&gt;on
GitHub&lt;/a&gt;, etc. It was in private, of course, but I
approached it as if it was in public.&lt;/p&gt;
&lt;p&gt;There were always three main reasons for this, I felt:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accountability. At any moment someone who I worked with could review what
   I was doing and why I was doing it; it was an invitation to anyone
   curious enough to talk with me about what I was building and how I was
   building it.&lt;/li&gt;
&lt;li&gt;Continuity of support for unplanned reasons. Life happens, sometimes you
   may, unplanned, never be available at work again. I never wanted to leave
   my employer in a position where picking up from such an event was a
   nightmare.&lt;/li&gt;
&lt;li&gt;Continuity of support for planned reasons. It was possible, and it became
   inevitable, that I'd move on to something else. If that was to happen I
   wanted to be sure that whoever picked up after me would be able to do so
   without too much effort.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end item 3 seemed to really pay off. When it came time for me to hand
over my work to someone else, as I left, the process was really smooth and
trouble-free. I was able to point the developer at all the documentation and
source code, at all the issues, and invite them to read through it all and
then come back to me with questions. In terms of time actually spent talking
about the main system I was handing over I'd say that 4 years of work was
handed over with just a few hours of actual talking about it.&lt;/p&gt;
&lt;p&gt;It remains to be seen if it really paid off, of course. If they get really
stuck they do have an open invitation to ping me a question or two; I care
enough about what I designed and built that I want it to carry on being
useful for some time to come. But... I like to think that all of that
building in public, in private, will ensure that this is an invitation that
never needs to be called on. I like to think that, if something isn't clear,
they'll be able to check the code, the documentation and the issue history
and get to where they need to go.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 06 Oct 2022 10:44:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-10-06:/2022/10/06/build-in-public-even-in-private.html</guid><category>Coding</category><category>coding</category></item><item><title>On to something new (redux)</title><link>https://blog.davep.org/2022/10/05/on-to-something-new-redux.html</link><description>&lt;p&gt;Just over five years ago I got a message from my then employer to say I was
going to be made redundant after 21 years working for them. After the 3
month notice period the final day came. Meanwhile, I found something new
that &lt;a href="/2017/12/12/on_to_something_new.html"&gt;looked terrifying but
interesting&lt;/a&gt;. In the end it was less
terrifying and way more interesting than I imagined it would be. It was fun
too.&lt;/p&gt;
&lt;p&gt;But... (there's always a but isn't there?)&lt;/p&gt;
&lt;p&gt;In the four and change years I've been there the company got bought out, and
then the result of that got bought up. As I've mentioned before I'm
generally not a "big company" kind of person; in all my years I've found
that I'm happier working in a smaller place. After a couple of buyouts my
employer had gone from being 10s of people in size to 100s of people in size
(and technically 10s of 1,000s of people in size depending on how you look
at it).&lt;/p&gt;
&lt;p&gt;This change in ownership and size meant the culture became... well, let's
just say not as friendly as you tend to enjoy when it's a smaller group of
folk. On top of that I was starting to notice that my efforts were making
less of an impact as things got bigger, and I started to feel like my
contributions weren't really relevant any more. There were some problematic
things happening too: undermining of efforts, removal of responsibilities
without consultation or communication, that sort of thing. Plus worse.
There's little point in going into the detail, but it's fair to say that
work wasn't as fun as it used to be.&lt;/p&gt;
&lt;p&gt;That felt like a good time to start to look around. If work makes you feel
unhappy and you can look around... look around.&lt;/p&gt;
&lt;p&gt;Thing is, I wasn't sure what to look for. I was in the comfortable position
of, unlike last time, not &lt;em&gt;needing&lt;/em&gt; to find something, so I could take my
time at least. Over the course of the last year I've spoken to many
different companies and organisations, some big (yes, I know, I said I don't
like big places -- sometimes what's on offer deserves a fair hearing), some
small, but none of them quite said &lt;em&gt;"this feels like me"&lt;/em&gt;. In some cases the
whole thing didn't have the right vibe, in others the industry either didn't
interest me, or felt uncomfortable given my personal values. In one
particular case a place looked interesting until I checked the CTO's socials
and OMG NO NO NO AVOID AVOID (that was a fun one).&lt;/p&gt;
&lt;p&gt;Then I saw &lt;a href="https://twitter.com/willmcgugan"&gt;Will McGugan&lt;/a&gt; saying he was
hiring to expand &lt;a href="https://www.textualize.io/"&gt;Textualize&lt;/a&gt;. This caught my
interest right away for two good reasons.&lt;/p&gt;
&lt;p&gt;I can't remember how long I've been following Will on Twitter; I likely
stumbled on him as I got back into Python in 2018 and I also remember noting
that he was a Python hacker just up the road from me. We'd vaguely chatted
on Twitter, briefly, in that "Twitter acquaintance" way we all often do (I
remember &lt;a href="https://twitter.com/davepdotorg/status/1438887277623750661"&gt;one brief exchange about fungus on The
Meadows&lt;/a&gt;), and
he'd seemed like a good sort. A small company run by a "good sort" kinda
person felt like a damn good reason.&lt;/p&gt;
&lt;p&gt;The second reason was Textual itself. I'd been watching Will develop it, in
open, with great interest. I had (and still have) a plan to write a brand
new CHUI-based (okay fine TUI-based as the kids like to say these days!)
Norton Guide reader, all in Python, and Textual looked like the perfect
framework to do the UI in. The chance to be involved with it sounded
awesome.&lt;/p&gt;
&lt;p&gt;Now, I said two reasons, but there's also a third I guess: Will's pitch for
applying to Textualize felt so damn accessible! I'm on the older end of the
age range of this industry; for much of my working life as a developer I've
worked in isolation from other developers; while I first touched Python in
the 90s, I've only been using it in anger since 2018 and still feel like
I've got a lot to learn. Despite all these things, and more, saying &lt;em&gt;"aye
Dave this is beyond you"&lt;/em&gt; I felt comfortable dropping Will a line.&lt;/p&gt;
&lt;p&gt;Which resulted in a chat.&lt;/p&gt;
&lt;p&gt;Which resulted in some code tinkering and chatting.&lt;/p&gt;
&lt;p&gt;Which resulted in...&lt;/p&gt;
&lt;p&gt;Something new.&lt;/p&gt;
&lt;p&gt;So, yeah, as of 2022-10-10 I'm on yet another new adventure. Time for me to
&lt;em&gt;really&lt;/em&gt; work on my Python coding as I work with Will and the rest of the
team as part of Textualize.&lt;/p&gt;
&lt;p&gt;Or, as I put it on Twitter a few days ago: &lt;a href="https://twitter.com/davepdotorg/status/1574121611413921792"&gt;I'm going to be a Python
impostor syndrome
speedrunner&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Wed, 05 Oct 2022 09:24:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-10-05:/2022/10/05/on-to-something-new-redux.html</guid><category>Life</category><category>coding</category><category>work</category><category>life</category><category>Python</category><category>news</category></item><item><title>I must be getting old</title><link>https://blog.davep.org/2022/08/23/i-must-be-getting-old.html</link><description>&lt;p&gt;A little earlier this evening I got &lt;a href="https://github.com/davep/boxquote.el/issues/7"&gt;a new
issue&lt;/a&gt; raised against
&lt;a href="(https://github.com/davep/boxquote.el/issues/7)"&gt;&lt;code&gt;boxquote.el&lt;/code&gt;&lt;/a&gt;. Apparently
Emacs 29 (I'm running 28.1 as of the time of writing) is moaning about the
likes of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;some-location-or-other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There's a whole background to why I've tended to code like that, that stems
from enjoying Common Lisp, my days reading (and sometimes posting to)
&lt;code&gt;comp.lang.lisp&lt;/code&gt;, and I &lt;em&gt;think&lt;/em&gt; some of the stuff &lt;a href="https://en.wikipedia.org/wiki/Erik_Naggum"&gt;Erik
Naggum&lt;/a&gt; wrote back in the day. I
won't get into it all now; I'm not sure I can even remember a lot of how I
got there given how far back it was.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;Wanting to quickly get to the bottom of why the above was suddenly an issue,
I dived into the &lt;code&gt;NEWS&lt;/code&gt; file and &lt;a href="https://github.com/emacs-mirror/emacs/blob/67a15ce1564ce35ece24a19f00e03a36e0575746/etc/NEWS#L2585"&gt;found the
following&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seldom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generalized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;been&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;made&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obsolete&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Emacs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rather&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obscure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generalized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caught&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;been&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;made&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obsolete&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;saying&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;narrow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generalized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;been&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;made&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obsolete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;buffer-file-name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buffer-local-value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buffer-modified-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;buffer-name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buffer-string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buffer-substring&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current-buffer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;current-column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current-global-map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current-input-mode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;current-local-map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current-window-configuration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default-file-modes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;documentation-property&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frame-height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;frame-visible-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;global-key-binding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local-key-binding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;mark-marker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;marker-position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouse-position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;point&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;point-marker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;point-max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;point-min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read-mouse-position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;screen-height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;screen-width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selected-frame&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selected-screen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;selected-window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;standard-case-table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;syntax-table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;visited-file-modtime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window-height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window-width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;x-get-secondary-selection&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As suggested above... this is my thing, this is how I coded some Elisp
stuff. Look through much of my &lt;a href="https://elisp.dev/"&gt;Emacs Lisp code&lt;/a&gt; and
you'll find me &lt;code&gt;setf&lt;/code&gt;ing stuff all over the place.&lt;/p&gt;
&lt;p&gt;Apparently my style is "obscure". Actually, I'm kinda okay with that if I'm
honest.&lt;/p&gt;
&lt;p&gt;This is going to be a bit of a pain in the arse; I'm going to have to go
through a whole bunch of code and make it "less obscure", at some point.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;This isn't the part that had me thinking I must be getting old. Oh no. The
&lt;code&gt;NEWS&lt;/code&gt; file had another little surprise in store:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;quickurl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obsolete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;abbrev&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;skeleton&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;tempo&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That.... that's me that is. Well, it's one of the me things. If you run
&lt;code&gt;about-emacs&lt;/code&gt;, dive into &lt;code&gt;Authors&lt;/code&gt;, and search for my name, in any copy of
GNU Emacs from the last decade or two, you'll find this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Dave Pearson: wrote 5x5.el quickurl.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/davep/quickurl.el/blob/master/quickurl.el"&gt;&lt;code&gt;quickurl.el&lt;/code&gt;&lt;/a&gt;
was a package I wrote back in the late 1990s, back when I was a very heavy
user of &lt;a href="https://en.wikipedia.org/wiki/Usenet"&gt;Usenet&lt;/a&gt;, and often found
myself posting the same URLs in posts again and again; especially in
&lt;code&gt;comp.lang.clipper&lt;/code&gt;. As a fairly quick hack I wrote the code so that I could
very quickly insert often-used URLs.&lt;/p&gt;
&lt;p&gt;Some time later, I got an email from the
&lt;a href="https://en.wikipedia.org/wiki/Free_Software_Foundation"&gt;FSF&lt;/a&gt; (I actually
think it was from &lt;a href="https://en.wikipedia.org/wiki/Richard_Stallman"&gt;RMS&lt;/a&gt; --
but that's an &lt;a href="https://en.wikipedia.org/wiki/Mbox"&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; I've long ago
lost -- or a backup of it might be in storage back in England, on a DVD),
asking if I wanted to contribute it to Emacs proper. This seemed like an odd
thing to add to Emacs but, sure, why the hell not?&lt;/p&gt;
&lt;p&gt;And so I had my second contribution to a body of code I used a lot (the
first being &lt;a href="https://github.com/davep/5x5.el"&gt;&lt;code&gt;5x5.el&lt;/code&gt;&lt;/a&gt; -- which itself was
my first ever attempt at writing some non-trivial Elisp code).&lt;/p&gt;
&lt;p&gt;So... yeah... here we are. I'm now old enough to have written some Emacs
Lisp code, had it required by the FSF for inclusion in Emacs, had it live in
there for something like two decades, and then &lt;em&gt;become obselete&lt;/em&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Tue, 23 Aug 2022 21:31:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-08-23:/2022/08/23/i-must-be-getting-old.html</guid><category>Emacs</category><category>Emacs</category><category>Lisp</category><category>Emacs Lisp</category></item><item><title>Failed successfully</title><link>https://blog.davep.org/2022/06/03/failed-successfully.html</link><description>&lt;p&gt;A couple of days back (for vague values of "couple", of course), first of
the month, having my morning coffee, I go and open my bank's mobile app to
move a bit of money about and pay a couple of things. This happens every
month. This is so routine I do it almost on autopilot.&lt;/p&gt;
&lt;p&gt;Yeah, yeah, I know, it's banking, pay attention! But still... morning,
coffee, routine.&lt;/p&gt;
&lt;p&gt;I get to the final movement/payment and then notice something:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Useless error message" src="/attachments/2022/06/03/Unexpected-error.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;That.... that text! WTF? So then I look back at my payment history and
notice that all but one payment &lt;em&gt;hadn't&lt;/em&gt; gone through! O_o&lt;/p&gt;
&lt;p&gt;This alone is fine. Stuff happens. Things fail. I'm okay with that. It's an
inconvenience for sure but doubtless whatever the problem is will be fixed
and I can make the payments again later. But...&lt;/p&gt;
&lt;p&gt;That result. There's a tick. A &lt;strong&gt;GREEN&lt;/strong&gt; tick. And a "Thank you". It's
natural to see that image, know that it's always meant "shit worked" and
just carry on.&lt;/p&gt;
&lt;p&gt;In one of my systems at work there's a tool I wrote for checking a
repository of code to make sure it conforms to a certain standard. When folk
use it they get a night big, bold and bright green thumb-up above the text
that says everything is cool. If there's a problem, any sort of problem at
all, then the display is red and there's no jolly icon and it's obvious that
things are different and you likely want to pay attention to the explanation
of what isn't right.&lt;/p&gt;
&lt;p&gt;This isn't news, of course. This isn't some revelation about UI design or
anything. We know this stuff. I think what boggles my mind a little bit
about this is that something as important -- and hopefully by this point as
mature -- as a mobile banking app should get something as obvious as this
right.&lt;/p&gt;
&lt;p&gt;But here we are, with a nice friendly green icon showing a tick and a
friendly big "Thank you" followed by smaller text going "aye shit didn't
work pal".&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 03 Jun 2022 09:05:05 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-06-03:/2022/06/03/failed-successfully.html</guid><category>Tech</category><category>UI</category><category>UX</category></item><item><title>My VR recording setup</title><link>https://blog.davep.org/2022/05/28/my-vr-recording-setup.html</link><description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;For well over a year now I've been recording my VR gameplay &lt;a href="https://www.youtube.com/user/daveporg"&gt;and uploading
it to YouTube&lt;/a&gt;. Less as a "content
creation" thing, more as a nice record of games I've played and, on
occasion, as a little bit of help to others; in the past I've watched other
folk play games I like to get ideas for approaches to them, and I've also
received the odd comment now and again where my play-through has helped
someone else.&lt;/p&gt;
&lt;p&gt;A question I've had a couple of times is what I use to do the recording, so
I thought I'd make an effort to write it all down here.&lt;/p&gt;
&lt;p&gt;First up, a couple of things to note: I started recording PCVR around April
2021 and the initial setup was a bit trial-and-error and Google searching
and blog reading. As such, not all of the details of &lt;em&gt;how&lt;/em&gt; to set up will be
here, and I may even miss off some stuff I changed and is worthy of note; at
the same time I might mention stuff that's just an obvious default.&lt;/p&gt;
&lt;p&gt;Consider this blog post as being a written version of one of my videos: it's
for my own fun and benefit and might also help me in the future should I
want to apply some of this again, and if it helps someone else that's a
lovely bonus.&lt;/p&gt;
&lt;h1&gt;The Hardware&lt;/h1&gt;
&lt;p&gt;While it's not exactly the point of this post, I guess it's worth mentioning
the hardware I use as of the time of writing. Given this is about PCVR, I of
course have a PC which is running Windows. The machine information within
Windows says it's a:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Intel(R) Core(TM) i5-10400F CPU @ 2.90GHz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Warning: I don't do hardware. I buy it from time to time, but hardware
leaves me bored. It runs VR on a PC. This is fine.&lt;/p&gt;
&lt;p&gt;The machine itself has 16 GB of memory, is running Windows 10 Home and has a
GeForce RTX 3060 for handling the graphics.&lt;/p&gt;
&lt;p&gt;The headset I'm using is a~~n Oculus~~ Meta Quest 2. I've had this
since around November 2020, playing Quest-native games for the first few
months, until I cracked and got the PC mentioned here to get into PCVR.&lt;/p&gt;
&lt;p&gt;The headset is connected to the PC with &lt;a href="https://www.amazon.co.uk/gp/product/B08MJDNV4F/"&gt;a USB
cable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, for recording voice, I use a &lt;a href="https://www.amazon.co.uk/gp/product/B08T1S7NRP/?th=1"&gt;USB lapel microphone with a really
long cable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should be said that, yes, sometimes, I do get a little caught up in
things with two cables hanging off me. If I could give one tip here it would
be that running the microphone cable up your trousers and shirt makes life a
ton easier. As a bonus I have the USB cable for the headset running around
the headset's strap and connected to it at the back and then running down my
back.&lt;/p&gt;
&lt;h1&gt;OBS Studio&lt;/h1&gt;
&lt;p&gt;The core software used is &lt;a href="https://obsproject.com/"&gt;OBS Studio&lt;/a&gt;. This has
got to be one of the best bits of free software I've ever used, in terms of
interface and what it delivers.&lt;/p&gt;
&lt;p&gt;Years back my son used to record and upload gameplay to YouTube and I can
remember him having no end of issues using different recording software;
some working with one game but not another, some other working with a
different set of games, video and sync issues, etc... Lots of pain quite
often. With OBS Studio the only issues I've ever had have been my own
mistakes.&lt;/p&gt;
&lt;p&gt;At this point I have to confess that when I set it up I didn't make a point
of keeping a recording of what I changed -- I was experimenting and not
expecting much to come of it. So what I note here are the things that feel
like they're important, and only the things that relate to recording PCVR,
not streaming it (that might end up being a different blog post).&lt;/p&gt;
&lt;p&gt;That said, here are things I seem to remember as being key:&lt;/p&gt;
&lt;h2&gt;Output Settings&lt;/h2&gt;
&lt;p&gt;The items in the output pane in settings that I have and which might be
important are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Output Mode:&lt;/code&gt; Simple&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Recording Quality&lt;/code&gt;: High Quality, Medium File Size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Recording format&lt;/code&gt;: mkv&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoder&lt;/code&gt;: Hardware (NVENC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I do remember the recording format being set to &lt;code&gt;mkv&lt;/code&gt; as something that's
really important. I think it's &lt;code&gt;mp4&lt;/code&gt; by default, or was when I first
installed, and if your machine crashes or OBS were to crash or something,
you could end up with footage that can't be used. Using &lt;code&gt;mkv&lt;/code&gt; means you can
still use the footage (as I understand it). It does mean that once you're
finished you have to use the "remux" option under the &lt;code&gt;File&lt;/code&gt; menu, but
that's a small price to pay.&lt;/p&gt;
&lt;p&gt;I can say that at least once I've had to hard-reboot my machine when a game
and SteamVR and the like all got upset. I likely saved 45 minutes or more of
footage thanks to &lt;code&gt;mkv&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Video Settings&lt;/h1&gt;
&lt;p&gt;Nothing really special in here, I simply have both the base and output
resolutions set to the desktop resolution. This &lt;em&gt;might&lt;/em&gt; be something for me
to tinker with in the future, but so far I've not run into any problems.&lt;/p&gt;
&lt;h1&gt;VR Capture&lt;/h1&gt;
&lt;p&gt;Now, of course, all of the above is great and fine and all but there's the
issue of how you capture the VR gameplay. I approach this a couple of
different ways. The first is I use the &lt;a href="https://github.com/baffler/OBS-OpenVR-Input-Plugin"&gt;OpenVR Capture plugin for
OBS&lt;/a&gt;. This makes
capturing footage from SteamVR really easy. The only downside I found is
that out of the box there's no default crop setting for using a Quest 2 (or
I guess the Rift, as the Quest 2 sort of appears as a Rift to SteamVR
games). As such I remember playing trial and error with that until I was
happy I was getting as much footage as possible without having black bars
and the like.&lt;/p&gt;
&lt;p&gt;Something I also like about the OpenVR Capture plugin is you can say if you
want to capture the left or right eye. Normally not that big a deal for some
things, but if you're playing a shooter and want people to see exactly what
your dominant eye is seeing, that matters.&lt;/p&gt;
&lt;p&gt;Sadly, of course, not every game can be captured with that plugin. So far
I've found that any game that can't be has its own mirror window on the
desktop. In that case I use a &lt;code&gt;Game Capture&lt;/code&gt; source and set it to capture
that specific window. I could of course just get it to capture the focused
window or something like that but I prefer to know that it's only grabbing
what I want it to grab.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That's pretty much it I think. There's not a lot to it, although on occasion
a lot can go wrong. Mostly it's a wonder any of it works. I mean, think
about it, I have a computer with two screens strapped to my face, with two
controllers in my hands talking to it; it's then connected via the Oculus
Link to the Oculus Home; from which I start up SteamVR; and from the SteamVR
home I start up the game and then "live" inside the game. It's a virtual
world inside a virtual world inside a virtual world inside a real world;
with lots of software along the way, all talking at once.&lt;/p&gt;
&lt;p&gt;That is then being recorded.&lt;/p&gt;
&lt;p&gt;Sometimes, on occasion, it takes a reboot or five to make it all work
together.&lt;/p&gt;
&lt;p&gt;Really, it's a wonder it ever works. ;-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 28 May 2022 17:01:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-05-28:/2022/05/28/my-vr-recording-setup.html</guid><category>Tech</category><category>VR</category><category>YouTube</category><category>PCVR</category></item><item><title>I'm back!</title><link>https://blog.davep.org/2022/05/20/im-back.html</link><description>&lt;p&gt;I'm back! Almost. More or less. In more ways than one. First off, as often
happens with blogs (we've all been there right?), I've been away from
blogging for a while. I've still been online, still been waffling away &lt;a href="https://twitter.com/davepdotorg"&gt;on
twitter&lt;/a&gt;, and have also stumbled into
&lt;a href="https://fosstodon.org/@davep"&gt;fosstodon as well&lt;/a&gt;. Doubtless plenty of other
things.&lt;/p&gt;
&lt;p&gt;A big distraction for me, and one that is ongoing, is &lt;a href="https://www.youtube.com/user/daveporg"&gt;mucking about on
YouTube&lt;/a&gt;. Since the last time I wrote
anything on the blog I got myself a VR setup, and then a PCVR setup, and
then finally fibre came to the village and I could stream, and... well, you
can see how that would go.&lt;/p&gt;
&lt;p&gt;So, in short, that's where I've been and that's what's been keeping me busy.
Now that I'm paying some attention to blogging again (hopefully!) I imagine
some of that will end up on here -- I'd quite like to write about VR and
gaming amongst other things.&lt;/p&gt;
&lt;p&gt;Now, I said I'd been away in more ways than one. Another way is explained by
&lt;a href="/2019/10/18/time-to-move-on.html"&gt;this post from back in 2019&lt;/a&gt;, where I
said I was going to head &lt;a href="https://blog.davep.dev/"&gt;over to Hashnode&lt;/a&gt; and
carry on blogging there, obviously with an emphasis on development and just
development.&lt;/p&gt;
&lt;p&gt;That kept me busy for a while and worked out well, mostly. But... well, see
above in part; I sort of ran out of steam when it came to purely-development
topics. But I still wanted to write, a bit, and wanted to write about more
than just development.&lt;/p&gt;
&lt;p&gt;Also, something else was bothering me about being over on Hashnode. In the
past year, in terms of what they promote themselves, especially blogs and
posts they promote on their Twitter feed, they seem to have started to lean
really hard into &lt;a href="https://www.youtube.com/watch?v=YQ_xWvX1n9g"&gt;crypto and web3 and
NFTs&lt;/a&gt; and all that stuff. This
left me feeling like that was all a bit icky and it was time to put some
distance between that platform and myself.&lt;/p&gt;
&lt;p&gt;So over the past couple of weeks, low-level and as a background task, I've
been back-porting posts from over there back into this blog. Starting with
this post all new blog content, be it about software development or anything
else, will be on here. If I'm really sensible and don't get distracted by
new shiny... this should be how it remains now.&lt;/p&gt;
&lt;p&gt;Expect some changes over the next few weeks. While I'm aiming to stick with
the core tech (Github pages, Markdown and Jekyll, Emacs to edit, etc), I'd
like to tinker with the look and layout of the blog. The content will remain
the same though.&lt;/p&gt;
&lt;p&gt;So, yeah, anyway, if you're reading this... hey, it's good to be back. :-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 20 May 2022 12:44:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2022-05-20:/2022/05/20/im-back.html</guid><category>Meta</category><category>news</category><category>blogging</category></item><item><title>Reading 2bit files (for fun) - the sequence</title><link>https://blog.davep.org/2020/09/26/reading-2bit-files-for-fun-the-sequence.html</link><description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post will cover the most important content of a 2bit file: the actual
sequence data itself. In &lt;a href="/2020/08/30/reading-2bit-files-for-fun.html"&gt;the first
post&lt;/a&gt; I wrote about the format
of the file's header, and in &lt;a href="/2020/09/05/reading-2bit-files-for-fun-the-index.html"&gt;the second
post&lt;/a&gt; I wrote about
the content of the file's index.&lt;/p&gt;
&lt;p&gt;At this point that's enough information to know what's in the file and where
to find it. In other words we know the list of sequences that live in the
file, and we know where each one is positioned within the file. So, assuming
we have our index in memory (ideally some sort of key/value store of
sequences names and their offsets in the file), given the name of a sequence
we can know where to go in the file to load up the data.&lt;/p&gt;
&lt;p&gt;So the next obvious question is, what will we find when we get there? Actual
sequence data is stored like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DNA size&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Count of bases in the sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N block count&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Count of N blocks in the sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N block starts&lt;/td&gt;
&lt;td&gt;Integer Array&lt;/td&gt;
&lt;td&gt;4*count bytes&lt;/td&gt;
&lt;td&gt;Positions are zero-based&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N block sizes&lt;/td&gt;
&lt;td&gt;Integer Array&lt;/td&gt;
&lt;td&gt;4*count bytes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mask block count&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Count of mask blocks in the sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mask block starts&lt;/td&gt;
&lt;td&gt;Integer Array&lt;/td&gt;
&lt;td&gt;4*count bytes&lt;/td&gt;
&lt;td&gt;Positions are zero-based&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mask block sizes&lt;/td&gt;
&lt;td&gt;Integer Array&lt;/td&gt;
&lt;td&gt;4*count bytes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Should always be 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNA data&lt;/td&gt;
&lt;td&gt;Byte Array&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Breaking the above down:&lt;/p&gt;
&lt;h1&gt;N blocks&lt;/h1&gt;
&lt;p&gt;As mentioned in passing in the first post: technically it's necessary to
encode 5 different characters for the bases in the sequences. As well as the
usual T, C, A and G, there also needs to be an N, which means the base is
unknown. Now, of course, you can't pack 5 states into two bits, so the 2bit
file format solves this by having an array of block positions and sizes
where any data in the actual DNA itself should be ignored and an &lt;code&gt;N&lt;/code&gt; used in
its place.&lt;/p&gt;
&lt;h1&gt;Mask blocks&lt;/h1&gt;
&lt;p&gt;This is where my ignorance of bioinformatics shows, and where it's made very
obvious that I'm a software developer who likes to muck about with data and
data structures, but who doesn't always understand why they're used. I'm
actually not sure what purpose mask blocks serve in a 2bit file, but they
&lt;em&gt;do&lt;/em&gt; affect the output. If a base falls within a mask block the value that
is output should be a lower-case letter, rather then upper-case.&lt;/p&gt;
&lt;h1&gt;The DNA data&lt;/h1&gt;
&lt;p&gt;So this is the fun bit, where the real data is stored. This should be viewed
as a sequence of bytes, each of which contains 4 bases (except for the last
byte, of course, which might contain 1, 2 or 3 depending on the size of the
sequence).&lt;/p&gt;
&lt;p&gt;Each byte should be viewed as an array of 2 bit values, with the values
mapping like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Binary&lt;/th&gt;
&lt;th&gt;Decimal&lt;/th&gt;
&lt;th&gt;Base&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, given a byte whose value is &lt;code&gt;27&lt;/code&gt;, you're looking at the sequence &lt;code&gt;TCAG&lt;/code&gt;.
This is because &lt;code&gt;27&lt;/code&gt; in binary is &lt;code&gt;00011011&lt;/code&gt;, which breaks down as:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;00&lt;/th&gt;
&lt;th&gt;01&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;How you pull that data out of the byte will depend on the language and what
it makes available for bit-twiddling; those that don't have some form of
&lt;a href="https://en.wikipedia.org/wiki/Bit_field"&gt;bit field&lt;/a&gt; will probably provide
the ability to bit shift and do a bitwise &lt;code&gt;and&lt;/code&gt; (it's also likely that doing
bitwise operations is better than using bit fields anyway). In the version I
wrote in Emacs Lisp, it's simply a case of shifting the two bits I am
interested in over to the right of the byte and then performing a bitwise
and to get just its value. So, given an array called &lt;code&gt;2bit-bases&lt;/code&gt; whose
content is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defconst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2bit-bases&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Vector of the bases.&lt;/span&gt;

&lt;span class="s"&gt;Note that the positions of each base in the vector map to the 2bit decoding&lt;/span&gt;
&lt;span class="s"&gt;for them.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I use this bit of code to pull out the individual bases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2bit-bases&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;logand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mb"&gt;#b11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Given code to unpack an individual byte, extracting all of the bases in a
sequence then becomes the act of having two loops, the outer loop being over
each byte in the file, the inner loop being over the positions within each
individual byte.&lt;/p&gt;
&lt;p&gt;In pseudo-code, assuming that &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; hold the base locations
we're interested in and &lt;code&gt;dna_pos&lt;/code&gt; is the location in the file where the DNA
starts, the main loop for unpacking the data looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; &amp;quot;T&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;G&amp;quot; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Calculate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;start_byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dna_pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end_byte&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dna_pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Work&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;starting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dna_pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DNA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read_n_bytes_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;intersect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;n_blocks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant_n_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;mask_blocks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relevant_mask_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;over&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;every&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stepping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;downto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re interested in this location.&lt;/span&gt;
&lt;span class="s1"&gt;    if ( position &amp;gt;= start ) and ( position &amp;lt; end )&lt;/span&gt;

&lt;span class="s1"&gt;      # If this position is in an N block, just collect an N.&lt;/span&gt;
&lt;span class="s1"&gt;      if within( position, n_blocks )&lt;/span&gt;
&lt;span class="s1"&gt;        sequence = sequence + &amp;quot;N&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;      else&lt;/span&gt;

&lt;span class="s1"&gt;        # Not a N, so we should decode the base.&lt;/span&gt;
&lt;span class="s1"&gt;        base = bases[ ( byte &amp;gt;&amp;gt; shift ) &amp;amp; 0b11 ]&lt;/span&gt;

&lt;span class="s1"&gt;        # If we&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;within&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mask_blocks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;along&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that some of the detail is left out in the above, especially the
business of loading up the relevant blocks; how that would be done will
depend on language and the approach to writing the code. The Emacs Lisp code
I've written has what I think is a fairly straightforward approach to it.
There's a similar approach in the &lt;a href="https://github.com/davep/org-davep-2bit"&gt;Common Lisp code I've
written&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that's pretty much it. There are a few other details that differ
depending on how this is approached, the language used, and other
considerations; one body of 2bit reader code that I've written attempts to
optimise how it does things as much as possible because it's capable of
reading the data locally or via ranged HTTP GETs from a web server; the
Common Lisp version I wrote still needs some work because I was having fun
getting back into Common Lisp; the Emacs Lisp version needs to try and keep
data as small as possible because it's working with buffers, not direct file
access.&lt;/p&gt;
&lt;p&gt;Having got to know the format of 2bit files a fair bit, I'm adding this to
my list of "fun to do a version of" problems when getting to know a new
language, or even dabbling in a language I know.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 26 Sep 2020 15:57:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2020-09-26:/2020/09/26/reading-2bit-files-for-fun-the-sequence.html</guid><category>Coding</category><category>Bioinformatics</category></item><item><title>Reading 2bit files (for fun) - the index</title><link>https://blog.davep.org/2020/09/05/reading-2bit-files-for-fun-the-index.html</link><description>&lt;p&gt;As mentioned in &lt;a href="/2020/08/30/reading-2bit-files-for-fun.html"&gt;the first
post&lt;/a&gt;, once you've read in the
header data for a 2bit file, the next step is to read the index. This is an
index into all the different sequences held in the file. Reading the index
itself is fairly straightforward.&lt;/p&gt;
&lt;p&gt;The index comes right after the header -- so it starts on the 17th byte of
the file. Each entry in the index contains three items of information:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name length&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;How many bytes long the name is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Varies&lt;/td&gt;
&lt;td&gt;Length given by previous field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Offset&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Location in the file of the sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, in some sort of pseudo-code, you'd read in the index as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;dict&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seq_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seq_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;comes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;header&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;name_len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;read_bytes&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;read_bytes&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name_len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;read_bytes&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;[&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note, as mentioned in the &lt;a href="/2020/08/30/reading-2bit-files-for-fun.html"&gt;first
post&lt;/a&gt;, the &lt;code&gt;index&lt;/code&gt; will need to
be byte-swapped if the file is in an endian form other than the machine
you're running your code on. How you'd go about this will, of course, vary
from language to language, but the main idea is always going to be the same.&lt;/p&gt;
&lt;p&gt;There's a fairly striking downside to this approach though: reading data can
often be an expensive (in terms of time) operation -- this is especially
true if the data is coming in from a remote machine, perhaps even one that's
being accessed over the Internet. As such, it's best if you can make as few
"trips" to the file as possible.&lt;/p&gt;
&lt;p&gt;With this in mind, the best thing to do is to read the whole index into
memory in one go and then process it from there -- the idea being that
that's just one trip to the data source. The problem here, however, is that
there's nothing in the header or the index that tells you how large the
index actually is. What you can do though is work on the worst case scenario
(assuming memory will allow). The worst case is fairly easy to handle: it's
going to be 1 byte for the name length, plus 255 bytes for the name (the
longest possible name), plus 4 bytes for the offset; multiply all that by
the number of sequences in the index and you have the worst-case buffer
size.&lt;/p&gt;
&lt;p&gt;When reading this data in you might also want to ensure you're not going to
run off the end of the file (perhaps the names are all quite small and so
are the sequences).&lt;/p&gt;
&lt;p&gt;Recently I've been working on &lt;a href="https://github.com/davep/2bit.el"&gt;a package for Emacs that can read data from
2bit files&lt;/a&gt;, so here's the core code for
reading in the index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2bit--read-index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Read the sequence index from SOURCE.&lt;/span&gt;

&lt;span class="s"&gt;As a side effect &lt;/span&gt;&lt;span class="ss"&gt;`2bit-data-pos&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; of SOURCE will move.&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cl-loop&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; The index will be a hash of sequence names, with the values being the&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; offsets within the file.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-hash-table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;:test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#&amp;#39;equal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; We could read each name/value pair one by one, but because we&amp;#39;re doing&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; this within Emacs, which means making a temp buffer for every read,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; that could get pretty expensive pretty fast. So instead we&amp;#39;ll read the&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; index data in in one go. However, there is no easy-to-calculate size&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; for the index. The best we can do is calculate the worst case size. So&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; let&amp;#39;s do that. The worst case size is the maximum size of the name of&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; a sequence (255), plus the size of the byte that tells us the name&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; (1), plus the size of the word that is the offset in the file (4).&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;2bit--read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;2bit-data-sequence-count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; For every sequence in the file...&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;2bit-data-sequence-count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Calculate the position within the buffer for this loop around. Note&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; that the skip is the last position plus 1 for the size byte plus the&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; size plus the length of the offset word.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Get the length of the name of the sequence.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Pull out the name itself.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;1+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Pull out the offset.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;2bit--word-from-bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Collect the offset into the hash.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gethash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;; Once we&amp;#39;re all done.... return the index.&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;finally&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code does what I mention above: it grabs enough data into a buffer in
one go that I'll have the whole index in memory to pull apart, and then I
work with the in-memory copy. The index is added to a hashing dictionary.
Note that, in this case, I don't actually do the test for running off the
end of the file because at the heart of the file reading code is
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-from-Files.html"&gt;&lt;code&gt;insert-file-contents-literally&lt;/code&gt;&lt;/a&gt;
and it doesn't error if you request too much.&lt;/p&gt;
&lt;p&gt;With that done you'll have a list of all the sequences in the file. The next
part, which will come in &lt;a href="/2020/09/26/reading-2bit-files-for-fun-the-sequence.html"&gt;the next
post&lt;/a&gt;,
is the properly tricky part: the decoding of the sequence data itself.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 05 Sep 2020 10:59:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2020-09-05:/2020/09/05/reading-2bit-files-for-fun-the-index.html</guid><category>Coding</category><category>Bioinformatics</category></item><item><title>Reading 2bit files (for fun)</title><link>https://blog.davep.org/2020/08/30/reading-2bit-files-for-fun.html</link><description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I've written a bit before about the value of having simple but interesting
"problems", that you know the solution to, as &lt;a href="/2019/11/10/going-on-a-journey.html"&gt;a way of exercising yourself
in a new environment&lt;/a&gt;. Recently I've
added another to the list I already have, and I used it as an excuse to get
back into writing &lt;a href="https://github.com/davep/org-davep-2bit"&gt;some Common
Lisp&lt;/a&gt;; and then went on to use it
as a reason to write &lt;a href="(https://elisp.dev/)"&gt;yet another&lt;/a&gt; package &lt;a href="https://github.com/davep/2bit.el"&gt;for
Emacs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having gone through the process of writing code to handle 2bit files twice
in about a month, and in two very similar but slightly different languages,
I thought it might be interesting for me to then use it to exercise my
ability to write blog posts (something I always struggle with -- I find
writing &lt;em&gt;very hard&lt;/em&gt; on a number of levels) and especially posts that explain
a particular problem and how I implemented code relating to that problem.&lt;/p&gt;
&lt;p&gt;Also, because the initial version of this post rambled on a bit too much and
I lost the ability to finish it, I'm starting again and will be breaking it
up a number of posts spanning a number of days -- perhaps even weeks -- so
that I don't feel too overwhelmed by the process of writing it. I will, of
course, make sure every post links to the other posts.&lt;/p&gt;
&lt;p&gt;Now, before I go on, I'll make the important point that everything here is
written from the perspective of a software developer who happens to work as
part of a bioinformatics team; I don't do bioinformatics, I don't claim to
understand it, I just happen to sit with (well, used to sit with them --
hopefully we'll all make it back to the office one day!) and work with them,
and develop software that supports their work. Anything you see in any of
the posts that's wrong about that subject: that's just my ignorance being
shown through the lens of a software developer (all corrections are
welcome).&lt;/p&gt;
&lt;p&gt;So, with all those disclaimers aside, I'm going to go on a slow wander
through what a 2bit file is, how you'd go about reading it, and related
issues. This isn't designed as a tutorial or anything like that, this is
simply me taking what I've learnt and writing it down. Perhaps someone else
will benefit one day, but the purpose is to simply enjoy cementing it in my
own mind and to enjoy the process of putting it all in writing.&lt;/p&gt;
&lt;h1&gt;What is a "2bit file"?&lt;/h1&gt;
&lt;p&gt;So what's this new "problem" I've added to my list? It's code to read
sequence data from &lt;a href="https://genome.ucsc.edu/FAQ/FAQformat.html#format7"&gt;2bit format
files&lt;/a&gt;. For anyone who
doesn't know (&lt;em&gt;bioinformatics people look away now; a software developer is
going to explain one of your file formats&lt;/em&gt;), this is a file format that is
intended to hold sequences in an efficient way. As I'm sure you know,
&lt;a href="https://en.wikipedia.org/wiki/DNA"&gt;DNA&lt;/a&gt; is made up of &lt;a href="https://en.wikipedia.org/wiki/Nucleobase"&gt;4
bases&lt;/a&gt;, represented by the letters
&lt;a href="https://en.wikipedia.org/wiki/Thymine"&gt;&lt;code&gt;T&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Cytosine"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Adenine"&gt;&lt;code&gt;A&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Guanine"&gt;&lt;code&gt;G&lt;/code&gt;&lt;/a&gt;. So, in the simplest case, we
could just represent a genome using those four letters. Simple enough,
right? Nice big text file with just those 4 letters in?&lt;/p&gt;
&lt;p&gt;The thing is, something like the human genome is around &lt;a href="https://en.wikipedia.org/wiki/Human_genome#Molecular_organization_and_gene_content"&gt;3 billion bases in
length&lt;/a&gt;.
That'd make for a petty big file to have to store and move around. So why
not compress it down a bit? That's where the 2bit format comes in.&lt;/p&gt;
&lt;p&gt;Given this problem I'm sure most developers would quickly notice that, given
4 different characters, you only need 2 bits to actually hold them all (two
bits gets us &lt;code&gt;00&lt;/code&gt;, &lt;code&gt;01&lt;/code&gt;, &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;11&lt;/code&gt;, so four different states). This
means with a little bit of coding you can store 4 bases in a single byte.
Just like that you've pretty much squished the whole thing down to 1/4 of
the original size. And that's more or less what the 2bit format does. If you
take a look at &lt;a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/"&gt;the actual data for the human
genome&lt;/a&gt; you'll see
that &lt;code&gt;hg38.2bit&lt;/code&gt; is roughly 1/4 of 3 billion bytes, ish, give or take.&lt;/p&gt;
&lt;p&gt;There is a wrinkle, however. There are parts of a genome where you might not
know what base is there. Generally &lt;a href="https://www.bioinformatics.org/sms/iupac.html"&gt;an &lt;code&gt;N&lt;/code&gt; is used for
that&lt;/a&gt;. So, actually, we want
to be able to store 5 different characters. But 5 isn't going to go into 2
bits... Damn! Well, it's okay, 2bit has a solution to that too, and I'll
cover that later on.&lt;/p&gt;
&lt;h1&gt;How is a 2bit file formatted?&lt;/h1&gt;
&lt;p&gt;As you can see from &lt;a href="https://genome.ucsc.edu/FAQ/FAQformat.html#format7"&gt;the format information available
online&lt;/a&gt;, a 2bit file is
a binary file format that is split into 3 key parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fixed size header with some key information&lt;/li&gt;
&lt;li&gt;An index into the rest of the file&lt;/li&gt;
&lt;li&gt;A series of records that contain actual sequence information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this first post I'll cover the details of the header. Subsequent posts
will cover the index and the actual sequence data records.&lt;/p&gt;
&lt;h2&gt;The header&lt;/h2&gt;
&lt;p&gt;The header of a 2bit file is fixed in size and contains some key
information. It can be broken down as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Signature&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;See below for endian issues.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Always 0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sequence count&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;Always ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The signature value is used to test if what you're looking at is a 2bit
file, but also tells you some vital information about how to read the file
-- see below for more on that. The version value is always &lt;code&gt;0&lt;/code&gt; -- as such
another useful test would be to error out if you get a valid signature but
get a version other than &lt;code&gt;0&lt;/code&gt;. The sequence count is, as you'd guess, the
number of sequences that are held within the file -- this is important when
loading in the index of the file (more on that in the next post).&lt;/p&gt;
&lt;h2&gt;The signature, big and little endianness, and byte swapping&lt;/h2&gt;
&lt;p&gt;The header mentioned above comprises of 4 32-bit word values. The very first
word is important to how you read the rest of the file. This is the
&lt;code&gt;signature&lt;/code&gt; for the 2bit file and it should always be &lt;code&gt;0x1A412743&lt;/code&gt;. And this
is where it gets interesting and fun right away. The 2bit file format allows
for the fact that the file can be built in either &lt;a href="https://en.wikipedia.org/wiki/Endianness"&gt;a little-endian or a
big-endian machine&lt;/a&gt;, and the
32-bit word values can be binary-written to the file in the local
architecture's byte order. The effect of this is that, from reading the very
first value in the file, you need to decide if every other numeric value you
read needs to be byte-swapped in some way. The early logic being (in no
particular language) something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x1A412743&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;must_swap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;byte_swap&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x1A412743&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;must_swap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;raise&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This isn&amp;#39;t a valid 2bit file&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply put, to read the rest of the file you will need a function that
byte-swaps a 32bit numeric value, and a flag of some sort to mark that you
need to do this every time you read such a value. Of course, depending on
your language of choice, you could do it in a number of different ways. In a
language like JavaScript or Scheme, where you can easily throw around
functions, I'd probably just assign the appropriate 32bit-word-reading
function to a global function name and call that regardless throughout the
rest of the code. In other languages I'd probably just check the flag each
time and call the swapping function if needed. In something like Python I'd
likely just use the signature to decide on which format to pass to
&lt;a href="https://docs.python.org/3.8/library/struct.html#struct.unpack"&gt;&lt;code&gt;struct.unpack&lt;/code&gt;&lt;/a&gt;.
For example, some variation on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assuming that &amp;#39;header&amp;#39; is the whole header of the file read as a binary buffer.&lt;/span&gt;

&lt;span class="n"&gt;word_fmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test_fmt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;I&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;I&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;test_fmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x1A412743&lt;/span&gt;
        &lt;span class="n"&gt;word_fmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_fmt&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;word_fmt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This isn&amp;#39;t a 2bit file&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the Python approach sort of hides the important detail here. With it
we'd simply use &lt;code&gt;struct.unpack&lt;/code&gt;'s &lt;a href="https://docs.python.org/3.8/library/struct.html#byte-order-size-and-alignment"&gt;ability to handle different byte orders
&lt;/a&gt;
and not worry about the detail. Which isn't fun, right? So how might code to
byte-swap a 32bit value look?&lt;/p&gt;
&lt;p&gt;Assuming you've got the value as an actual numeric integer, it can be as
simple as using a bit of bitwise anding and shifting. Here's the basic code
I wrote in Common Lisp, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;swap-long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Swap the endianness of a long integer VALUE.&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;logior&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;logand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;logand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#xff00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;logand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#xff0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;logand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#xff000000&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JavaScript might be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;swapLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xff00&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xff0000&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xff000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and other variations on that theme in different languages.&lt;/p&gt;
&lt;h2&gt;Up next&lt;/h2&gt;
&lt;p&gt;In &lt;a href="/2020/09/05/reading-2bit-files-for-fun-the-index.html"&gt;the next post&lt;/a&gt;
I'll write about how the sequence index is stored and how to load it,
including some considerations about how to make the loading as efficient as
possible.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 30 Aug 2020 15:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2020-08-30:/2020/08/30/reading-2bit-files-for-fun.html</guid><category>Coding</category><category>Bioinformatics</category></item><item><title>The PEP 8 hill I will die on</title><link>https://blog.davep.org/2020/08/23/the-pep-8-hill-i-will-die-on.html</link><description>&lt;p&gt;I first learnt Python back in the mid-to-late 90s, used it in place of Perl
once I was comfortable with it, and then we sort of drifted apart when I
first met Ruby. It's only in the last couple of years that I've got back
into it, and in a huge way, thanks to &lt;a href="/2017/12/12/on_to_something_new.html"&gt;my (not-quite-so-) new
job&lt;/a&gt;. Despite
the quirks and oddness (as I perceive them), I actually quite like Python
and it's one of those languages that just flows off my fingers. I'm sure you
know the same thing, perhaps not with Python, but there will be languages
that just flow for you, and those that take a bit more effort and
concentration. Python... feels okay to me.&lt;/p&gt;
&lt;p&gt;I also appreciate that there's been a long-standing style guide. I quite
like &lt;a href="python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; as a read, and think there's a
lot of good ideas in there; much of the content sits with how I'd approach
things if I was tasked to come up with such a document. With this in mind,
I'm a fairly heavy user of &lt;code&gt;pylint&lt;/code&gt; and it in turn leans on PEP 8 (amongst
other things) and I'm happy to accept most of its judgements. Not all of its
judgements, &lt;a href="/2019/11/04/my-pylint-shame.html"&gt;but even when I disagree with it I try and keep track of how
far I'm
drifting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But there is absolutely one hill I will happily die on when it comes to PEP
8: the concept of &lt;a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements"&gt;"extraneous whitespace" in lists and
expressions&lt;/a&gt;.
Just.... no! Oh gods no!&lt;/p&gt;
&lt;p&gt;To borrow a line of code from &lt;a href="/2019/11/10/going-on-a-journey.html"&gt;the journey problem I dabbled with a while
back&lt;/a&gt;,
PEP 8 would have me write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I'm sure plenty of people won't see a problem with this at all; but all
I can see is an almost-claustrophobic parameter list. What's with the
parameters being jammed up against the opening and closing parens? Why have
the dinky little comma lost between two different things? Why have it look
like a long stream of letters and punctuation? Why....&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;Just no.&lt;/p&gt;
&lt;p&gt;I can't.&lt;/p&gt;
&lt;p&gt;Rightly or wrongly, I just need for the code to breathe a bit. When I type
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;suddenly if feels like there's fresh air in the code, like it flows gently
out of my head, off my fingers, through the keyboard and into the buffer.&lt;/p&gt;
&lt;p&gt;In my head, and to my eyes, the code is.... relaxed.&lt;/p&gt;
&lt;p&gt;Do I have a rational reason for this? Nope. Then again I don't see one for
doing it the other way either; I can't think of one and I don't see one in
the source document. So, that's a warning I always turn off with &lt;code&gt;pylint&lt;/code&gt;
and it's a style I carry through all my Python code; and I think that's the
important point here: anyone reading and working with my code should see the
same style all the way through. It might differ from PEP 8 on this point,
but at least it's the same all the way.&lt;/p&gt;
&lt;p&gt;And, really, that's okay: &lt;a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds"&gt;PEP 8 is there to be
ignored&lt;/a&gt;.
;-)&lt;/p&gt;
&lt;p&gt;PS: This is a small part of another blog post I was meaning to write, and
might still do, about my (still ongoing) experience of getting
&lt;a href="https://github.com/emacs-lsp/lsp-mode"&gt;&lt;code&gt;lsp-mode&lt;/code&gt;&lt;/a&gt; up and running in Emacs
and having it play nice with Python projects. I have that working, but it
was a bit of a learning curve and epic battle over a couple of days, and one
that had me first encounter
&lt;a href="https://pypi.org/project/pycodestyle/"&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt;. I may still tell the
tale...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 23 Aug 2020 16:54:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2020-08-23:/2020/08/23/the-pep-8-hill-i-will-die-on.html</guid><category>Python</category><category>Python</category></item></channel></rss>