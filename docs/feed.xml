<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>blog.davep.org</title><link>https://blog.davep.org/</link><description>Code, Emacs, VR, Stuff...</description><lastBuildDate>Thu, 07 Mar 2024 08:45:00 +0000</lastBuildDate><item><title>Tinboard v0.10.0</title><link>https://blog.davep.org/2024/03/07/tinboard-0-10-0.html</link><description>&lt;p&gt;I just realised that it's been a while since I &lt;a href="/2023/12/25/tinboard-0-4-0.html"&gt;last posted an
update&lt;/a&gt; about &lt;code&gt;tinboard&lt;/code&gt;. This is probably
my most-used Textual-based application, and one I'm constantly tinkering
with, and just this morning I published v0.10.0.&lt;/p&gt;
&lt;p&gt;Often the changes are small tweaks or fixes to how it works, sometimes
they're simply updates to the version of Textual used, making use of some
new feature or other; I've yet to add another "major" feature so far. They
will come, but so far the ideas I have for the application haven't actually
felt that necessary. Although I say so myself it does what I need it to do
and it does it really well.&lt;/p&gt;
&lt;p&gt;So, as a quick catch-up of what's changed since v0.4.0 (which was the last
version I posted about):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v0.5.0 was released 2024-01-04; this included all the tags of a bookmark
when doing full-text searching.&lt;/li&gt;
&lt;li&gt;v0.6.0 was released 2024-01-10; it fixed a small bug where the tag
suggestion facility got confused by trailing spaces in the input field.&lt;/li&gt;
&lt;li&gt;v0.7.0 was released 2024-02-02; this updated the minimum Textual version to
v0.48.2 and removed all the custom changes to the Textual &lt;code&gt;TextArea&lt;/code&gt; widget,
making use of the updates to &lt;code&gt;TextArea&lt;/code&gt; that version of Textual made
available.&lt;/li&gt;
&lt;li&gt;v0.8.0 was released 2024-02-18; this fixed a crash on startup caused by a
newer release of Textual (the fault was in &lt;code&gt;tinboard&lt;/code&gt;; the update to Textual
helped reveal the problem).&lt;/li&gt;
&lt;li&gt;v0.9.0 was released 2024-02-29; it simply added support for using
&lt;kbd&gt;Esc&lt;/kbd&gt; at the top level of the application to quit (I like to camp
on &lt;kbd&gt;Esc&lt;/kbd&gt; to GTFO).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, just now, I released v0.10.0. This release makes full use of &lt;a href="https://github.com/Textualize/textual/pull/4154"&gt;some
work I recently did to enhance Textual's &lt;code&gt;CommandPalette&lt;/code&gt;
widget&lt;/a&gt;, which added a
"discover" system. The change in &lt;code&gt;tinboard&lt;/code&gt; is that all of the &lt;a href="https://github.com/davep/tinboard/tree/main/tinboard/commands"&gt;command
palette
providers&lt;/a&gt;
now have &lt;code&gt;discover&lt;/code&gt; methods too. The result of this change is that when you
open the command palette in &lt;code&gt;tinboard&lt;/code&gt; (&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;) you
can see &lt;em&gt;every&lt;/em&gt; possible command right away.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in discovery mode" src="/attachments/2024/03/07/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 07 Mar 2024 08:45:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-03-07:/2024/03/07/tinboard-0-10-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Back to Death Stranding</title><link>https://blog.davep.org/2024/02/05/back-to-death-stranding.html</link><description>&lt;p&gt;&lt;img alt="Death Stranding" src="/attachments/2024/02/05/IMG_4223.JPG#centre"&gt;&lt;/p&gt;
&lt;p&gt;Death Stranding is easily one of my top 5 games ever. I bought the PS4
version, on a whim, back in early 2020, to see what all the fuss was about.
I didn't know much about it other than the love/hate it seemed to be
getting. I can still remember the first session, being a bit confused about
what was going on, and then suddenly hitting a perfect moment in the game
where I knew it was for me, and that I was going to love it.&lt;/p&gt;
&lt;p&gt;That moment? It's when you're setting out for the incinerator, the camera
pulls back, the landscape opens up before you, and &lt;a href="https://www.youtube.com/watch?v=SBwoMJNxiFo"&gt;&lt;em&gt;Bones&lt;/em&gt; by Low Roar
kicks in&lt;/a&gt;. Perfection!&lt;/p&gt;
&lt;p&gt;I went on to finish the story in around 45 to 50 hours (much of that
overlapping with the first week or so of lockdown during the pandemic); and
then played at least as much again just exploring, building zip lines,
roads, etc.&lt;/p&gt;
&lt;p&gt;I even &lt;a href="https://my.chiral.pictures/"&gt;kept a photoblog of my time in the
game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;About a year back I bought the Director's Cut of the game, this time for PC.
I'd decided that I had to play it through again &lt;a href="https://www.youtube.com/watch?v=Zb7390_rldQ&amp;amp;list=PLUY2FpMDyORDJd_VYhF74e6Mapf8oHp8i"&gt;and did start streaming
it&lt;/a&gt;.
Annoyingly though the PC setup wasn't great. The game itself ran just fine
on my PC, but the controller setup meant that, as I sat on the sofa, it
would drop connection from time to time. The only workaround for this was to
sit on my office chair closer to the TV and, really, this wasn't
comfortable.&lt;/p&gt;
&lt;p&gt;Eventually that play-through fell away.&lt;/p&gt;
&lt;p&gt;Fast forward to last week &lt;a href="https://www.youtube.com/watch?v=wbLstJHlC4U"&gt;and the release of the 10 minute Death Stranding
2 trailer&lt;/a&gt; and I was hooked all
over again! While it never totally went away, my obsession with this game
was back full force.&lt;/p&gt;
&lt;p&gt;I had to play again!&lt;/p&gt;
&lt;p&gt;Meanwhile, between the attempt to play through on the PC and now, I'd
acquired a PS5 &lt;em&gt;and&lt;/em&gt; at some point I'd upgraded my PS4 version of Death
Stranding to the PS5 Director's Cut.&lt;/p&gt;
&lt;p&gt;So I had to. I just had to. I'd had a great time &lt;a href="https://www.youtube.com/watch?v=0TriPR0c-eg&amp;amp;list=PLUY2FpMDyORBQXTLCgueUh5v8DCx5TByU"&gt;streaming my play through
the story of Cyberpunk
2077&lt;/a&gt;
so it made sense to do the same with Death Stranding.&lt;/p&gt;
&lt;p&gt;Last night I hit &lt;em&gt;New game&lt;/em&gt; on my PS5 &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g"&gt;and played for just over 2
hours&lt;/a&gt;. This play through is
likely going to take a long time -- my work situation means I have a longer
and more tiring commute -- but I'm determined to do it. I want to experience
all of the extra things in the Director's Cut, including the extra story
(which I've read there is, but haven't seen or read about).&lt;/p&gt;
&lt;p&gt;I hope, eventually, &lt;a href="https://www.youtube.com/watch?v=5-irn7AcJ7g&amp;amp;list=PLUY2FpMDyORCBUB0_pmQ5hKu1WTJnAVGI"&gt;the playlist I
started&lt;/a&gt;
will have the full story plus lots more fun and building and exploring in
it. Hopefully I'll be done just in time for the release of DS2! (and
&lt;a href="https://www.youtube.com/watch?v=QdBZY2fkU-0"&gt;GTA6&lt;/a&gt;, it's going to be a busy
year for gaming next year!)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 05 Feb 2024 07:45:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-02-05:/2024/02/05/back-to-death-stranding.html</guid><category>Gaming</category><category>Death Stranding</category><category>PS5</category><category>gaming</category></item><item><title>How not to ask for help</title><link>https://blog.davep.org/2024/02/04/how-not-to-ask-for-help.html</link><description>&lt;p&gt;My association with Textual works on two levels: on the one hand, sure, it's
&lt;a href="https://www.textualize.io/about-us/"&gt;currently my day job&lt;/a&gt;; on the other
hand it's a FOSS project that I'm keen to support so &lt;em&gt;"free time me"&lt;/em&gt; tries
to work with it and support others working with it too. For this reason
you'll often see me being terminally&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; online in the Textual Discord,
trying to answer questions as they come up, every waking free moment.&lt;/p&gt;
&lt;p&gt;Almost without exception the people who ask for help are appreciative and
ask in the spirit of wanting help and wanting to work together with whoever
is helping them to get an answer. That... that's actually quite a cool thing
to be part of. I like the sense of community that comes from someone going
&lt;em&gt;"bah I'm trying to do this thing and it isn't working PLEASE HELP!"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And then... well, let's just say that sometimes the odd question will crop
up that seems to be asked from a less collaborative position.&lt;/p&gt;
&lt;p&gt;Without wanting to appear to dunk on an individual (I don't wish to), I want
to break down an example that happened yesterday. For some background, I'd
been AFK all day, &lt;a href="https://fosstodon.org/@davep/111867694675165507"&gt;having a wonderful time in town with a
friend&lt;/a&gt;, shopping,
&lt;a href="https://fosstodon.org/@davep/111867942313370807"&gt;lunch&lt;/a&gt;, a movie, that sort
of thing. A nicely-chilled day where I didn't even look at the Discord
notifications that had popped up on my watch and phone.&lt;/p&gt;
&lt;p&gt;However, later on that evening, finally home and flopped on the sofa, I saw
a question pop up that, while lacking &lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;any useful
detail&lt;/a&gt; and
possibly suffering a wee bit from being &lt;a href="https://label.dev/articles/xy-problem/"&gt;an XY
problem&lt;/a&gt;, the immediate answer was
clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;tt&gt;BadIdentifier: 'test.udp_json_client-input' is an invalid id; identifiers must
contain only letters, numbers, underscores, or hyphens, and must not begin with
a number.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;????????????????? a dot isn't allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like I say: it lacks context and detail, and the number of question marks
doesn't really clarify much, but the core question that seems to be at play
here is &lt;em&gt;"is it true that a full stop can't be used as part of the ID of a
widget?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The answer is: no, it can't. There's a reason for that too, and if someone
were to take a step back for a moment and think about how IDs play a part in
queries and how they'd be used in a stylesheet, the reason for that might
pop out. So, to help the person asking the question walk in the direction of
the answer, I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you come to query that how would the parser know it’s not ID “test”
combined with a class, if dot was allowed?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we go on, to illustrate my point, consider this ID: &lt;code&gt;foo.bar&lt;/code&gt;. When
you come to query that back, or use it in a stylesheet, how would &lt;code&gt;#foo.bar&lt;/code&gt;
look? Is it a widget with the ID &lt;code&gt;foo.bar&lt;/code&gt;; or is it a widget with the id
&lt;code&gt;foo&lt;/code&gt; and the class &lt;code&gt;bar&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As far as Textual's CSS is concerned, it would be the latter.&lt;/p&gt;
&lt;p&gt;But at this point it didn't seem necessary to get into all that detail; I
like to try and assume knowledge on the part of the person asking the
question, sans any other evidence, so for the moment I'll assume a &lt;em&gt;"oh,
right, yeah, that's a damn good point"&lt;/em&gt; kind of reply. Or if not, perhaps a
&lt;em&gt;"I don't quite follow, could you explain?"&lt;/em&gt; reply, in which case I'm happy
to go into all the detail.&lt;/p&gt;
&lt;p&gt;The reply was neither:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why are element ID and classes co-mingled?&lt;/p&gt;
&lt;p&gt;this was previously allowed so your question doesn't really make sense to
me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I'm confused. Asking why element IDs and classes &lt;em&gt;are&lt;/em&gt; co-mingled seems
odd; but I'm used to chatting with people who don't have English as a first
language so I'm going to assume it's just a wording choice; but the latter
part is very odd: this has &lt;em&gt;never&lt;/em&gt; been allowed. Or, more to the point...
without any proper context I can't really appreciate what claim is being
made here.&lt;/p&gt;
&lt;p&gt;You see... &lt;a href="https://github.com/Textualize/textual/issues/3954"&gt;I did notice a bug in Textual recently, when it came to widget
IDs&lt;/a&gt;. Long story short:
when you set your ID for the widget in your code, no actual validation of
the ID was being done. This was an oversight &lt;a href="https://github.com/Textualize/textual/pull/4032"&gt;that was fixed in the latest
release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But knowing that that's the case would be guesswork on my part; I'm also
fresh at my desk after a day out; I'm probably not quite in the
coding/Textual zone yet, so rather than try and guess half of the
conversation, it's easier to just ask the person who is asking. So I ask
them to restate the question, and give some more background.&lt;/p&gt;
&lt;p&gt;The reply is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the objective is to put a string like test.udp_json_client-input as the
label of a tab, which previously just used the ID property. from skimming
release notes, is it better to explicitly set the label, and then assign
something compliant for the ID separately?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait... what? I thought we were talking about valid widget IDs, now we're
talking about tabs and labels? Do we mean &lt;code&gt;TabbeContent&lt;/code&gt; and the labels of a
&lt;code&gt;TabPane&lt;/code&gt;? This is a bit different. So I'm sat there trying to figure out
this person's thought process so I can offer the help they're after and this
follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;okay @davep, you have a real bug. --content-tab- prefix is not ephemeral.
if I create a tab and grab .id, that prefix comes with it, so if you save
it for later and try to set .active, assigning .active doesn't agree that
there is a tab --content-tab-thing&lt;/p&gt;
&lt;p&gt;so I need to de-mangle the name manually before assigning .active I guess?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wut? Like... wut? Okay, we do seem to be talking about &lt;code&gt;TabbedContent&lt;/code&gt;, I
recognise the values being mentioned here; we did some work &lt;a href="https://github.com/Textualize/textual/pull/3815"&gt;late on last
year&lt;/a&gt; that added some
namespacing to parts of the &lt;code&gt;TabbedContent&lt;/code&gt; widget in an effort to &lt;a href="https://github.com/Textualize/textual/issues/3695"&gt;reduce
some foot-gun
situations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But... there's no &lt;code&gt;.&lt;/code&gt; being used in the IDs as part of that; why are we now
proclaiming a bug in an unrelated PR? That's quite the leap with zero
evidence. Like... sure, I'm &lt;em&gt;all&lt;/em&gt; for being alerted to bugs and fixing them,
but this doesn't seem like that.&lt;/p&gt;
&lt;p&gt;And then there's the &lt;em&gt;"so I need to..."&lt;/em&gt; conclusion that also seems to have
no connection to the original question.&lt;/p&gt;
&lt;p&gt;Anyone who has ever done support will recognise this situation, I'm sure.
Someone has seen a problem, they've dug around a little and reached a
conclusion about what the cause is, and turns up looking for help with the
&lt;em&gt;conclusion&lt;/em&gt; they've reached (very much a variant of &lt;a href="https://label.dev/articles/xy-problem/"&gt;a XY
problem&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;That almost never gets us where we want to go, so I do the obvious thing; I
try and reboot the question; I try and get us back to the start and try and
get some clarity; I try and encourage asking the question with zero
assumptions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm afraid I'm still not really understanding your question, as it now no
longer seems to relate to what you very first asked. Perhaps you could
start again, ideally with an
&lt;a href="https://label.dev/articles/minimal-reproducible-example/"&gt;MRE&lt;/a&gt; of what
you're looking at and trying to do, for clarity?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I figure, whatever the problem is, it can be illustrated with like a dozen
lines of code. Also, when asking people to do this, it often actually helps
them rubber-duck their own problem. There's been plenty of times on Discord
where someone's "found a bug" in Textual, they're asked to make an MRE of
it, and they come back and go &lt;em&gt;"oh, shoot, right, I did that and realised
the bug was in my code"&lt;/em&gt;. It's cool when they happens; everyone learns
something.&lt;/p&gt;
&lt;p&gt;So... no MRE comes back, but this is the reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm trying to fix multiple breakages in my application from some recent
changes. Right now I can't wrap my head around what to assign a
tabbed_content.active for it to work how it did before (where if you have
a tab with ID sample, you can assign tabbed_content.active = "sample", but
you can't do that anymore)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While not an MRE, I &lt;em&gt;can&lt;/em&gt; work with this. It seems clear that they have a
&lt;code&gt;TabbedContent&lt;/code&gt; where they have a &lt;code&gt;TabPane&lt;/code&gt; with the ID &lt;code&gt;"sample"&lt;/code&gt; and they
are struggling to make it the &lt;code&gt;active&lt;/code&gt; tab by setting &lt;code&gt;active&lt;/code&gt; to
&lt;code&gt;"sample"&lt;/code&gt;. That seems hugely unlikely, this is what &lt;code&gt;TabbedContent&lt;/code&gt; is all
about, I think we'd have noticed (I'm petty sure we've got unit tests that
cover this), but I'm game. I can test this. And the MRE I write will
illustrate there isn't a problem.&lt;/p&gt;
&lt;p&gt;So I reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, I can only suggest that you make an MRE of the issue you're seeing.
For example, here's me making a set of tabs, the last of which has the ID
"four", and I set the active to "four":&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and provide the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ComposeResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TabPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Four&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TabbedContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;TabbedContentApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Based on what they've most-recently said is the problem, I'm confident
they'll see that this MRE is their situation in a nutshell, and we can work
out from there and figure out what the problem is they're seeing and where
this &lt;code&gt;.&lt;/code&gt; in their IDs is coming from (because I'm &lt;em&gt;very&lt;/em&gt; confident it isn't
coming from the work that was done on &lt;code&gt;TabbedContent&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This is good. We're getting close to heading down a good path; I can feel
it!&lt;/p&gt;
&lt;p&gt;I was wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/Textualize/textual/blob/main/src/textual/widgets/_tabbed_content.py#L513&lt;/p&gt;
&lt;p&gt;there's no way you can deny you just added a metric ton of shenanigans
with the tab ID stuff. I can't get it to work at all anymore (assigning
.active), but yes I will either come up with an MRE or find the bug and
let you know&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, rather than back up a wee bit, work with the MRE I wrote for them so we
can take a walk through the problem, they instead decide to tell me that the
PR I did last year (which &lt;em&gt;still&lt;/em&gt; isn't implicated in any of this outwith of
them seemingly assuming it's the cause of all the issues, presented with
zero evidence that it is) was simply &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No!&lt;/p&gt;
&lt;p&gt;Stop!&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; how you ask for help.&lt;/p&gt;
&lt;p&gt;This isn't how you ask for help from a product or service you pay for. This
&lt;em&gt;really&lt;/em&gt; isn't how you ask for help from a Free Software project, where the
people who are offering you help are doing so in their free time because
they want people to be able to build cool things with it.&lt;/p&gt;
&lt;p&gt;It really isn't hard at all to show just a wee bit of respect for people's
time and willingness to try and help you.&lt;/p&gt;
&lt;p&gt;Now... I get it. I can imagine a scenario where someone has just updated
Textual and their application suddenly starts throwing all sorts of weird
and new errors. That happens. That happened to me &lt;a href="https://github.com/Textualize/textual/issues/4101"&gt;on Thursday evening just
gone&lt;/a&gt;. But that's no
reason for approaching getting help like this.&lt;/p&gt;
&lt;p&gt;The way to approach it is this: pin the problem dependency, perhaps publish
a new version of your application so there's no accidental update of the
dependency, then head to any of the help resources for the dependency has
and &lt;em&gt;work with people who want to help you to find the cause of the
problem&lt;/em&gt;. Trust me, it'll go a lot faster if you work with them, take on
board suggestions (no matter how odd they might first appear), and really
don't call their code &lt;em&gt;"a metric ton of shenanigans"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The conclusion to all of this? The person asking the question eventually
found they were setting some widget's ID to an invalid ID; one with a &lt;code&gt;.&lt;/code&gt; in
it. So as I suspected and wanted to walk them to: they had invalid IDs all
along and they only found out about this because ID validation was fixed.&lt;/p&gt;
&lt;p&gt;Perhaps one day they'll retract the claim that my actually-unrelated code
that wasn't "just" released &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.46.0"&gt;but was from last
year&lt;/a&gt; is &lt;em&gt;"a
metric ton of shenanigans"&lt;/em&gt;. &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Geddit? GEDDIT?&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 04 Feb 2024 11:27:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-02-04:/2024/02/04/how-not-to-ask-for-help.html</guid><category>Coding</category><category>free-software</category><category>foss</category><category>help</category></item><item><title>Quizzical</title><link>https://blog.davep.org/2024/01/29/quizzical.html</link><description>&lt;p&gt;I feel like I'm on a bit of a roll when it comes to building applications
for the terminal at the moment; while I'm still tinkering and improving
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; and
&lt;a href="https://github.com/davep/oshit"&gt;OSHit&lt;/a&gt;, I had the urge to tackle another
idea that's been on my TODO list for a while.&lt;/p&gt;
&lt;p&gt;This is something &lt;a href="https://github.com/davep/quiz.el"&gt;I did for Emacs&lt;/a&gt; back
in 2017 and I felt it was a &lt;em&gt;perfect&lt;/em&gt; candidate for a Textual-based project.
It's a terminal-based trivia quiz game, using &lt;a href="https://opentdb.com/"&gt;the Open Trivia
Database&lt;/a&gt; as the source of questions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quizzical" src="/attachments/2024/01/29/quizzical.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;I've just published an early version &lt;a href="https://pypi.org/project/quizzical/"&gt;to
PyPI&lt;/a&gt;; it still needs some polish and I
have a few other ideas for it, but as it stands I feel it's a fun little
game to mess around with.&lt;/p&gt;
&lt;p&gt;The idea is pretty straightforward: you can run it up and create lots of
different quizzes, there are various parameters you can use to create lots
of different kinds of challenges:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Building a new quiz" src="/attachments/2024/01/29/new-quiz.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Once you're created a quiz, you can run it and answer away:&lt;/p&gt;
&lt;p&gt;&lt;img alt="An example question" src="/attachments/2024/01/29/question.png"&gt;&lt;/p&gt;
&lt;p&gt;Right now the idea is that you answer by pressing either &lt;kbd&gt;1&lt;/kbd&gt;,
&lt;kbd&gt;2&lt;/kbd&gt;, &lt;kbd&gt;3&lt;/kbd&gt; or &lt;kbd&gt;4&lt;/kbd&gt; (or just &lt;kbd&gt;1&lt;/kbd&gt; or
&lt;kbd&gt;2&lt;/kbd&gt; for true/false questions); when I get a moment I'll also enable
mouse support for selecting an answer too (honestly I feel
keyboard-answering feels far more natural).&lt;/p&gt;
&lt;p&gt;Once the quiz is done you can review your answers and see which were right
and which were wrong:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing results" src="/attachments/2024/01/29/results.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;As I say: there's a bunch of other things I want to add to this (keeping
track of scores, adding session token support to reduce the chances of
repeat questions, etc), but this felt like a good spot to make a v0.1.0
available if anyone else wanted to have a play.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/quizzical/"&gt;from PyPi&lt;/a&gt;.
The &lt;a href="https://github.com/davep/quizzical"&gt;source is available over on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS: Now you can see why I made
&lt;a href="/2024/01/11/textual-countdown.html"&gt;&lt;code&gt;textual-countdown&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 29 Jan 2024 21:30:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-29:/2024/01/29/quizzical.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Orange Site Hit v0.5.0</title><link>https://blog.davep.org/2024/01/17/oshit-0-5-0.html</link><description>&lt;p&gt;Just a wee catch-up post about OSHit, &lt;a href="https://github.com/davep/oshit"&gt;my terminal-based HackerNews
browser&lt;/a&gt;. Over the past couple of weeks I've
made some small changes, so I thought I'd make mention of what I've done.&lt;/p&gt;
&lt;p&gt;As of v0.5.0, which I released earlier today, I've:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added a quick way of following links while viewing a comment. While a
  comment is highlighted you can press &lt;kbd&gt;l&lt;/kbd&gt; to follow a link; if
  there's more than one link in the comment a menu will be shown and you can
  select which one to follow.&lt;/li&gt;
&lt;li&gt;Added support for viewing polls. Polls seem to be few and far between on
  HackerNews, so when I published the first version of OSHit I didn't have
  one to hand to test any code against. Eventually one turned up and broke
  OSHit (on purpose; I wanted to see when that happened) so I could then add
  the code to load polls and show them. Right now it just shows scores; I
  might do actual charts at some point.&lt;/li&gt;
&lt;li&gt;Added optional item numbers in the lists; turned on/off with
  &lt;kbd&gt;F4&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far all small things, but handy little improvements. There's still a nice
TODO list in the README and I will slowly work through it. Along with
&lt;a href="https://github.com/davep/tinboard"&gt;tinboard&lt;/a&gt; these are two applications
that have absolutely turned into "daily drivers", so they're going to get a
lot of tweaking over the next few weeks, probably even months.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Wed, 17 Jan 2024 21:36:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-17:/2024/01/17/oshit-0-5-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>textual-dominfo</title><link>https://blog.davep.org/2024/01/15/textual-dominfo.html</link><description>&lt;p&gt;Last week I was wrestling with some Textual code, trying to get something to
lay out on the screen "just so". On the whole this isn't too tricky at all,
and for those times where it might feel tricky &lt;a href="https://textual.textualize.io/how-to/design-a-layout/"&gt;there's some advice
available on how to go about
it&lt;/a&gt;. But in this case
I was trying to do a couple of "on the edge" things and one thing I really
needed to know was what particular part of the display was being "caused" by
what container or widget&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Now, at the moment anyway, Textual doesn't have a full-blown devtools with
all the bells and whistles; not like in your average web browser. It does
have &lt;a href="https://textual.textualize.io/guide/devtools/"&gt;a devtools&lt;/a&gt;, but not
with all the fancy DOM-diving stuff the above would have needed.&lt;/p&gt;
&lt;p&gt;What I needed was the equivalent of &lt;code&gt;print&lt;/code&gt;-debugging but with a
point-and-ask interface. Now, I actually &lt;em&gt;do&lt;/em&gt; often do &lt;code&gt;print&lt;/code&gt;-debugging
with Textual apps only I use
&lt;a href="https://textual.textualize.io/api/app/#textual.app.App.notify"&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/a&gt;;
this time though &lt;code&gt;notify&lt;/code&gt; wasn't going to cut it.&lt;/p&gt;
&lt;p&gt;I needed something that would let me point at a widget and say &lt;em&gt;"show me
stuff about this"&lt;/em&gt;. Something that happens when the mouse hovers over a
widget. Something like... &lt;a href="https://textual.textualize.io/guide/widgets/#tooltips"&gt;a
tooltip&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;So that was easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ancestors_with_self&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Suddenly I could hover my mouse over a bit of space on the screen and get a
"traceback" of sorts for what "caused" it.&lt;/p&gt;
&lt;p&gt;I posted this little hack to &lt;code&gt;#show-and-tell&lt;/code&gt; on the &lt;a href="https://discord.gg/Enf6Z3qhVr"&gt;Discord
server&lt;/a&gt; and someone mentioned it would be
handy if it also showed the CSS for the widget too. That was simple enough
because every widget has a &lt;code&gt;styles.css&lt;/code&gt; property that is the CSS for the
widget, as a string.&lt;/p&gt;
&lt;p&gt;After that I didn't think much more about it; until today.&lt;/p&gt;
&lt;p&gt;Looking back, one thing I realised is that adding the CSS information
&lt;code&gt;on_mount&lt;/code&gt; wasn't quite good enough, as it would only show me the state of
CSS when the mount happened, not at the moment I inspect the widget. I
needed the tooltip to be dynamic.&lt;/p&gt;
&lt;p&gt;Thing is... Textual tooltips can't be functions (which would be the obvious
approach to make it dynamic); so there was no way to get this on-the-fly
behaviour I wanted.&lt;/p&gt;
&lt;p&gt;Except there was! The type of
&lt;a href="https://textual.textualize.io/api/widget/#textual.widget.Widget.tooltip"&gt;&lt;code&gt;tooltip&lt;/code&gt;&lt;/a&gt;
is &lt;code&gt;RenderableType&lt;/code&gt;. So that means I could assign it an object that is a
Rich renderable; that in turn means I could write a &lt;code&gt;__rich__&lt;/code&gt; method for a
class that wraps a widget and then reports back what it can see every time
it's called.&lt;/p&gt;
&lt;p&gt;In other words, via one step of indirection, I could get the &lt;em&gt;"call a
function each time"&lt;/em&gt; approach I was after!&lt;/p&gt;
&lt;p&gt;It works a treat too.&lt;/p&gt;
&lt;p&gt;All of which is a long-winded way of saying I now have a &lt;code&gt;print&lt;/code&gt;-debug-level
DOM inspector tool for when I'm building applications with Textual:&lt;/p&gt;
&lt;p&gt;&lt;img alt="textual-dominfo in action" src="/attachments/2024/01/15/textual-dominfo.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;If this sounds handy to you, you can grab the code too. Install it into your
development environment with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;textual-dominfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then attach it to your app or screen or some top-level widget you're
interested in via &lt;code&gt;on_mount&lt;/code&gt;; for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textual_dominfo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DOMInfo&lt;/span&gt;
    &lt;span class="n"&gt;DOMInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then hover away with that mouse cursor and inspect all the things!
Whatever you do though, &lt;em&gt;don't&lt;/em&gt; make it part of your runtime, and don't keep
it installed; just make it a development dependency.&lt;/p&gt;
&lt;p&gt;The source can be found &lt;a href="https://github.com/davep/textual-dominfo"&gt;over on
GitHub&lt;/a&gt; and the package is, as
mentioned above, &lt;a href="https://github.com/davep/textual-dominfo"&gt;over on PyPi&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;ObPedant: Containers are widgets, but it's often helpful to make a
distinction between widgets that exist just to control the layout of the
widgets inside them, and widgets that exist to actually do or show
stuff.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 15 Jan 2024 21:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-15:/2024/01/15/textual-dominfo.html</guid><category>Python</category><category>PyPi</category><category>Python</category><category>coding</category><category>Textual</category></item><item><title>textual-countdown</title><link>https://blog.davep.org/2024/01/11/textual-countdown.html</link><description>&lt;p&gt;The idea for this one popped into my head while on the bus back from Textual
Towers this evening. So after dinner and some nonsense on TV I had to visit
my desk and do a quick hack.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://github.com/davep/textual-countdown"&gt;&lt;code&gt;textual-countdown&lt;/code&gt;&lt;/a&gt;, a
subtle but I think useful countdown widget for Textual applications.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Textual Countdown in action" src="/attachments/2024/01/11/textual-countdown.gif"&gt;&lt;/p&gt;
&lt;p&gt;The idea is that you compose it somewhere into your screen, and when you
start the countdown the bar highlights and then starts to shrink down to
"nothing" in the middle of its display. When the countdown ends a message is
posted so you can then perform the task that was being waited for in an
event handler.&lt;/p&gt;
&lt;p&gt;Not really a novel thing, I've seen this kind of thing before on the web;
I'm sure we all have. I just thought it would be a fun idea for Textual
applications too.&lt;/p&gt;
&lt;p&gt;I envisage using this where, perhaps, an application needs to wait for an
API-visiting cooldown period, or perhaps as a subtle countdown for a
question in a quiz; something like that.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like it's something useful for your Textual
applications, &lt;a href="https://pypi.org/project/textual-countdown/"&gt;it's now available from
PyPi&lt;/a&gt; and, of course, the
source is over &lt;a href="https://github.com/davep/textual-countdown"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 11 Jan 2024 22:52:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-11:/2024/01/11/textual-countdown.html</guid><category>Python</category><category>PyPi</category><category>Python</category><category>coding</category><category>Textual</category></item><item><title>Orange Site Hit v0.2.0</title><link>https://blog.davep.org/2024/01/07/oshit-0-2-0.html</link><description>&lt;p&gt;This is actually the second release of OSHit since &lt;a href="/2024/01/01/oshit.html"&gt;I first announced it a
week back&lt;/a&gt;, and I'll get to that other release in a
moment.&lt;/p&gt;
&lt;p&gt;I've just published v0.2.0, which isn't a very substantial release, but
which bumps the required version of Textual to
&lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.1"&gt;v0.47.1&lt;/a&gt; and
has some fun with &lt;a href="https://github.com/Textualize/textual/releases/tag/v0.47.0"&gt;the new nested CSS
feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Underlying the point of this release was me taking a &lt;em&gt;"real world"&lt;/em&gt;
application of mine and nesting as much of the CSS within it as possible, in
part to get a feel for how and when it's useful, but also to give it a
proper test in a &lt;em&gt;"proper"&lt;/em&gt; application. In doing so &lt;a href="https://github.com/Textualize/textual/issues/3969"&gt;I think I've found one
bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dogfooding is always a good idea.&lt;/p&gt;
&lt;p&gt;The main visible change in this release is I've played around with the look
of the comments dialog a bit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OSHit you have comments" src="/attachments/2024/01/07/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm still narrowing this down, but I think I prefer this look to what I
started out with.&lt;/p&gt;
&lt;p&gt;Another change I made was also to the comments dialog. Before, if you
performed the &lt;em&gt;"expand comments"&lt;/em&gt; action on a comment card that already had
its comments expanded, it would move focus to the first child comment; this
was a deliberate choice that felt right at the time. Having used the app for
a few days now I've realised that making it an open/close toggle is far more
useful. So that's what I've done.&lt;/p&gt;
&lt;p&gt;Now... as for &lt;a href="https://github.com/davep/oshit/releases/tag/v0.1.1"&gt;the previous
release&lt;/a&gt; I mentioned
above. That was a fun one.&lt;/p&gt;
&lt;p&gt;Back when I released v0.1.0 some joker decided that it would be fun to
&lt;a href="https://news.ycombinator.com/item?id=38831083"&gt;submit the blog post about it to the Orange
Site&lt;/a&gt;. The comments there
went as you'd expected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some riffed off the opening paragraph, ignoring the tool itself.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in self-reflective way.&lt;/li&gt;
&lt;li&gt;Some riffed off the opening paragraph in a &lt;em&gt;"I never see the problem"&lt;/em&gt;
  way.&lt;/li&gt;
&lt;li&gt;One or two did the usual &lt;em&gt;"why even bother building that when
  &lt;code&gt;$TOOL_OF_CHOICE&lt;/code&gt; exists?"&lt;/em&gt; dance to show their terminal purity.&lt;/li&gt;
&lt;li&gt;One or two posted genuinely useful links to other similar projects.&lt;/li&gt;
&lt;li&gt;The biggest tree of comments was kind of a fight.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One comment caught my eye though; someone reported having a problem running
it. My initial thought on reading it was &lt;em&gt;"my dude, seriously, you're going
to report the problem in some random comment on HN rather than raise an
issue with the author?!?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For once &lt;a href="https://github.com/davep/oshit/issues/2"&gt;I was wrong to be so cynical&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, yeah, that was the reminder I needed that I'd been intentionally
reckless while writing the original code, and hadn't &lt;a href="https://github.com/davep/oshit/pull/4"&gt;gone back to the API
code I'd written and made it behave&lt;/a&gt;
before doing the initial release.&lt;/p&gt;
&lt;p&gt;All of which is to say: if you run into a problem with some FOSS project, be
like &lt;a href="https://github.com/mihaitodor"&gt;@mihaitodor&lt;/a&gt;. Issue that thing so the
developer gets to know about it; don't assume they'll be reading some random
comment section, social media site or Discord server!&lt;/p&gt;
&lt;p&gt;That and don't make 500+ HTTP requests at once; that might not end well for
some.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 07 Jan 2024 09:50:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-07:/2024/01/07/oshit-0-2-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Orange Site Hit</title><link>https://blog.davep.org/2024/01/01/oshit.html</link><description>&lt;p&gt;I know I'm not alone in having a relationship with &lt;a href="https://news.ycombinator.com/"&gt;the orange
site&lt;/a&gt; that is... weird. I generally dislike
the culture there, it's almost impossible to read any of the comments
without being frustrated about the industry I work in or am adjacent to and
some of the people who inhabit it; but as a link aggregator of stuff I might
find interesting... I honestly can't think of anywhere better. So, yes, I've
been a fairly avid reader of HackerNews for many years, and have even had an
account there for over 4 years.&lt;/p&gt;
&lt;p&gt;Given this, for a wee while now, I've been meaning to knock up a
terminal-based client for it using
&lt;a href="https://textual.textualize.io/"&gt;Textual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So after work on &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt; settled down I got
the urge to start a new pet project (not abandoning Tinboard, I'm still
going to be tweaking and extending it of course) and finally knocking up
that client seemed like the one.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Orange Site Hit&lt;/em&gt; is the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OShit" src="/attachments/2024/01/01/oshit-index.png"&gt;&lt;/p&gt;
&lt;p&gt;It's worth making clear from the very start: this is a read-only reader.
There is no logging in, there is no voting, there is no posting of things.
This is a client built with &lt;a href="https://github.com/HackerNews/API"&gt;their own
API&lt;/a&gt; and it doesn't provide such a thing;
at least not now and despite me seeing past promises that this will change,
there's no API for doing that sort of thing.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The idea of this application is you can run it up in the terminal, check the
top, best and latest from the categories provided by the API, perhaps dive
off into your web browser if needed, and then got on with other things.&lt;/p&gt;
&lt;p&gt;It's there for when you're in the terminal you just &lt;em&gt;need&lt;/em&gt; your hit of the
orange site.&lt;/p&gt;
&lt;p&gt;The main screen of the app revolves around the index of items, most of which
are going to be stories. You can see an example of that above. For people
who prefer things to be slightly less cramped, I've also added a "relaxed
layout" mode too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The index in relaxed mode" src="/attachments/2024/01/01/oshit-index-relaxed.png"&gt;&lt;/p&gt;
&lt;p&gt;From the index you can head off into your web-browser by hitting
&lt;kbd&gt;Enter&lt;/kbd&gt; on any item; if the item is a story that links to somewhere
that link will be opened; if it's something more like &lt;em&gt;AskHN&lt;/em&gt;, or a job,
it'll open the related page on HackerNews itself.&lt;/p&gt;
&lt;p&gt;Pressing &lt;kbd&gt;u&lt;/kbd&gt; with an item selected will let you view the details
for the user who posted the item:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the details of a user" src="/attachments/2024/01/01/oshit-user-dialog.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're the sort of person who wants to torture themselves by reading the
comments (oh come on we all do it!), there's a comment reader/navigator too.
With an item selected press &lt;kbd&gt;c&lt;/kbd&gt; and the comment dialog will open:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewing the real meat of HackerNews" src="/attachments/2024/01/01/oshit-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; the navigation within that dialog is fine; although I can see some
scope for improvement. At the moment it uses a widget-per-comment (actually,
it's at least 4 widgets per comment), which is fine and Textual handles that
without an issue, even on items with lots of comments, but longer-term I can
see me having some fun using &lt;a href="https://textual.textualize.io/guide/widgets/#line-api"&gt;the line
API&lt;/a&gt; to build a
super-efficient comment presentation and navigation widget.&lt;/p&gt;
&lt;p&gt;That's it for now; it feels like a good v0.1.0 spot to be in. There are a
bunch of things I still want to do with it (better cleaning up of the text,
perhaps with some markup support so links get handled, etc; plus lots of
ways of searching for stuff), but I felt it was in a place where I could
start using it.&lt;/p&gt;
&lt;p&gt;Anyway, if this sounds like your sort of thing, it can be installed with
&lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/oshit/"&gt;from PyPi&lt;/a&gt;. The
&lt;a href="https://github.com/davep/oshit"&gt;source is available over on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Yes, there are lots of clients that do all sorts of HTML-scraping of
the actual website to make this possible; this ain't that. This ain't
going to be that.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 01 Jan 2024 10:17:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2024-01-01:/2024/01/01/oshit.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Tinboard v0.4.0</title><link>https://blog.davep.org/2023/12/25/tinboard-0-4-0.html</link><description>&lt;p&gt;Although it's not planned this way, so far it looks like I'm on a "every
other day" release cycle with Tinboard right now! Today's release is a small
but handy one, I think.&lt;/p&gt;
&lt;p&gt;Thanks to the handy little library
&lt;a href="https://github.com/asweigart/pyperclip"&gt;&lt;code&gt;pyperclip&lt;/code&gt;&lt;/a&gt; I've added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to copy a bookmark's URL to the clipboard.&lt;/li&gt;
&lt;li&gt;URL field autofill if you go to add a new bookmark and the clipboard
  appears to have a valid URL in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="The code for copying to the clipboard" src="/attachments/2023/12/25/copy-to-clipboard.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;At the moment the copy facility is just a straightforward copy of the URL,
nothing else. At some point I may add an extended copy option, which will
open a dialog with a bunch of options of what to copy from the bookmark, and
perhaps also how to format it or something. Like, often, if I'm copying a
bookmark's URL, it's because I want to paste it into some Markdown document,
or some location that will handle Markdown markup.&lt;/p&gt;
&lt;p&gt;Perhaps that'll turn up in v0.5.0 in a couple of days? ;-)&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Mon, 25 Dec 2023 10:43:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-25:/2023/12/25/tinboard-0-4-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Tinboard v0.3.0</title><link>https://blog.davep.org/2023/12/23/tinboard-0-3-0.html</link><description>&lt;p&gt;It looks like I'm in a wee period of small incremental changes and release
of &lt;a href="/2023/12/19/tinboard.html"&gt;Tinboard&lt;/a&gt;. This morning I've release v0.3.0,
which has a couple of small but useful changes.&lt;/p&gt;
&lt;p&gt;The first is more of a cosmetic thing. The &lt;a href="https://textual.textualize.io/widgets/footer/"&gt;&lt;code&gt;Footer&lt;/code&gt; widget in
Textual&lt;/a&gt; is handy for showing
the current keyboard bindings in a given context, but it can get massively
cluttered very quickly (we do have plans to revisit this); in Tinboard this
clutter creep was turning into a thing.&lt;/p&gt;
&lt;p&gt;So I've removed almost every binding from being displayed in the &lt;code&gt;Footer&lt;/code&gt;,
and have placed an emphasis on the user pressing &lt;kbd&gt;F1&lt;/kbd&gt; to get
context-sensitive help, and have also left the most useful bindings in the
footer with very minimal descriptions.&lt;/p&gt;
&lt;p&gt;Given that this is a keyboard-first application, and I've tried to make the
bindings easy to remember, I think it's going to make more sense to do it
like this, and will make for a tidier UI too.&lt;/p&gt;
&lt;p&gt;There is one disadvantage here of course: by removing the display of
bindings from the footer, the mouse-heavy user becomes disadvantaged; if a
particular binding doesn't have a UI feature that favours the mouse to cover
it too there's no way to initiate that action with the mouse. I'm going to
think on this a little. Again, Tinboard is designed for &lt;em&gt;me&lt;/em&gt; first and
foremost, and my preference is to be keyboard-first when using the
application; but finding a good compromise would be advantageous when it
comes to advising people asking about Textual application design.&lt;/p&gt;
&lt;p&gt;The second change is a simple but useful one. I've added a toggle of the
sort order of the tags menu in the left-hand column (bound to
&lt;kbd&gt;F4&lt;/kbd&gt;). Right now it simply toggles between alphabetical order, or
bookmark count order (most to least). At some point I might make it more of
a cycle than a toggle, but this serves my purposes for now.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sat, 23 Dec 2023 08:49:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-23:/2023/12/23/tinboard-0-3-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Tinboard v0.2.0</title><link>https://blog.davep.org/2023/12/21/tinboard-0-2-0.html</link><description>&lt;p&gt;Following on from &lt;a href="/2023/12/19/tinboard.html"&gt;the initial full release a couple of days
ago&lt;/a&gt;, I've just &lt;a href="https://github.com/davep/tinboard/releases/tag/v0.2.0"&gt;released v0.2.0 of
Tinboard&lt;/a&gt;. There's
just one small change in this, but I think it's a really useful one.&lt;/p&gt;
&lt;p&gt;In the top-left corner of the screen there's a menu of main filters, letting
you switch between seeing all bookmarks, or a combination of read, unread,
public, private, etc... In using the application I quickly realised that it
would be handy to have bookmark counts in that menu.&lt;/p&gt;
&lt;p&gt;So I added that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Counts in the filters menu" src="/attachments/2023/12/21/filters-menu.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;These counts are a little different from those in the tags list, in that
they always show the number of matching bookmarks amongst &lt;em&gt;all recorded
bookmarks&lt;/em&gt;, not just those currently on display (and so subject to any sort
of filter that's in play).&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; this is the right approach here. I know for sure that that's what
I want from this, and I am writing this for me after all...&lt;/p&gt;
&lt;p&gt;What's handy about this is that it makes it easier for me to see how many
bookmarks haven't been tagged, and also how many I haven't looked back over
and marked as read. This is already helping me get to untagged-zero.&lt;/p&gt;
&lt;p&gt;Tinboard can be installed with &lt;code&gt;pip&lt;/code&gt; or (ideally) &lt;code&gt;pipx&lt;/code&gt; &lt;a href="https://pypi.org/project/tinboard/"&gt;from
PyPi&lt;/a&gt;. The &lt;a href="https://github.com/davep/tinboard"&gt;source is available on
GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 21 Dec 2023 09:29:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-21:/2023/12/21/tinboard-0-2-0.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Tinboard</title><link>https://blog.davep.org/2023/12/19/tinboard.html</link><description>&lt;p&gt;Over the past few weeks I've been working on a new pet project, in part done
as a &lt;a href="https://textual.textualize.io/"&gt;Textual&lt;/a&gt; "dogfooding" project, but
also because this is a tool I've been wanting for a while now: a
terminal-based client for the &lt;a href="https://pinboard.in/"&gt;Pinboard bookmarking
service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The dogfooding side of the development has been helping, uncovering a couple
of fun bugs in Textual; plus the act of building this has let me try out a
few of the newer features we've recently added to the framework.&lt;/p&gt;
&lt;p&gt;What's &lt;em&gt;really&lt;/em&gt; important though is this is a tool I actually &lt;strong&gt;wanted&lt;/strong&gt;,
and I'm using pretty often. I've written a &lt;em&gt;lot&lt;/em&gt; of Textual-based
applications over the past year, most small examples, &lt;a href="https://github.com/Textualize/frogmouth"&gt;some quite a bit
bigger&lt;/a&gt;, but none of them really
form part of my daily workflow. This changes with Tinboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinboard in action" src="/attachments/2023/12/19/tinboard.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Tinboard is designed as a fully-featured client, allowing for the creation
of new Bookmarks, complete with tag suggestion support:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adding a new bookmark" src="/attachments/2023/12/19/new-bookmark.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Not only are tag suggestions pulled from Pinboard, but entry of tags can
auto-complete, taking completions from both the suggested tags and also tags
used amongst your own bookmarks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Auto-complete of tags" src="/attachments/2023/12/19/tag-suggest.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;That feature was really easy to add thanks to &lt;a href="https://textual.textualize.io/api/suggester/"&gt;the &lt;code&gt;Suggester&lt;/code&gt;
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to the
&lt;a href="https://textual.textualize.io/blog/2023/09/21/textual-0380-adds-a-syntax-aware-textarea/"&gt;recently-added&lt;/a&gt;
&lt;code&gt;TextArea&lt;/code&gt; widget the add/edit dialog allows for proper full editing of the
extended text description of the bookmark too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editing a bookmark" src="/attachments/2023/12/19/edit.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;One caveat here is a lack of word-wrapping; but this will be arriving in an
update to Textual early in the new year.&lt;/p&gt;
&lt;p&gt;As well as all the usual add/edit/delete facilities, Tinboard is also
designed to make it pretty easy to find bookmarks too. There are filtering
options for seeing all read/unread, public/private and tagged/untagged
bookmarks; this makes bookmark management really easy for me because I can
filter for all the untagged and private bookmarks, which are likely the ones
that need editing and expanding on, and tidy up my bookmark library.&lt;/p&gt;
&lt;p&gt;There is also, of course, full text search too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Text search entry" src="/attachments/2023/12/19/search-entry.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;When a filter or search is in operation, the related tags and the like react
too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="A search result being shown" src="/attachments/2023/12/19/search-result.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Another thing I've made a point of doing in Tinboard is leaning pretty hard
on the &lt;a href="https://textual.textualize.io/guide/command_palette/"&gt;Command
Palette&lt;/a&gt;. No
functionality is &lt;em&gt;only&lt;/em&gt; available by it (I've done my best to make sure that
keyboard is the primary input device here, with keyboard shortcuts for as
much as possible). Initially I approached this as a "for the sake of
completeness" feature, but already I'm finding that it's a pretty quick
method of pulling up a tag filter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The command palette in action" src="/attachments/2023/12/19/command-palette.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;To help make all the features as discoverable possible, I've also ensured
there's a pretty comprehensive help screen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Help" src="/attachments/2023/12/19/help.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Anyway; that's v0.1.0 out in the wild. I'm pleased with how it's turned out
and there's a few more things I'd like to add. It's licensed GPL-3.0 and
available &lt;a href="https://github.com/davep/tinboard"&gt;via GitHub&lt;/a&gt; and also &lt;a href="https://pypi.org/project/tinboard/"&gt;via
PyPi&lt;/a&gt;. If you have an environment that
has &lt;code&gt;pipx&lt;/code&gt; installed you should be able to get up and going with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tinboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this is useful to someone else. :-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Tue, 19 Dec 2023 09:47:00 +0000</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-19:/2023/12/19/tinboard.html</guid><category>Coding</category><category>Python</category><category>terminal</category><category>textual</category></item><item><title>Steam Deck</title><link>https://blog.davep.org/2023/12/14/Steam-Deck.html</link><description>&lt;p&gt;Back in 2021, I think it was, when Value first announced the Steam Deck, I
was all &lt;em&gt;"hell yes sign me up!"&lt;/em&gt;; like... really, I signed up there and then
to go on the waiting list. The idea of a wee device that would let me play a
ton of games in my Steam library seemed like a great idea. The price seemed
right too.&lt;/p&gt;
&lt;p&gt;So, I signed up, and waited, and waited, and life moved on.&lt;/p&gt;
&lt;p&gt;When I finally (I think it was the best part of 18 months later?) got the
email saying my Deck was up for grabs and did I want to complete the
purchase I... said nah. By this point I was &lt;em&gt;so&lt;/em&gt; heavily into VR gaming that
mucking with stuff on a Deck didn't seem to make much sense to me any more.&lt;/p&gt;
&lt;p&gt;I moved on.&lt;/p&gt;
&lt;p&gt;Then a few weeks back they announced the OLED version and I took a second
look. There was now over a year of reviews to read, hacks to notice, fun to
follow; now I could get an idea if a Deck was any good and if it was for me.
So after a bit of review-reading and review-watching, Thursday last week, I
slapped down an order; and by Tuesday the Deck turned up.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Deck getting going" src="/attachments/2023/12/14/new-deck.jpg#centre"&gt;&lt;/p&gt;
&lt;p&gt;The overturning of my original decision to &lt;em&gt;not&lt;/em&gt; buy came down to a couple
of things. The first was: I recognised that there were a lot of games in my
library, sometimes things I'd bought (often in a sale), sometimes things I'd
got as part of a Humble Bundle, that just never got played. This, I noticed,
was sort of down to an unfortunate relationship I'd developed with gaming.&lt;/p&gt;
&lt;p&gt;See... VR has won me over. I &lt;em&gt;love&lt;/em&gt; gaming in VR. Also, I love recording my
gaming sessions and &lt;a href="https://www.youtube.com/@DavePearson"&gt;throwing them on
YouTube&lt;/a&gt;. This means that, to some
extent, in my head, there's &lt;em&gt;effort&lt;/em&gt; to getting going with playing a game:
I've got to power up the Windows PC; I've got to let it update stuff; I've
got to let Steam update stuff; I've got to power up the VR headset; I've got
to get it to connect to the PC (which generally works fine but on occasion
needs a complete restart of everything); I need to decide what I'm playing
next and what to record; I've got to get the recording software going; I've
got to...&lt;/p&gt;
&lt;p&gt;You get the idea.&lt;/p&gt;
&lt;p&gt;Also, of course, I've got to be in the right state to be okay with having a
computer strapped to my face (sometimes you don't feel 100% and being lost
in a virtual world isn't the best thing to be doing).&lt;/p&gt;
&lt;p&gt;This can feel like too much effort. It also means that gaming tends to be
left for when I've got a few hours to dedicate to it.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;But I also &lt;em&gt;love&lt;/em&gt; playing games.&lt;/p&gt;
&lt;p&gt;My thinking then was a Deck would be a great way of "forcing" myself to play
the more casual stuff. There's no easy (that I know of) way to record or
stream from the Deck; it's also easy to have it on the sofa and turn it on
in a moment. This felt like the ideal device to have to hand, that was
dedicated to gaming, and which would encourage me to take smaller gaming
sessions when the time arises.&lt;/p&gt;
&lt;p&gt;Like... sometimes I'll put something on to cook, come into the living room,
pick up the tablet and scroll through the Internet. While I try not to
doom-scroll too much, I can see that it would be more healthy to pick up the
Deck and play DooM!&lt;/p&gt;
&lt;p&gt;So far, two days in, I'm convinced this was an excellent idea and I'm
totally won over.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My Steam Deck and Stream Deck" src="/attachments/2023/12/14/IMG_3842.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;I'm still getting a feel for what does and doesn't work best on the Deck,
from a &lt;em&gt;"my taste in games"&lt;/em&gt; point of view, but things that allow for
dipping in and having a quick blast are winners.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://store.steampowered.com/app/741510/The_Hong_Kong_Massacre/"&gt;Hong Kong Massacre&lt;/a&gt;
has finally got a play, despite me owning it ever since I saw John Wick 4.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hong Kong Massacre" src="/attachments/2023/12/14/hong-kong.jpg#centre"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://store.steampowered.com/app/2300/DOOM_II/"&gt;DooM II&lt;/a&gt; got installed
and is working well -- I may have to slowly play my way through the whole
thing. I've also installed &lt;a href="https://store.steampowered.com/app/255070/Abyss_Odyssey/"&gt;Abyss
Odyssey&lt;/a&gt; and so
far am finding it quite charming and fun (it's an example of a game that
isn't really my kind of thing; but I got it in a Humble Bundle, I think, and
it's been sat there with 0 hours for way too long).&lt;/p&gt;
&lt;p&gt;I've also failed to resist one of the &lt;a href="https://store.steampowered.com/app/434050/Duke_Nukem_3D_20th_Anniversary_World_Tour/"&gt;more questionable titles from my
younger days&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Come get some" src="/attachments/2023/12/14/duke.jpg#centre"&gt;&lt;/p&gt;
&lt;p&gt;The real surprise for me though has been a game I bought on a whim a couple
of weeks back, which was going cheap, looked fun, seemed nice and casual and
which I installed on the PC and totally ignored (because, again, turning on
the PC to have a quick game seems like a lot of faff):
&lt;a href="https://store.steampowered.com/app/1942280/Brotato/"&gt;Brotato&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Brotato" src="/attachments/2023/12/14/brotato.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This game is frantic, way over the top, kinda confusing in parts (for me)
but accessible enough that I can actually have a ton of fun with it; and
what's really important is that I can pick up the Deck, turn it on, play a
game of this for 10 minutes and then go on to do the thing I needed to do
next. It's the &lt;em&gt;perfect&lt;/em&gt; game to play while waiting for the next step in
dinner to cook.&lt;/p&gt;
&lt;p&gt;So, yeah, The Steam Deck... I'm won over; I'm so won over. And I haven't
even properly explored the fact that it has a full GNU/Linux desktop inside
it that I can use as a desktop machine...&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some of this is also true with gaming on the PS5; while it's easier to
turn on and get going, and while I don't have a VR setup for it, I do
have it in my head that it's more for "epic gaming" than quick casual
stuff; see &lt;a href="https://my.chiral.pictures/"&gt;Death Stranding&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=0TriPR0c-eg&amp;amp;list=PLUY2FpMDyORBQXTLCgueUh5v8DCx5TByU"&gt;Cyberpunk
2077&lt;/a&gt;
for example.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 14 Dec 2023 16:47:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-14:/2023/12/14/Steam-Deck.html</guid><category>Tech</category><category>gaming</category><category>Steam</category><category>Steam Deck</category><category>hardware</category></item><item><title>When it doesn't just work</title><link>https://blog.davep.org/2023/12/08/when-it-does-not-just-work.html</link><description>&lt;p&gt;My journey into the Apple ecosystem has been gradual but all-consuming. I've
gone from, &lt;a href="/2015/06/27/my-first-couple-of-weeks-with-an-imac.html"&gt;around a 8 years
ago&lt;/a&gt;, being
unconvinced about how good the whole Apple world is, to pretty much having
all the hardware they make available, in some form, that I have an actual
use for&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;One of the devices I was late to, but won over by, after moving away from
Android to iPhone, was the Apple Watch. These days I have two: the original
SE, and also a Series 8. Generally I've marvelled at just how seamless the
experience is. I swap watches: the connection to my phone "just works" and
it figures all that out. Stuff syncs. Stuff stays in sync.&lt;/p&gt;
&lt;p&gt;I lean heavily on the watch. The Series 8 is my daily driver, and the SE
acts as my nighttime tracking device while the 8 charges and I sleep.&lt;/p&gt;
&lt;p&gt;I record walks. I record runs. I record lots of heart rate data. I pay for
things, pretty much everything, with it. I... take it for granted really.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My main watch face" src="/attachments/2023/12/08/watch-face.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;Yesterday though, something odd started to happen. I noticed that some
things didn't seem to be syncing from my watch to the phone. Health-related
things weren't turning up. A recorded workout didn't show. The control of
all things audio seemed to decouple and the watch kept taking over use of my
AirPods from the phone in an annoying way I'd never experienced before.
Things like that.&lt;/p&gt;
&lt;p&gt;I tried a reboot of the watch. Stuff turned up.&lt;/p&gt;
&lt;p&gt;It happened again. I tried a reboot of the phone. Stuff turned up.&lt;/p&gt;
&lt;p&gt;It happened again.&lt;/p&gt;
&lt;p&gt;I then rebooted watch and phone, stuff seemed fine, and I didn't think much
more about it.&lt;/p&gt;
&lt;p&gt;Then this morning I swapped from the SE back to the Series 8 as I sat down
for breakfast, my usual routine, and the syncing was failing &lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This, for me, this is when Apple stuff gets really frustrating. There's no
easy or obvious way to diagnose what's going on. Like: I could not sync some
health data from the watch to the phone, but I &lt;em&gt;could&lt;/em&gt; use "Find My" to ping
the watch (presumably a difference in communication route, BT vs Wi-Fi
perhaps). There's no obvious error dialog. There's no obvious log to look
at. There's no "your BT is borked" alert or something.&lt;/p&gt;
&lt;p&gt;Searching online the advice seemed to be the nuclear option: unpair the
watch, reset it, start again. So I've done that this morning and it's been
quite the pain. Getting it set up again was straightforward enough, but
having to go through the whole thing of dismissing all the &lt;em&gt;"here's some
tips on how to use this watch you've had for a year and used every day"&lt;/em&gt;
cards was annoying, also having to set up my payment cards again was
annoying. Also, and this is on me for not backing them up recently, trying
to recreate my watch faces from memory and remembering which ones they were
based on was also annoying.&lt;/p&gt;
&lt;p&gt;Apple are actually so good at a lot of this seamless shit; but damn do I
wish they'd also be good at making a tool that lets you easily and smoothly
diagnose some issues. I would imagine sync issues between watch and phone
are common enough that a wee tool where you run through diagnostics, and
where there's a Q&amp;amp;A to help narrow down the issue, would be a great
experience.&lt;/p&gt;
&lt;p&gt;Anyway... it seems to be up and running again, so hopefully that's that
issue solved. I tried a couple of things that would need to sync from the
watch to the phone and they showed up instantly; actually faster than I've
been used to for quite a while.&lt;/p&gt;
&lt;p&gt;Fingers crossed...&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;During a conversation about this at work the other week, I think I
figured out that the only Apple product category in which I don't own an
example of the hardware is displays&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. :-/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;When the VisionPro comes out I'll be able to say there's two.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 08 Dec 2023 10:32:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-12-08:/2023/12/08/when-it-does-not-just-work.html</guid><category>Tech</category><category>Apple</category><category>watch</category></item><item><title>Fender Mustang Micro</title><link>https://blog.davep.org/2023/11/05/fender-mustang-micro.html</link><description>&lt;p&gt;The urge to go gadget crazy, when getting a new hobby, or reviving an old
one, is a real thing. Having recently bought &lt;a href="/2023/10/20/a-new-guitar.html"&gt;the new
guitar&lt;/a&gt; with a view to trying to learn to
play properly, it's something I'm very mindful of and doing my best to
avoid. However, in the middle of the week I did crack and buy one little
extra thing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fender Mustang Micro" src="/attachments/2023/11/05/IMG_3488.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;As I said in the previous blog post about the guitar: I ended up getting
something that could be played acoustic without being annoying for
neighbours, which in turn meant I didn't need any sort of amp, or pedals,
etc. This has been working out just fine. But early last week, in an idle
moment, I was looking up what might be good options for a small amp for
practising should I want to and I stumbled on the &lt;a href="https://www.fender.com/articles/parts-and-accessories/mustang-micro"&gt;Mustang
Micro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reading up on it and checking out some reviews, it sounded &lt;em&gt;perfect&lt;/em&gt; for my
setup. I enjoy living in a small space, so could do without a proper amp
kicking about, so something that just plugs right into the guitar sounded
ideal.&lt;/p&gt;
&lt;p&gt;I added it to a list of things to keep in mind and then... a couple of days
later I was working from home which meant I'd be about to receive a delivery
if I was to place an order and... oops!&lt;/p&gt;
&lt;p&gt;I've been using it every day since it turned up and I'm so damn impressed!
This thing might be small, but it's pretty mighty! For a complete notice
like me, to muck about, and fiddle and get some great sounds out of it, I
couldn't have asked for anything more.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Options" src="/attachments/2023/11/05/IMG_3489.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;The range of amp styles is way more than I could possibly do justice right
now, but what's important for me is it's got versions that are nice and
clean, and versions that are dirty and distorted. The effects are pretty
much spot on too; there's everything I could ever possibly want there.&lt;/p&gt;
&lt;p&gt;My only real complaint about it is that the UI itself -- small lights that
use colour to indicate their setting -- is terrible. I don't know how else
they &lt;em&gt;could&lt;/em&gt; have done it, but I know this is bad. I am at least grateful
that it's standalone and doesn't require some app on a phone to control or
something like that.&lt;/p&gt;
&lt;p&gt;I know it's going to take a while for me to get the most out of this, but
already it's giving me a bit more confidence to experiment and doodle away
in idle moments. Also, the USB connection means it can be plugged into my
Mac, presumably allowing me to record with GarageBand or similar software.
While I wouldn't use it to subject anyone to my terrible playing, that will
be something for me to explore in terms of keeping a record of my progress.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Sun, 05 Nov 2023 20:28:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-11-05:/2023/11/05/fender-mustang-micro.html</guid><category>Life</category><category>music</category><category>guitar</category></item><item><title>Evolve Words</title><link>https://blog.davep.org/2023/10/31/evolve-words.html</link><description>&lt;p&gt;This follows on from my &lt;a href="/2023/10/26/visual-selection.html"&gt;previous post&lt;/a&gt;.
If you've not read that, it's worth having a dive in first for the
background.&lt;/p&gt;
&lt;p&gt;The Ruby code I mention, that was written back in 2008, was actually a pair
of scripts. The first one, called &lt;code&gt;selection&lt;/code&gt;, did what &lt;code&gt;visual-selection&lt;/code&gt;
does, only &lt;code&gt;visual-selection&lt;/code&gt; does it with a nice TUI interface: it takes a
random collection of letters and symbols and evolves them into a target
phrase.&lt;/p&gt;
&lt;p&gt;As covered before: I don't remember all of the details of the conversation
that was going on at the time, but I do seem to remember something along the
lines of &lt;em&gt;"yes, but you start out and end up with something the same
length"&lt;/em&gt; and &lt;em&gt;"nothing more complex is made"&lt;/em&gt; (let's gloss over the whole
"complex" thing for now... well okay let's just gloss over it, end of story;
this is just a fun coding exercise).&lt;/p&gt;
&lt;p&gt;What I do remember is that the seed of an idea was planted. Fine: how about
I start off with one small word, and using a list of English words as the
"fitness landscape" that the mutations had to survive in, mutate a
population over and over and see what happens. Would I "randomly" create
known words, with fewer letters, with the same letters, with more letters?&lt;/p&gt;
&lt;p&gt;So this version of the code randomly did three forms of mutation: it would
randomly flip a letter, or randomly delete a letter, or randomly insert a
random letter. It would do this over and over and eliminate words that
aren't in the original list (the simple form of selecting for survival
within the landscape).&lt;/p&gt;
&lt;p&gt;Like I said last time: never going to convince anyone of anything, but fun
to write some code.&lt;/p&gt;
&lt;p&gt;This version became &lt;code&gt;selection2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, having turned &lt;code&gt;selection&lt;/code&gt; into a TUI application with Textual, I &lt;em&gt;had&lt;/em&gt;
to do the same with this code...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Evolve Words" src="/attachments/2023/10/31/evolve-words.png#centre"&gt;&lt;/p&gt;
&lt;p&gt;As before, because it's fun to do so, this leans heavily on the &lt;a href="https://textual.textualize.io/guide/workers/"&gt;worker
API&lt;/a&gt; and
&lt;a href="https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/"&gt;&lt;code&gt;textual-plotext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to check out the app itself there's &lt;a href="https://github.com/davep/evolve-words"&gt;a GitHub
repo&lt;/a&gt; and it can also be
installed &lt;a href="https://pypi.org/project/evolve-words/"&gt;from PyPi&lt;/a&gt; using
&lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Tue, 31 Oct 2023 21:39:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-10-31:/2023/10/31/evolve-words.html</guid><category>Coding</category><category>Python</category><category>evolution</category><category>biology</category><category>terminal</category><category>textual</category></item><item><title>Visual Selection</title><link>https://blog.davep.org/2023/10/26/visual-selection.html</link><description>&lt;p&gt;Over the last few weeks I've had a couple of sessions of working on a
library to wrap &lt;a href="https://pypi.org/project/plotext/"&gt;Plotext&lt;/a&gt; -- a popular
terminal-based plotting library for Python -- so that it can easily be used
in Textual apps;
&lt;a href="https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/"&gt;&lt;code&gt;textual-plotext&lt;/code&gt;&lt;/a&gt;
is the result.&lt;/p&gt;
&lt;p&gt;I feel it's come together pretty well&lt;/p&gt;
&lt;p&gt;But... I've been itching to find a reason to use it in a project of my own.&lt;/p&gt;
&lt;p&gt;Meanwhile...&lt;/p&gt;
&lt;p&gt;Back in the mid-2000s, when &lt;a href="https://en.wikipedia.org/wiki/PhpBB"&gt;phpBB&lt;/a&gt;
systems were still the fashion, I used to hang out on a site that was
chiefly aimed at the atheist and secular humanist crowd. We'd get a good
number of drive-by
&lt;a href="https://en.wikipedia.org/wiki/Young_Earth_creationism"&gt;YEC&lt;/a&gt; types who'd
want to argue (sorry... debate) and often talk nonsense about biology and
the like.&lt;/p&gt;
&lt;p&gt;Now, I'm no biologist, I'm no scientist, I'm just a hacker who likes to
write code for fun and profit; so any time there was a chance to write some
code to help illustrate an idea I'd jump at the chance. I forget the detail
now -- this was back in 2008; 15 years ago as of the time of writing -- but
one time I remember a conversation was taking place where someone was just
flat out claiming that "random mutation" can only cause "loss of
information" and could never lead to a "desired result", or some such thing.&lt;/p&gt;
&lt;p&gt;If you've ever had, read or watched those debates, you'll know the sort of
thing I mean.&lt;/p&gt;
&lt;p&gt;So that got me thinking back then, could I write something that could give a
simple illustration of how this doesn't quite make sense?&lt;/p&gt;
&lt;p&gt;So I had a little hacking session and came up with some Ruby code&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; that
did what I felt was the job. You'd give it a phrase you wanted it to
generate (a stand-in for the current "fitness landscape", in effect), it
would then generate a totally random string of that length, and then would
set about mutating it, finding mutations that were "fitter" than others (a
stand in for selection), breed the best two so far (randomly copy one chunk
from another to create a child), then repeat over and over.&lt;/p&gt;
&lt;p&gt;When I first wrote it I wasn't sure what to expect; would it ever finish
given a reasonably large target string?&lt;/p&gt;
&lt;p&gt;It did.&lt;/p&gt;
&lt;p&gt;It was fun to code.&lt;/p&gt;
&lt;p&gt;It got posted to the BB and of course wasn't in any way persuasive to them
(honestly I never expected it would be). I seem to recall it being
hand-waved away with calls of there obviously being an intelligent designer
involved&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, the "meanwhile..." in this: a few times this year I've thought it
could be fun to rework this in Python (it's really not that complex after
all; just a string-chopping loop really) and use Textual to put a fun UI on
it.&lt;/p&gt;
&lt;p&gt;So, that's what I did, complete with &lt;code&gt;textual-plotext&lt;/code&gt; plot:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Visual Selection in action" src="/attachments/2023/10/26/visual-selection.png"&gt;&lt;/p&gt;
&lt;p&gt;While, 15 years on, this isn't going to convince anyone of the underlying
point, I think it does serve a good educational purpose. It shows that you
can create a fun UI for the terminal, with Textual, with not a lot of code.
It also shows off how you can easily create dynamic plots. Plus -- and I
think this might be the really important one -- it shows you can write
"traditional" tight-loop code in a Textual application and &lt;em&gt;still&lt;/em&gt; have a
responsive UI; all thanks to the &lt;a href="https://textual.textualize.io/guide/workers/"&gt;worker
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The heart of the code for this application is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is the target string we want to create!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shit_happens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, there's some detail in the &lt;code&gt;Environment&lt;/code&gt; class, but you get the idea:
while we've not hit the target, let &lt;a href="https://www.youtube.com/watch?v=kiVVzxoPTtg"&gt;life find a
way&lt;/a&gt;. A loop like that would
totally bog down an application with a UI without some other work taking
place. With Textual and workers the resulting method in the application,
complete with code to send updates to the UI, really doesn't look much
different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_cancelled&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shit_happens&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_fit_found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I honestly think the worker API is one of the coolest things added to
Textual and I so often see people have real &lt;em&gt;"woah!"&lt;/em&gt; moments when they get
to grips with it.&lt;/p&gt;
&lt;p&gt;Anyway... I've covered science, religion, and how Ruby is better than
Python, so I'm sure I've annoyed almost everyone. Job done I guess. ;-)&lt;/p&gt;
&lt;p&gt;If you want to check out the app itself there's &lt;a href="https://github.com/davep/visual-selection"&gt;a GitHub
repo&lt;/a&gt; and it can also be
installed &lt;a href="https://pypi.org/project/visual-selection/"&gt;from PyPi&lt;/a&gt; using
&lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Expect it to be my tinker project of choice for a wee while; there's a
couple of other things I'd like to add to it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Possibly unpopular opinion with some folk who will read this, but I've
long been a fan of Ruby as a language and actually generally prefer it
to Python.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Me, the coder. While utterly missing the point of a simple
illustration, while apparently not understanding the concept of an
analogy, I guess at least they felt I was intelligent?&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Thu, 26 Oct 2023 18:50:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-10-26:/2023/10/26/visual-selection.html</guid><category>Coding</category><category>Python</category><category>evolution</category><category>biology</category><category>terminal</category><category>textual</category></item><item><title>Constant Siri voice loss</title><link>https://blog.davep.org/2023/10/20/constant-siri-voice-loss.html</link><description>&lt;p&gt;This seems to have started with iOS 17, and I can't narrow down the how and
the when of it happening, but over the last week or so I've found that every
couple of days Siri seems to lose their voice. By this I mean the high
quality voice that's used when they speak seems to disappear. I notice this
when I ask my phone or headphones a question or to do something, and I get a
really low-quality voice that speaks back to me.&lt;/p&gt;
&lt;p&gt;The voice itself seems to be a version of the voice I normally use, but like
it's using an on-device much-cut-down version. If I go into the settings to
check what voice is selected, it's the one I normally use, but it wants to
download it again.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Downloading the voice all over again" src="/attachments/2023/10/20/siri-voice-loss.png"&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, once the download is complete all is good again. I've not kept
track of when it happens -- and I think I should from now on -- but it feels
like it happens every couple of days; I almost always notice it first thing
in the morning, the first time I ask the phone or the headphones something.&lt;/p&gt;
&lt;p&gt;I hope it is some sort of iOS 17 weirdness and is gone when 17.1 turns up.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 20 Oct 2023 13:04:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-10-20:/2023/10/20/constant-siri-voice-loss.html</guid><category>Tech</category><category>Apple</category><category>iPhone</category><category>Siri</category></item><item><title>A new guitar</title><link>https://blog.davep.org/2023/10/20/a-new-guitar.html</link><description>&lt;p&gt;This one has been brewing for a year, more or less. Now that I commute into
and back from Edinburgh most days of the working week, I find myself walking
past a couple of music shops. Seeing these reminds me of the days, back in
my 20s, when I &lt;a href="https://www.flickr.com/photos/davepearson/albums/72157600225099352"&gt;mucked around in a couple of
bands&lt;/a&gt;
and had fun making noises on a bass guitar. Since that time I've also owned
a cheap six string electric, which is currently in storage (and has been
since 2016) and an acoustic, which I have with me but I live in an apartment
building and I'm not an arsehole so I never play it.&lt;/p&gt;
&lt;p&gt;So, yeah, walking past those shops has made me want to muck about on a
guitar again. I've never properly learnt the guitar, I've just managed to
learn enough chords to make some noises I like for my own amusement, but
even then I've not picked one up since around 2016 and what little I do know
is very rusty.&lt;/p&gt;
&lt;p&gt;Add to the above: earlier this year I was at a friend's and admiring her
collection of bass and six string guitars and picked a couple up and
realised I could not play anything. It had been too long, I'd lost most
muscle memory and coordination, and what little knowledge I had.&lt;/p&gt;
&lt;p&gt;So this made me want to fix this even more.&lt;/p&gt;
&lt;p&gt;Given the apartment thing I decided on a plan: how about I get an eclectic,
and then some sort of amplification that would always rely on headphones?
Given such a setup I could knuckle down and try and learn properly.&lt;/p&gt;
&lt;p&gt;So, this week, being on holiday, I told myself I'd pop into Edinburgh one
day and have a look at my options; perhaps even come home with something.
Yesterday was that day.&lt;/p&gt;
&lt;p&gt;It didn't quite go to plan, but the outcome was that I ended up with
something to play.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My new Höfner" src="/attachments/2023/10/20/IMG_3329.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;So, on getting into the shop, and explaining what I was after and why to the
chap in there, I tried the usual Stratocaster and Telecaster thing. Both
were fine (I think I liked the feel of the Telecaster more in my hand). I
had one eye on a Les Paul too, but never tried that. What I did see though
was this rather lovely black Höfner.&lt;/p&gt;
&lt;p&gt;Now, of course, it's hollow body, so sort of has that acoustic thing going
on. This isn't what I wanted for playing in an apartment. But I had to try
it anyway. As soon as I started dabbling I was sold. The sound was enough
that it would be easy to pick up and play without having to faff with
amplification of any sort, on the other hand it was nowhere near as loud as
my acoustic. I felt like it bridged the gap between easy to pick up, and
versatile enough should I ever want to plug it into something.&lt;/p&gt;
&lt;p&gt;And... let's be honest: it was black. Sooooo black. I like black.&lt;/p&gt;
&lt;p&gt;Long story short... it had to come home with me!&lt;/p&gt;
&lt;p&gt;As mentioned earlier: most of my guitar stuff is still in storage, from when
I moved to Scotland, but I &lt;em&gt;did&lt;/em&gt; find my old tin of plectrums and the tuner.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Standard guitar kit" src="/attachments/2023/10/20/IMG_3330.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
    &lt;em&gt;(Yes, the tin was once mine and was once full; the early 90s were a
    different time)&lt;/em&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I even found one of my old stands, that I've had since around 1991! So now
it's set up in my living room, next to the PCVR rig, ready to go at a
moment's notice.&lt;/p&gt;
&lt;p&gt;&lt;img alt="On its stand, ready to go" src="/attachments/2023/10/20/IMG_3331.jpeg#centre"&gt;&lt;/p&gt;
&lt;p&gt;This is my plan now: each weekend I aim to put in at least an hour a day of
practice, to try and get my fingers up to strength again, and to build up
the muscle memory of where the strings are, to get the coordination between
both hands, etc. I'm also going to be working through beginner's lessons
from a tutor application. I'm going to treat this like I'm the complete
novice I am and slowly work on improving.&lt;/p&gt;
&lt;p&gt;There's no end goal; other than just get proficient enough that I can muck
about on my own and be happy that I can play the sorts of things I want to
be able to play.&lt;/p&gt;
&lt;p&gt;Also, it's good to learn new stuff, &lt;em&gt;especially&lt;/em&gt; new stuff that isn't just
more coding.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Pearson</dc:creator><pubDate>Fri, 20 Oct 2023 08:39:00 +0100</pubDate><guid isPermaLink="false">tag:blog.davep.org,2023-10-20:/2023/10/20/a-new-guitar.html</guid><category>Life</category><category>music</category><category>guitar</category></item></channel></rss>